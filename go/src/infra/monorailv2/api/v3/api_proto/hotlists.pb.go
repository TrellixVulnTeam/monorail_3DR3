// Copyright 2020 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file or at
// https://developers.google.com/open-source/licenses/bsd

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.24.0-devel
// 	protoc        v3.6.1
// source: api/v3/api_proto/hotlists.proto

package monorail_v3

import prpc "go.chromium.org/luci/grpc/prpc"

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	field_mask "google.golang.org/genproto/protobuf/field_mask"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

// Request message for CreateHotlist method.
// Next available tag: 2
type CreateHotlistRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The hotlist to create.
	// `hotlist.owner` must be empty. The owner of the new hotlist will be
	// set to the requester.
	Hotlist *Hotlist `protobuf:"bytes,1,opt,name=hotlist,proto3" json:"hotlist,omitempty"`
}

func (x *CreateHotlistRequest) Reset() {
	*x = CreateHotlistRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v3_api_proto_hotlists_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateHotlistRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateHotlistRequest) ProtoMessage() {}

func (x *CreateHotlistRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_v3_api_proto_hotlists_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateHotlistRequest.ProtoReflect.Descriptor instead.
func (*CreateHotlistRequest) Descriptor() ([]byte, []int) {
	return file_api_v3_api_proto_hotlists_proto_rawDescGZIP(), []int{0}
}

func (x *CreateHotlistRequest) GetHotlist() *Hotlist {
	if x != nil {
		return x.Hotlist
	}
	return nil
}

// Request message for GetHotlist method.
// Next available tag: 2
type GetHotlistRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The name of the hotlist to retrieve.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *GetHotlistRequest) Reset() {
	*x = GetHotlistRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v3_api_proto_hotlists_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetHotlistRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetHotlistRequest) ProtoMessage() {}

func (x *GetHotlistRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_v3_api_proto_hotlists_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetHotlistRequest.ProtoReflect.Descriptor instead.
func (*GetHotlistRequest) Descriptor() ([]byte, []int) {
	return file_api_v3_api_proto_hotlists_proto_rawDescGZIP(), []int{1}
}

func (x *GetHotlistRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

// Request message for UpdateHotlist method.
// Next available tag: 2
type UpdateHotlistRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The hotlist's `name` field is used to identify the hotlist to be updated.
	Hotlist *Hotlist `protobuf:"bytes,1,opt,name=hotlist,proto3" json:"hotlist,omitempty"`
	// The list of fields to be updated.
	UpdateMask *field_mask.FieldMask `protobuf:"bytes,2,opt,name=update_mask,json=updateMask,proto3" json:"update_mask,omitempty"`
}

func (x *UpdateHotlistRequest) Reset() {
	*x = UpdateHotlistRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v3_api_proto_hotlists_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateHotlistRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateHotlistRequest) ProtoMessage() {}

func (x *UpdateHotlistRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_v3_api_proto_hotlists_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateHotlistRequest.ProtoReflect.Descriptor instead.
func (*UpdateHotlistRequest) Descriptor() ([]byte, []int) {
	return file_api_v3_api_proto_hotlists_proto_rawDescGZIP(), []int{2}
}

func (x *UpdateHotlistRequest) GetHotlist() *Hotlist {
	if x != nil {
		return x.Hotlist
	}
	return nil
}

func (x *UpdateHotlistRequest) GetUpdateMask() *field_mask.FieldMask {
	if x != nil {
		return x.UpdateMask
	}
	return nil
}

// Request message for ListHotlistItems method.
// Next available tag: 5
type ListHotlistItemsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The parent hotlist, which owns this collection of items.
	Parent string `protobuf:"bytes,1,opt,name=parent,proto3" json:"parent,omitempty"`
	// The maximum number of items to return. The service may return fewer than
	// this value.
	// If unspecified, at most 1000 items will be returned.
	// The maximum value is 1000; values above 1000 will be coerced to 1000.
	PageSize int32 `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// The string of comma separated field names used to order the items.
	// Adding '-' before a field, reverses the sort order.
	// E.g. 'stars,-status' sorts the items by number of stars low to high, then
	// status high to low.
	// If unspecified, items will be ordered by their rank in the parent.
	OrderBy string `protobuf:"bytes,3,opt,name=order_by,json=orderBy,proto3" json:"order_by,omitempty"`
	// A page token, received from a previous `ListHotlistItems` call.
	// Provide this to retrieve the subsequent page.
	//
	// When paginating, all other parameters provided to `ListHotlistItems` must
	// match the call that provided the page token.
	PageToken string `protobuf:"bytes,4,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
}

func (x *ListHotlistItemsRequest) Reset() {
	*x = ListHotlistItemsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v3_api_proto_hotlists_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListHotlistItemsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListHotlistItemsRequest) ProtoMessage() {}

func (x *ListHotlistItemsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_v3_api_proto_hotlists_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListHotlistItemsRequest.ProtoReflect.Descriptor instead.
func (*ListHotlistItemsRequest) Descriptor() ([]byte, []int) {
	return file_api_v3_api_proto_hotlists_proto_rawDescGZIP(), []int{3}
}

func (x *ListHotlistItemsRequest) GetParent() string {
	if x != nil {
		return x.Parent
	}
	return ""
}

func (x *ListHotlistItemsRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListHotlistItemsRequest) GetOrderBy() string {
	if x != nil {
		return x.OrderBy
	}
	return ""
}

func (x *ListHotlistItemsRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

// Response to ListHotlistItems call.
// Next available tag: 3
type ListHotlistItemsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The items from the specified hotlist.
	Items []*HotlistItem `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"`
	// A token, which can be sent as `page_token` to retrieve the next page.
	// If this field is omitted, there are no subsequent pages.
	NextPageToken string `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
}

func (x *ListHotlistItemsResponse) Reset() {
	*x = ListHotlistItemsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v3_api_proto_hotlists_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListHotlistItemsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListHotlistItemsResponse) ProtoMessage() {}

func (x *ListHotlistItemsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_v3_api_proto_hotlists_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListHotlistItemsResponse.ProtoReflect.Descriptor instead.
func (*ListHotlistItemsResponse) Descriptor() ([]byte, []int) {
	return file_api_v3_api_proto_hotlists_proto_rawDescGZIP(), []int{4}
}

func (x *ListHotlistItemsResponse) GetItems() []*HotlistItem {
	if x != nil {
		return x.Items
	}
	return nil
}

func (x *ListHotlistItemsResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

// The request used to rerank a Hotlist.
// Next available tag: 4
type RerankHotlistItemsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Resource name of the Hotlist to rerank.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// HotlistItems to be moved. The order of `hotlist_items` will
	// determine the order of these items after they have been moved.
	// E.g. With items [a, b, c, d, e], moving [d, c] to `target_position` 3, will
	// result in items [a, b, e, d, c].
	HotlistItems []string `protobuf:"bytes,2,rep,name=hotlist_items,json=hotlistItems,proto3" json:"hotlist_items,omitempty"`
	// Target starting position of the moved items.
	// `target_position` must be between 0 and (# hotlist items - # items being moved).
	TargetPosition uint32 `protobuf:"varint,3,opt,name=target_position,json=targetPosition,proto3" json:"target_position,omitempty"`
}

func (x *RerankHotlistItemsRequest) Reset() {
	*x = RerankHotlistItemsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v3_api_proto_hotlists_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RerankHotlistItemsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RerankHotlistItemsRequest) ProtoMessage() {}

func (x *RerankHotlistItemsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_v3_api_proto_hotlists_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RerankHotlistItemsRequest.ProtoReflect.Descriptor instead.
func (*RerankHotlistItemsRequest) Descriptor() ([]byte, []int) {
	return file_api_v3_api_proto_hotlists_proto_rawDescGZIP(), []int{5}
}

func (x *RerankHotlistItemsRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *RerankHotlistItemsRequest) GetHotlistItems() []string {
	if x != nil {
		return x.HotlistItems
	}
	return nil
}

func (x *RerankHotlistItemsRequest) GetTargetPosition() uint32 {
	if x != nil {
		return x.TargetPosition
	}
	return 0
}

// Request message for an AddHotlistItems call.
// Next available tag: 4
type AddHotlistItemsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Resource name of the Hotlist to add new items to.
	Parent string `protobuf:"bytes,1,opt,name=parent,proto3" json:"parent,omitempty"`
	// Resource names of Issues to associate with new HotlistItems added to `parent`.
	Issues []string `protobuf:"bytes,2,rep,name=issues,proto3" json:"issues,omitempty"`
	// Target starting position of the new items.
	// `target_position` must be between [0 and # of items that currently exist in
	// `parent`]. The request will fail if a specified `target_position` is outside
	// of this range.
	// New HotlistItems added to a non-last position of the hotlist will
	// cause ranks of existing HotlistItems below `target_position` to be adjusted.
	// If no `target_position` is given, new items will be added to the end of
	// `parent`.
	TargetPosition uint32 `protobuf:"varint,3,opt,name=target_position,json=targetPosition,proto3" json:"target_position,omitempty"`
}

func (x *AddHotlistItemsRequest) Reset() {
	*x = AddHotlistItemsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v3_api_proto_hotlists_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddHotlistItemsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddHotlistItemsRequest) ProtoMessage() {}

func (x *AddHotlistItemsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_v3_api_proto_hotlists_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddHotlistItemsRequest.ProtoReflect.Descriptor instead.
func (*AddHotlistItemsRequest) Descriptor() ([]byte, []int) {
	return file_api_v3_api_proto_hotlists_proto_rawDescGZIP(), []int{6}
}

func (x *AddHotlistItemsRequest) GetParent() string {
	if x != nil {
		return x.Parent
	}
	return ""
}

func (x *AddHotlistItemsRequest) GetIssues() []string {
	if x != nil {
		return x.Issues
	}
	return nil
}

func (x *AddHotlistItemsRequest) GetTargetPosition() uint32 {
	if x != nil {
		return x.TargetPosition
	}
	return 0
}

// Request message for a RemoveHotlistItems call.
// Next available tag: 3
type RemoveHotlistItemsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Resource name of the Hotlist to remove items from.
	Parent string `protobuf:"bytes,1,opt,name=parent,proto3" json:"parent,omitempty"`
	// Resource names of Issues associated with HotlistItems that should be removed.
	Issues []string `protobuf:"bytes,2,rep,name=issues,proto3" json:"issues,omitempty"`
}

func (x *RemoveHotlistItemsRequest) Reset() {
	*x = RemoveHotlistItemsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v3_api_proto_hotlists_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoveHotlistItemsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveHotlistItemsRequest) ProtoMessage() {}

func (x *RemoveHotlistItemsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_v3_api_proto_hotlists_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveHotlistItemsRequest.ProtoReflect.Descriptor instead.
func (*RemoveHotlistItemsRequest) Descriptor() ([]byte, []int) {
	return file_api_v3_api_proto_hotlists_proto_rawDescGZIP(), []int{7}
}

func (x *RemoveHotlistItemsRequest) GetParent() string {
	if x != nil {
		return x.Parent
	}
	return ""
}

func (x *RemoveHotlistItemsRequest) GetIssues() []string {
	if x != nil {
		return x.Issues
	}
	return nil
}

// Request message for a RemoveHotlistEditors call.
// Next available tag: 3
type RemoveHotlistEditorsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Resource name of the Hotlist to remove editors from.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Resource names of Users associated with the hotlist that should be removed.
	Editors []string `protobuf:"bytes,2,rep,name=editors,proto3" json:"editors,omitempty"`
}

func (x *RemoveHotlistEditorsRequest) Reset() {
	*x = RemoveHotlistEditorsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v3_api_proto_hotlists_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoveHotlistEditorsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveHotlistEditorsRequest) ProtoMessage() {}

func (x *RemoveHotlistEditorsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_v3_api_proto_hotlists_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveHotlistEditorsRequest.ProtoReflect.Descriptor instead.
func (*RemoveHotlistEditorsRequest) Descriptor() ([]byte, []int) {
	return file_api_v3_api_proto_hotlists_proto_rawDescGZIP(), []int{8}
}

func (x *RemoveHotlistEditorsRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *RemoveHotlistEditorsRequest) GetEditors() []string {
	if x != nil {
		return x.Editors
	}
	return nil
}

// Request message for a GatherHotlistsForUser call.
// Next available tag: 2
type GatherHotlistsForUserRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Resource name of the user whose hotlists we want to fetch.
	User string `protobuf:"bytes,1,opt,name=user,proto3" json:"user,omitempty"`
}

func (x *GatherHotlistsForUserRequest) Reset() {
	*x = GatherHotlistsForUserRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v3_api_proto_hotlists_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GatherHotlistsForUserRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GatherHotlistsForUserRequest) ProtoMessage() {}

func (x *GatherHotlistsForUserRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_v3_api_proto_hotlists_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GatherHotlistsForUserRequest.ProtoReflect.Descriptor instead.
func (*GatherHotlistsForUserRequest) Descriptor() ([]byte, []int) {
	return file_api_v3_api_proto_hotlists_proto_rawDescGZIP(), []int{9}
}

func (x *GatherHotlistsForUserRequest) GetUser() string {
	if x != nil {
		return x.User
	}
	return ""
}

// Response message for a GatherHotlistsForUser call.
// Next available tag: 2
type GatherHotlistsForUserResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Hotlists []*Hotlist `protobuf:"bytes,1,rep,name=hotlists,proto3" json:"hotlists,omitempty"`
}

func (x *GatherHotlistsForUserResponse) Reset() {
	*x = GatherHotlistsForUserResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v3_api_proto_hotlists_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GatherHotlistsForUserResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GatherHotlistsForUserResponse) ProtoMessage() {}

func (x *GatherHotlistsForUserResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_v3_api_proto_hotlists_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GatherHotlistsForUserResponse.ProtoReflect.Descriptor instead.
func (*GatherHotlistsForUserResponse) Descriptor() ([]byte, []int) {
	return file_api_v3_api_proto_hotlists_proto_rawDescGZIP(), []int{10}
}

func (x *GatherHotlistsForUserResponse) GetHotlists() []*Hotlist {
	if x != nil {
		return x.Hotlists
	}
	return nil
}

var File_api_v3_api_proto_hotlists_proto protoreflect.FileDescriptor

var file_api_v3_api_proto_hotlists_proto_rawDesc = []byte{
	0x0a, 0x1f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x33, 0x2f, 0x61, 0x70, 0x69, 0x5f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2f, 0x68, 0x6f, 0x74, 0x6c, 0x69, 0x73, 0x74, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x0b, 0x6d, 0x6f, 0x6e, 0x6f, 0x72, 0x61, 0x69, 0x6c, 0x2e, 0x76, 0x33, 0x1a, 0x26,
	0x61, 0x70, 0x69, 0x2f, 0x76, 0x33, 0x2f, 0x61, 0x70, 0x69, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2f, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x20, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x6d, 0x61,
	0x73, 0x6b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x5f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x66,
	0x69, 0x65, 0x6c, 0x64, 0x5f, 0x62, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x26, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x72, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x29, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x4b, 0x0a, 0x14, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x48, 0x6f, 0x74, 0x6c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x33,
	0x0a, 0x07, 0x68, 0x6f, 0x74, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x14, 0x2e, 0x6d, 0x6f, 0x6e, 0x6f, 0x72, 0x61, 0x69, 0x6c, 0x2e, 0x76, 0x33, 0x2e, 0x48, 0x6f,
	0x74, 0x6c, 0x69, 0x73, 0x74, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x07, 0x68, 0x6f, 0x74, 0x6c,
	0x69, 0x73, 0x74, 0x22, 0x46, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x48, 0x6f, 0x74, 0x6c, 0x69, 0x73,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x31, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1d, 0xe0, 0x41, 0x02, 0xfa, 0x41, 0x17, 0x0a, 0x15,
	0x61, 0x70, 0x69, 0x2e, 0x63, 0x72, 0x62, 0x75, 0x67, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x48, 0x6f,
	0x74, 0x6c, 0x69, 0x73, 0x74, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0xa7, 0x01, 0x0a, 0x14,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x48, 0x6f, 0x74, 0x6c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x4d, 0x0a, 0x07, 0x68, 0x6f, 0x74, 0x6c, 0x69, 0x73, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6d, 0x6f, 0x6e, 0x6f, 0x72, 0x61, 0x69, 0x6c,
	0x2e, 0x76, 0x33, 0x2e, 0x48, 0x6f, 0x74, 0x6c, 0x69, 0x73, 0x74, 0x42, 0x1d, 0xe0, 0x41, 0x02,
	0xfa, 0x41, 0x17, 0x0a, 0x15, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x72, 0x62, 0x75, 0x67, 0x2e, 0x63,
	0x6f, 0x6d, 0x2f, 0x48, 0x6f, 0x74, 0x6c, 0x69, 0x73, 0x74, 0x52, 0x07, 0x68, 0x6f, 0x74, 0x6c,
	0x69, 0x73, 0x74, 0x12, 0x40, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x6d, 0x61,
	0x73, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64,
	0x4d, 0x61, 0x73, 0x6b, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x4d, 0x61, 0x73, 0x6b, 0x22, 0xab, 0x01, 0x0a, 0x17, 0x4c, 0x69, 0x73, 0x74, 0x48, 0x6f,
	0x74, 0x6c, 0x69, 0x73, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x39, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x21, 0xe0, 0x41, 0x02, 0xfa, 0x41, 0x1b, 0x12, 0x19, 0x61, 0x70, 0x69, 0x2e, 0x63,
	0x72, 0x62, 0x75, 0x67, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x48, 0x6f, 0x74, 0x6c, 0x69, 0x73, 0x74,
	0x49, 0x74, 0x65, 0x6d, 0x52, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x1b, 0x0a, 0x09,
	0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x5f, 0x62, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x42, 0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b,
	0x65, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x22, 0x72, 0x0a, 0x18, 0x4c, 0x69, 0x73, 0x74, 0x48, 0x6f, 0x74, 0x6c, 0x69,
	0x73, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x2e, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18,
	0x2e, 0x6d, 0x6f, 0x6e, 0x6f, 0x72, 0x61, 0x69, 0x6c, 0x2e, 0x76, 0x33, 0x2e, 0x48, 0x6f, 0x74,
	0x6c, 0x69, 0x73, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x12,
	0x26, 0x0a, 0x0f, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b,
	0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6e, 0x65, 0x78, 0x74, 0x50, 0x61,
	0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0xc4, 0x01, 0x0a, 0x19, 0x52, 0x65, 0x72, 0x61,
	0x6e, 0x6b, 0x48, 0x6f, 0x74, 0x6c, 0x69, 0x73, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x31, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x1d, 0xfa, 0x41, 0x17, 0x0a, 0x15, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x72,
	0x62, 0x75, 0x67, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x48, 0x6f, 0x74, 0x6c, 0x69, 0x73, 0x74, 0xe0,
	0x41, 0x02, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x46, 0x0a, 0x0d, 0x68, 0x6f, 0x74, 0x6c,
	0x69, 0x73, 0x74, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x42,
	0x21, 0xfa, 0x41, 0x1b, 0x0a, 0x19, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x72, 0x62, 0x75, 0x67, 0x2e,
	0x63, 0x6f, 0x6d, 0x2f, 0x48, 0x6f, 0x74, 0x6c, 0x69, 0x73, 0x74, 0x49, 0x74, 0x65, 0x6d, 0xe0,
	0x41, 0x02, 0x52, 0x0c, 0x68, 0x6f, 0x74, 0x6c, 0x69, 0x73, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x73,
	0x12, 0x2c, 0x0a, 0x0f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x0e,
	0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xad,
	0x01, 0x0a, 0x16, 0x41, 0x64, 0x64, 0x48, 0x6f, 0x74, 0x6c, 0x69, 0x73, 0x74, 0x49, 0x74, 0x65,
	0x6d, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x35, 0x0a, 0x06, 0x70, 0x61, 0x72,
	0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1d, 0xe0, 0x41, 0x02, 0xfa, 0x41,
	0x17, 0x0a, 0x15, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x72, 0x62, 0x75, 0x67, 0x2e, 0x63, 0x6f, 0x6d,
	0x2f, 0x48, 0x6f, 0x74, 0x6c, 0x69, 0x73, 0x74, 0x52, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74,
	0x12, 0x33, 0x0a, 0x06, 0x69, 0x73, 0x73, 0x75, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09,
	0x42, 0x1b, 0xe0, 0x41, 0x02, 0xfa, 0x41, 0x15, 0x0a, 0x13, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x72,
	0x62, 0x75, 0x67, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x49, 0x73, 0x73, 0x75, 0x65, 0x52, 0x06, 0x69,
	0x73, 0x73, 0x75, 0x65, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f,
	0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e,
	0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x87,
	0x01, 0x0a, 0x19, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x48, 0x6f, 0x74, 0x6c, 0x69, 0x73, 0x74,
	0x49, 0x74, 0x65, 0x6d, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x35, 0x0a, 0x06,
	0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1d, 0xe0, 0x41,
	0x02, 0xfa, 0x41, 0x17, 0x0a, 0x15, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x72, 0x62, 0x75, 0x67, 0x2e,
	0x63, 0x6f, 0x6d, 0x2f, 0x48, 0x6f, 0x74, 0x6c, 0x69, 0x73, 0x74, 0x52, 0x06, 0x70, 0x61, 0x72,
	0x65, 0x6e, 0x74, 0x12, 0x33, 0x0a, 0x06, 0x69, 0x73, 0x73, 0x75, 0x65, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x09, 0x42, 0x1b, 0xe0, 0x41, 0x02, 0xfa, 0x41, 0x15, 0x0a, 0x13, 0x61, 0x70, 0x69,
	0x2e, 0x63, 0x72, 0x62, 0x75, 0x67, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x49, 0x73, 0x73, 0x75, 0x65,
	0x52, 0x06, 0x69, 0x73, 0x73, 0x75, 0x65, 0x73, 0x22, 0x86, 0x01, 0x0a, 0x1b, 0x52, 0x65, 0x6d,
	0x6f, 0x76, 0x65, 0x48, 0x6f, 0x74, 0x6c, 0x69, 0x73, 0x74, 0x45, 0x64, 0x69, 0x74, 0x6f, 0x72,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x31, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1d, 0xe0, 0x41, 0x02, 0xfa, 0x41, 0x17, 0x0a, 0x15,
	0x61, 0x70, 0x69, 0x2e, 0x63, 0x72, 0x62, 0x75, 0x67, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x48, 0x6f,
	0x74, 0x6c, 0x69, 0x73, 0x74, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x34, 0x0a, 0x07, 0x65,
	0x64, 0x69, 0x74, 0x6f, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x42, 0x1a, 0xe0, 0x41,
	0x02, 0xfa, 0x41, 0x14, 0x0a, 0x12, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x72, 0x62, 0x75, 0x67, 0x2e,
	0x63, 0x6f, 0x6d, 0x2f, 0x55, 0x73, 0x65, 0x72, 0x52, 0x07, 0x65, 0x64, 0x69, 0x74, 0x6f, 0x72,
	0x73, 0x22, 0x4e, 0x0a, 0x1c, 0x47, 0x61, 0x74, 0x68, 0x65, 0x72, 0x48, 0x6f, 0x74, 0x6c, 0x69,
	0x73, 0x74, 0x73, 0x46, 0x6f, 0x72, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x2e, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x1a, 0xe0, 0x41, 0x02, 0xfa, 0x41, 0x14, 0x0a, 0x12, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x72, 0x62,
	0x75, 0x67, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x55, 0x73, 0x65, 0x72, 0x52, 0x04, 0x75, 0x73, 0x65,
	0x72, 0x22, 0x51, 0x0a, 0x1d, 0x47, 0x61, 0x74, 0x68, 0x65, 0x72, 0x48, 0x6f, 0x74, 0x6c, 0x69,
	0x73, 0x74, 0x73, 0x46, 0x6f, 0x72, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x30, 0x0a, 0x08, 0x68, 0x6f, 0x74, 0x6c, 0x69, 0x73, 0x74, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6d, 0x6f, 0x6e, 0x6f, 0x72, 0x61, 0x69, 0x6c, 0x2e,
	0x76, 0x33, 0x2e, 0x48, 0x6f, 0x74, 0x6c, 0x69, 0x73, 0x74, 0x52, 0x08, 0x68, 0x6f, 0x74, 0x6c,
	0x69, 0x73, 0x74, 0x73, 0x32, 0xe6, 0x06, 0x0a, 0x08, 0x48, 0x6f, 0x74, 0x6c, 0x69, 0x73, 0x74,
	0x73, 0x12, 0x4a, 0x0a, 0x0d, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x48, 0x6f, 0x74, 0x6c, 0x69,
	0x73, 0x74, 0x12, 0x21, 0x2e, 0x6d, 0x6f, 0x6e, 0x6f, 0x72, 0x61, 0x69, 0x6c, 0x2e, 0x76, 0x33,
	0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x48, 0x6f, 0x74, 0x6c, 0x69, 0x73, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x14, 0x2e, 0x6d, 0x6f, 0x6e, 0x6f, 0x72, 0x61, 0x69, 0x6c,
	0x2e, 0x76, 0x33, 0x2e, 0x48, 0x6f, 0x74, 0x6c, 0x69, 0x73, 0x74, 0x22, 0x00, 0x12, 0x44, 0x0a,
	0x0a, 0x47, 0x65, 0x74, 0x48, 0x6f, 0x74, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x1e, 0x2e, 0x6d, 0x6f,
	0x6e, 0x6f, 0x72, 0x61, 0x69, 0x6c, 0x2e, 0x76, 0x33, 0x2e, 0x47, 0x65, 0x74, 0x48, 0x6f, 0x74,
	0x6c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x14, 0x2e, 0x6d, 0x6f,
	0x6e, 0x6f, 0x72, 0x61, 0x69, 0x6c, 0x2e, 0x76, 0x33, 0x2e, 0x48, 0x6f, 0x74, 0x6c, 0x69, 0x73,
	0x74, 0x22, 0x00, 0x12, 0x4a, 0x0a, 0x0d, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x48, 0x6f, 0x74,
	0x6c, 0x69, 0x73, 0x74, 0x12, 0x21, 0x2e, 0x6d, 0x6f, 0x6e, 0x6f, 0x72, 0x61, 0x69, 0x6c, 0x2e,
	0x76, 0x33, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x48, 0x6f, 0x74, 0x6c, 0x69, 0x73, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x14, 0x2e, 0x6d, 0x6f, 0x6e, 0x6f, 0x72, 0x61,
	0x69, 0x6c, 0x2e, 0x76, 0x33, 0x2e, 0x48, 0x6f, 0x74, 0x6c, 0x69, 0x73, 0x74, 0x22, 0x00, 0x12,
	0x49, 0x0a, 0x0d, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x48, 0x6f, 0x74, 0x6c, 0x69, 0x73, 0x74,
	0x12, 0x1e, 0x2e, 0x6d, 0x6f, 0x6e, 0x6f, 0x72, 0x61, 0x69, 0x6c, 0x2e, 0x76, 0x33, 0x2e, 0x47,
	0x65, 0x74, 0x48, 0x6f, 0x74, 0x6c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x61, 0x0a, 0x10, 0x4c, 0x69,
	0x73, 0x74, 0x48, 0x6f, 0x74, 0x6c, 0x69, 0x73, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x12, 0x24,
	0x2e, 0x6d, 0x6f, 0x6e, 0x6f, 0x72, 0x61, 0x69, 0x6c, 0x2e, 0x76, 0x33, 0x2e, 0x4c, 0x69, 0x73,
	0x74, 0x48, 0x6f, 0x74, 0x6c, 0x69, 0x73, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x6d, 0x6f, 0x6e, 0x6f, 0x72, 0x61, 0x69, 0x6c, 0x2e,
	0x76, 0x33, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x48, 0x6f, 0x74, 0x6c, 0x69, 0x73, 0x74, 0x49, 0x74,
	0x65, 0x6d, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x56, 0x0a,
	0x12, 0x52, 0x65, 0x72, 0x61, 0x6e, 0x6b, 0x48, 0x6f, 0x74, 0x6c, 0x69, 0x73, 0x74, 0x49, 0x74,
	0x65, 0x6d, 0x73, 0x12, 0x26, 0x2e, 0x6d, 0x6f, 0x6e, 0x6f, 0x72, 0x61, 0x69, 0x6c, 0x2e, 0x76,
	0x33, 0x2e, 0x52, 0x65, 0x72, 0x61, 0x6e, 0x6b, 0x48, 0x6f, 0x74, 0x6c, 0x69, 0x73, 0x74, 0x49,
	0x74, 0x65, 0x6d, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x50, 0x0a, 0x0f, 0x41, 0x64, 0x64, 0x48, 0x6f, 0x74, 0x6c,
	0x69, 0x73, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x12, 0x23, 0x2e, 0x6d, 0x6f, 0x6e, 0x6f, 0x72,
	0x61, 0x69, 0x6c, 0x2e, 0x76, 0x33, 0x2e, 0x41, 0x64, 0x64, 0x48, 0x6f, 0x74, 0x6c, 0x69, 0x73,
	0x74, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x56, 0x0a, 0x12, 0x52, 0x65, 0x6d, 0x6f, 0x76,
	0x65, 0x48, 0x6f, 0x74, 0x6c, 0x69, 0x73, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x12, 0x26, 0x2e,
	0x6d, 0x6f, 0x6e, 0x6f, 0x72, 0x61, 0x69, 0x6c, 0x2e, 0x76, 0x33, 0x2e, 0x52, 0x65, 0x6d, 0x6f,
	0x76, 0x65, 0x48, 0x6f, 0x74, 0x6c, 0x69, 0x73, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12,
	0x5a, 0x0a, 0x14, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x48, 0x6f, 0x74, 0x6c, 0x69, 0x73, 0x74,
	0x45, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x73, 0x12, 0x28, 0x2e, 0x6d, 0x6f, 0x6e, 0x6f, 0x72, 0x61,
	0x69, 0x6c, 0x2e, 0x76, 0x33, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x48, 0x6f, 0x74, 0x6c,
	0x69, 0x73, 0x74, 0x45, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x70, 0x0a, 0x15, 0x47,
	0x61, 0x74, 0x68, 0x65, 0x72, 0x48, 0x6f, 0x74, 0x6c, 0x69, 0x73, 0x74, 0x73, 0x46, 0x6f, 0x72,
	0x55, 0x73, 0x65, 0x72, 0x12, 0x29, 0x2e, 0x6d, 0x6f, 0x6e, 0x6f, 0x72, 0x61, 0x69, 0x6c, 0x2e,
	0x76, 0x33, 0x2e, 0x47, 0x61, 0x74, 0x68, 0x65, 0x72, 0x48, 0x6f, 0x74, 0x6c, 0x69, 0x73, 0x74,
	0x73, 0x46, 0x6f, 0x72, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x2a, 0x2e, 0x6d, 0x6f, 0x6e, 0x6f, 0x72, 0x61, 0x69, 0x6c, 0x2e, 0x76, 0x33, 0x2e, 0x47, 0x61,
	0x74, 0x68, 0x65, 0x72, 0x48, 0x6f, 0x74, 0x6c, 0x69, 0x73, 0x74, 0x73, 0x46, 0x6f, 0x72, 0x55,
	0x73, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_api_v3_api_proto_hotlists_proto_rawDescOnce sync.Once
	file_api_v3_api_proto_hotlists_proto_rawDescData = file_api_v3_api_proto_hotlists_proto_rawDesc
)

func file_api_v3_api_proto_hotlists_proto_rawDescGZIP() []byte {
	file_api_v3_api_proto_hotlists_proto_rawDescOnce.Do(func() {
		file_api_v3_api_proto_hotlists_proto_rawDescData = protoimpl.X.CompressGZIP(file_api_v3_api_proto_hotlists_proto_rawDescData)
	})
	return file_api_v3_api_proto_hotlists_proto_rawDescData
}

var file_api_v3_api_proto_hotlists_proto_msgTypes = make([]protoimpl.MessageInfo, 11)
var file_api_v3_api_proto_hotlists_proto_goTypes = []interface{}{
	(*CreateHotlistRequest)(nil),          // 0: monorail.v3.CreateHotlistRequest
	(*GetHotlistRequest)(nil),             // 1: monorail.v3.GetHotlistRequest
	(*UpdateHotlistRequest)(nil),          // 2: monorail.v3.UpdateHotlistRequest
	(*ListHotlistItemsRequest)(nil),       // 3: monorail.v3.ListHotlistItemsRequest
	(*ListHotlistItemsResponse)(nil),      // 4: monorail.v3.ListHotlistItemsResponse
	(*RerankHotlistItemsRequest)(nil),     // 5: monorail.v3.RerankHotlistItemsRequest
	(*AddHotlistItemsRequest)(nil),        // 6: monorail.v3.AddHotlistItemsRequest
	(*RemoveHotlistItemsRequest)(nil),     // 7: monorail.v3.RemoveHotlistItemsRequest
	(*RemoveHotlistEditorsRequest)(nil),   // 8: monorail.v3.RemoveHotlistEditorsRequest
	(*GatherHotlistsForUserRequest)(nil),  // 9: monorail.v3.GatherHotlistsForUserRequest
	(*GatherHotlistsForUserResponse)(nil), // 10: monorail.v3.GatherHotlistsForUserResponse
	(*Hotlist)(nil),                       // 11: monorail.v3.Hotlist
	(*field_mask.FieldMask)(nil),          // 12: google.protobuf.FieldMask
	(*HotlistItem)(nil),                   // 13: monorail.v3.HotlistItem
	(*empty.Empty)(nil),                   // 14: google.protobuf.Empty
}
var file_api_v3_api_proto_hotlists_proto_depIdxs = []int32{
	11, // 0: monorail.v3.CreateHotlistRequest.hotlist:type_name -> monorail.v3.Hotlist
	11, // 1: monorail.v3.UpdateHotlistRequest.hotlist:type_name -> monorail.v3.Hotlist
	12, // 2: monorail.v3.UpdateHotlistRequest.update_mask:type_name -> google.protobuf.FieldMask
	13, // 3: monorail.v3.ListHotlistItemsResponse.items:type_name -> monorail.v3.HotlistItem
	11, // 4: monorail.v3.GatherHotlistsForUserResponse.hotlists:type_name -> monorail.v3.Hotlist
	0,  // 5: monorail.v3.Hotlists.CreateHotlist:input_type -> monorail.v3.CreateHotlistRequest
	1,  // 6: monorail.v3.Hotlists.GetHotlist:input_type -> monorail.v3.GetHotlistRequest
	2,  // 7: monorail.v3.Hotlists.UpdateHotlist:input_type -> monorail.v3.UpdateHotlistRequest
	1,  // 8: monorail.v3.Hotlists.DeleteHotlist:input_type -> monorail.v3.GetHotlistRequest
	3,  // 9: monorail.v3.Hotlists.ListHotlistItems:input_type -> monorail.v3.ListHotlistItemsRequest
	5,  // 10: monorail.v3.Hotlists.RerankHotlistItems:input_type -> monorail.v3.RerankHotlistItemsRequest
	6,  // 11: monorail.v3.Hotlists.AddHotlistItems:input_type -> monorail.v3.AddHotlistItemsRequest
	7,  // 12: monorail.v3.Hotlists.RemoveHotlistItems:input_type -> monorail.v3.RemoveHotlistItemsRequest
	8,  // 13: monorail.v3.Hotlists.RemoveHotlistEditors:input_type -> monorail.v3.RemoveHotlistEditorsRequest
	9,  // 14: monorail.v3.Hotlists.GatherHotlistsForUser:input_type -> monorail.v3.GatherHotlistsForUserRequest
	11, // 15: monorail.v3.Hotlists.CreateHotlist:output_type -> monorail.v3.Hotlist
	11, // 16: monorail.v3.Hotlists.GetHotlist:output_type -> monorail.v3.Hotlist
	11, // 17: monorail.v3.Hotlists.UpdateHotlist:output_type -> monorail.v3.Hotlist
	14, // 18: monorail.v3.Hotlists.DeleteHotlist:output_type -> google.protobuf.Empty
	4,  // 19: monorail.v3.Hotlists.ListHotlistItems:output_type -> monorail.v3.ListHotlistItemsResponse
	14, // 20: monorail.v3.Hotlists.RerankHotlistItems:output_type -> google.protobuf.Empty
	14, // 21: monorail.v3.Hotlists.AddHotlistItems:output_type -> google.protobuf.Empty
	14, // 22: monorail.v3.Hotlists.RemoveHotlistItems:output_type -> google.protobuf.Empty
	14, // 23: monorail.v3.Hotlists.RemoveHotlistEditors:output_type -> google.protobuf.Empty
	10, // 24: monorail.v3.Hotlists.GatherHotlistsForUser:output_type -> monorail.v3.GatherHotlistsForUserResponse
	15, // [15:25] is the sub-list for method output_type
	5,  // [5:15] is the sub-list for method input_type
	5,  // [5:5] is the sub-list for extension type_name
	5,  // [5:5] is the sub-list for extension extendee
	0,  // [0:5] is the sub-list for field type_name
}

func init() { file_api_v3_api_proto_hotlists_proto_init() }
func file_api_v3_api_proto_hotlists_proto_init() {
	if File_api_v3_api_proto_hotlists_proto != nil {
		return
	}
	file_api_v3_api_proto_feature_objects_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_api_v3_api_proto_hotlists_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateHotlistRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v3_api_proto_hotlists_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetHotlistRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v3_api_proto_hotlists_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateHotlistRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v3_api_proto_hotlists_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListHotlistItemsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v3_api_proto_hotlists_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListHotlistItemsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v3_api_proto_hotlists_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RerankHotlistItemsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v3_api_proto_hotlists_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddHotlistItemsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v3_api_proto_hotlists_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoveHotlistItemsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v3_api_proto_hotlists_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoveHotlistEditorsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v3_api_proto_hotlists_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GatherHotlistsForUserRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v3_api_proto_hotlists_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GatherHotlistsForUserResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_api_v3_api_proto_hotlists_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   11,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_api_v3_api_proto_hotlists_proto_goTypes,
		DependencyIndexes: file_api_v3_api_proto_hotlists_proto_depIdxs,
		MessageInfos:      file_api_v3_api_proto_hotlists_proto_msgTypes,
	}.Build()
	File_api_v3_api_proto_hotlists_proto = out.File
	file_api_v3_api_proto_hotlists_proto_rawDesc = nil
	file_api_v3_api_proto_hotlists_proto_goTypes = nil
	file_api_v3_api_proto_hotlists_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// HotlistsClient is the client API for Hotlists service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type HotlistsClient interface {
	// Creates a new hotlist.
	//
	// Raises:
	//   NOT_FOUND if some given hotlist editors do not exist.
	//   ALREADY_EXISTS if a hotlist with the same name owned by the user
	//   already exists.
	//   INVALID_ARGUMENT if a `hotlist.owner` is given.
	CreateHotlist(ctx context.Context, in *CreateHotlistRequest, opts ...grpc.CallOption) (*Hotlist, error)
	// Returns the requested Hotlist.
	//
	// Raises:
	//   NOT_FOUND if the requested hotlist is not found.
	//   PERMISSION_DENIED if the requester is not allowed to view the hotlist.
	//   INVALID_ARGUMENT if the given resource name is not valid.
	GetHotlist(ctx context.Context, in *GetHotlistRequest, opts ...grpc.CallOption) (*Hotlist, error)
	// Updates a hotlist.
	//
	// Raises:
	//   NOT_FOUND if the hotlist is not found.
	//   PERMISSION_DENIED if the requester is not allowed to update the hotlist.
	//   INVALID_ARGUMENT if required fields are missing.
	UpdateHotlist(ctx context.Context, in *UpdateHotlistRequest, opts ...grpc.CallOption) (*Hotlist, error)
	// Deletes a hotlist.
	//
	// Raises:
	//   NOT_FOUND if the hotlist is not found.
	//   PERMISSION_DENIED if the requester is not allowed to delete the hotlist.
	DeleteHotlist(ctx context.Context, in *GetHotlistRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	// Returns a list of all HotlistItems in the hotlist.
	//
	// Raises:
	//   NOT_FOUND if the parent hotlist is not found.
	//   PERMISSION_DENIED if the requester is not allowed to view the hotlist.
	//   INVALID_ARGUMENT if the page_token or given hotlist resource name is not
	//   valid.
	ListHotlistItems(ctx context.Context, in *ListHotlistItemsRequest, opts ...grpc.CallOption) (*ListHotlistItemsResponse, error)
	// Reranks a hotlist's items.
	//
	// Raises:
	//   NOT_FOUND if the hotlist or issues to rerank are not found.
	//   PERMISSION_DENIED if the requester is not allowed to rerank the hotlist
	//   or view issues they're trying to rerank.
	//   INVALID_ARGUMENT if the `target_position` is invalid or `hotlist_items`
	//   is empty or contains items not in the Hotlist.
	RerankHotlistItems(ctx context.Context, in *RerankHotlistItemsRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	// Adds new items associated with given issues to a hotlist.
	//
	// Raises:
	//   NOT_FOUND if the parent hotlist or issues are not found.
	//   PERMISSION_DENIED if the requester is not allowed to edit the hotlist or
	//   view issues they are trying to add.
	//   INVALID_ARGUMENT if the `target_position` is invalid or `hotlist_items`
	//   is empty or contains items not in the Hotlist.
	AddHotlistItems(ctx context.Context, in *AddHotlistItemsRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	// Removes items associated with given issues from a hotlist.
	//
	// Raises:
	//   NOT_FOUND if the parent hotlist or issues are not found.
	//   PERMISSION_DENIED if the requester is not allowed to edit the hotlist or
	//   view issues they are trying to remove.
	//   INVALID_ARGUMENT if the `target_position` is invalid or `hotlist_items`
	//   is empty or contains items not in the Hotlist.
	RemoveHotlistItems(ctx context.Context, in *RemoveHotlistItemsRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	// Removes editors assigned to a hotlist.
	//
	// Raises:
	//   NOT_FOUND if the hotlist is not found.
	//   PERMISSION_DENIED if the requester is not allowed to remove all specified
	//   editors from the hotlist.
	//   INVALID_ARGUMENT if any specified editors are not in the hotlist.
	RemoveHotlistEditors(ctx context.Context, in *RemoveHotlistEditorsRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	// Gathers all viewable hotlists that a user is a member of.
	//
	// Raises:
	//   NOT_FOUND if the user is not found.
	//   INVALID_ARGUMENT if the `user` is invalid.
	GatherHotlistsForUser(ctx context.Context, in *GatherHotlistsForUserRequest, opts ...grpc.CallOption) (*GatherHotlistsForUserResponse, error)
}
type hotlistsPRPCClient struct {
	client *prpc.Client
}

func NewHotlistsPRPCClient(client *prpc.Client) HotlistsClient {
	return &hotlistsPRPCClient{client}
}

func (c *hotlistsPRPCClient) CreateHotlist(ctx context.Context, in *CreateHotlistRequest, opts ...grpc.CallOption) (*Hotlist, error) {
	out := new(Hotlist)
	err := c.client.Call(ctx, "monorail.v3.Hotlists", "CreateHotlist", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hotlistsPRPCClient) GetHotlist(ctx context.Context, in *GetHotlistRequest, opts ...grpc.CallOption) (*Hotlist, error) {
	out := new(Hotlist)
	err := c.client.Call(ctx, "monorail.v3.Hotlists", "GetHotlist", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hotlistsPRPCClient) UpdateHotlist(ctx context.Context, in *UpdateHotlistRequest, opts ...grpc.CallOption) (*Hotlist, error) {
	out := new(Hotlist)
	err := c.client.Call(ctx, "monorail.v3.Hotlists", "UpdateHotlist", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hotlistsPRPCClient) DeleteHotlist(ctx context.Context, in *GetHotlistRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.client.Call(ctx, "monorail.v3.Hotlists", "DeleteHotlist", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hotlistsPRPCClient) ListHotlistItems(ctx context.Context, in *ListHotlistItemsRequest, opts ...grpc.CallOption) (*ListHotlistItemsResponse, error) {
	out := new(ListHotlistItemsResponse)
	err := c.client.Call(ctx, "monorail.v3.Hotlists", "ListHotlistItems", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hotlistsPRPCClient) RerankHotlistItems(ctx context.Context, in *RerankHotlistItemsRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.client.Call(ctx, "monorail.v3.Hotlists", "RerankHotlistItems", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hotlistsPRPCClient) AddHotlistItems(ctx context.Context, in *AddHotlistItemsRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.client.Call(ctx, "monorail.v3.Hotlists", "AddHotlistItems", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hotlistsPRPCClient) RemoveHotlistItems(ctx context.Context, in *RemoveHotlistItemsRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.client.Call(ctx, "monorail.v3.Hotlists", "RemoveHotlistItems", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hotlistsPRPCClient) RemoveHotlistEditors(ctx context.Context, in *RemoveHotlistEditorsRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.client.Call(ctx, "monorail.v3.Hotlists", "RemoveHotlistEditors", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hotlistsPRPCClient) GatherHotlistsForUser(ctx context.Context, in *GatherHotlistsForUserRequest, opts ...grpc.CallOption) (*GatherHotlistsForUserResponse, error) {
	out := new(GatherHotlistsForUserResponse)
	err := c.client.Call(ctx, "monorail.v3.Hotlists", "GatherHotlistsForUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

type hotlistsClient struct {
	cc grpc.ClientConnInterface
}

func NewHotlistsClient(cc grpc.ClientConnInterface) HotlistsClient {
	return &hotlistsClient{cc}
}

func (c *hotlistsClient) CreateHotlist(ctx context.Context, in *CreateHotlistRequest, opts ...grpc.CallOption) (*Hotlist, error) {
	out := new(Hotlist)
	err := c.cc.Invoke(ctx, "/monorail.v3.Hotlists/CreateHotlist", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hotlistsClient) GetHotlist(ctx context.Context, in *GetHotlistRequest, opts ...grpc.CallOption) (*Hotlist, error) {
	out := new(Hotlist)
	err := c.cc.Invoke(ctx, "/monorail.v3.Hotlists/GetHotlist", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hotlistsClient) UpdateHotlist(ctx context.Context, in *UpdateHotlistRequest, opts ...grpc.CallOption) (*Hotlist, error) {
	out := new(Hotlist)
	err := c.cc.Invoke(ctx, "/monorail.v3.Hotlists/UpdateHotlist", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hotlistsClient) DeleteHotlist(ctx context.Context, in *GetHotlistRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/monorail.v3.Hotlists/DeleteHotlist", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hotlistsClient) ListHotlistItems(ctx context.Context, in *ListHotlistItemsRequest, opts ...grpc.CallOption) (*ListHotlistItemsResponse, error) {
	out := new(ListHotlistItemsResponse)
	err := c.cc.Invoke(ctx, "/monorail.v3.Hotlists/ListHotlistItems", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hotlistsClient) RerankHotlistItems(ctx context.Context, in *RerankHotlistItemsRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/monorail.v3.Hotlists/RerankHotlistItems", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hotlistsClient) AddHotlistItems(ctx context.Context, in *AddHotlistItemsRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/monorail.v3.Hotlists/AddHotlistItems", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hotlistsClient) RemoveHotlistItems(ctx context.Context, in *RemoveHotlistItemsRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/monorail.v3.Hotlists/RemoveHotlistItems", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hotlistsClient) RemoveHotlistEditors(ctx context.Context, in *RemoveHotlistEditorsRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/monorail.v3.Hotlists/RemoveHotlistEditors", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hotlistsClient) GatherHotlistsForUser(ctx context.Context, in *GatherHotlistsForUserRequest, opts ...grpc.CallOption) (*GatherHotlistsForUserResponse, error) {
	out := new(GatherHotlistsForUserResponse)
	err := c.cc.Invoke(ctx, "/monorail.v3.Hotlists/GatherHotlistsForUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// HotlistsServer is the server API for Hotlists service.
type HotlistsServer interface {
	// Creates a new hotlist.
	//
	// Raises:
	//   NOT_FOUND if some given hotlist editors do not exist.
	//   ALREADY_EXISTS if a hotlist with the same name owned by the user
	//   already exists.
	//   INVALID_ARGUMENT if a `hotlist.owner` is given.
	CreateHotlist(context.Context, *CreateHotlistRequest) (*Hotlist, error)
	// Returns the requested Hotlist.
	//
	// Raises:
	//   NOT_FOUND if the requested hotlist is not found.
	//   PERMISSION_DENIED if the requester is not allowed to view the hotlist.
	//   INVALID_ARGUMENT if the given resource name is not valid.
	GetHotlist(context.Context, *GetHotlistRequest) (*Hotlist, error)
	// Updates a hotlist.
	//
	// Raises:
	//   NOT_FOUND if the hotlist is not found.
	//   PERMISSION_DENIED if the requester is not allowed to update the hotlist.
	//   INVALID_ARGUMENT if required fields are missing.
	UpdateHotlist(context.Context, *UpdateHotlistRequest) (*Hotlist, error)
	// Deletes a hotlist.
	//
	// Raises:
	//   NOT_FOUND if the hotlist is not found.
	//   PERMISSION_DENIED if the requester is not allowed to delete the hotlist.
	DeleteHotlist(context.Context, *GetHotlistRequest) (*empty.Empty, error)
	// Returns a list of all HotlistItems in the hotlist.
	//
	// Raises:
	//   NOT_FOUND if the parent hotlist is not found.
	//   PERMISSION_DENIED if the requester is not allowed to view the hotlist.
	//   INVALID_ARGUMENT if the page_token or given hotlist resource name is not
	//   valid.
	ListHotlistItems(context.Context, *ListHotlistItemsRequest) (*ListHotlistItemsResponse, error)
	// Reranks a hotlist's items.
	//
	// Raises:
	//   NOT_FOUND if the hotlist or issues to rerank are not found.
	//   PERMISSION_DENIED if the requester is not allowed to rerank the hotlist
	//   or view issues they're trying to rerank.
	//   INVALID_ARGUMENT if the `target_position` is invalid or `hotlist_items`
	//   is empty or contains items not in the Hotlist.
	RerankHotlistItems(context.Context, *RerankHotlistItemsRequest) (*empty.Empty, error)
	// Adds new items associated with given issues to a hotlist.
	//
	// Raises:
	//   NOT_FOUND if the parent hotlist or issues are not found.
	//   PERMISSION_DENIED if the requester is not allowed to edit the hotlist or
	//   view issues they are trying to add.
	//   INVALID_ARGUMENT if the `target_position` is invalid or `hotlist_items`
	//   is empty or contains items not in the Hotlist.
	AddHotlistItems(context.Context, *AddHotlistItemsRequest) (*empty.Empty, error)
	// Removes items associated with given issues from a hotlist.
	//
	// Raises:
	//   NOT_FOUND if the parent hotlist or issues are not found.
	//   PERMISSION_DENIED if the requester is not allowed to edit the hotlist or
	//   view issues they are trying to remove.
	//   INVALID_ARGUMENT if the `target_position` is invalid or `hotlist_items`
	//   is empty or contains items not in the Hotlist.
	RemoveHotlistItems(context.Context, *RemoveHotlistItemsRequest) (*empty.Empty, error)
	// Removes editors assigned to a hotlist.
	//
	// Raises:
	//   NOT_FOUND if the hotlist is not found.
	//   PERMISSION_DENIED if the requester is not allowed to remove all specified
	//   editors from the hotlist.
	//   INVALID_ARGUMENT if any specified editors are not in the hotlist.
	RemoveHotlistEditors(context.Context, *RemoveHotlistEditorsRequest) (*empty.Empty, error)
	// Gathers all viewable hotlists that a user is a member of.
	//
	// Raises:
	//   NOT_FOUND if the user is not found.
	//   INVALID_ARGUMENT if the `user` is invalid.
	GatherHotlistsForUser(context.Context, *GatherHotlistsForUserRequest) (*GatherHotlistsForUserResponse, error)
}

// UnimplementedHotlistsServer can be embedded to have forward compatible implementations.
type UnimplementedHotlistsServer struct {
}

func (*UnimplementedHotlistsServer) CreateHotlist(context.Context, *CreateHotlistRequest) (*Hotlist, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateHotlist not implemented")
}
func (*UnimplementedHotlistsServer) GetHotlist(context.Context, *GetHotlistRequest) (*Hotlist, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetHotlist not implemented")
}
func (*UnimplementedHotlistsServer) UpdateHotlist(context.Context, *UpdateHotlistRequest) (*Hotlist, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateHotlist not implemented")
}
func (*UnimplementedHotlistsServer) DeleteHotlist(context.Context, *GetHotlistRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteHotlist not implemented")
}
func (*UnimplementedHotlistsServer) ListHotlistItems(context.Context, *ListHotlistItemsRequest) (*ListHotlistItemsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListHotlistItems not implemented")
}
func (*UnimplementedHotlistsServer) RerankHotlistItems(context.Context, *RerankHotlistItemsRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RerankHotlistItems not implemented")
}
func (*UnimplementedHotlistsServer) AddHotlistItems(context.Context, *AddHotlistItemsRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddHotlistItems not implemented")
}
func (*UnimplementedHotlistsServer) RemoveHotlistItems(context.Context, *RemoveHotlistItemsRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveHotlistItems not implemented")
}
func (*UnimplementedHotlistsServer) RemoveHotlistEditors(context.Context, *RemoveHotlistEditorsRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveHotlistEditors not implemented")
}
func (*UnimplementedHotlistsServer) GatherHotlistsForUser(context.Context, *GatherHotlistsForUserRequest) (*GatherHotlistsForUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GatherHotlistsForUser not implemented")
}

func RegisterHotlistsServer(s prpc.Registrar, srv HotlistsServer) {
	s.RegisterService(&_Hotlists_serviceDesc, srv)
}

func _Hotlists_CreateHotlist_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateHotlistRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HotlistsServer).CreateHotlist(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/monorail.v3.Hotlists/CreateHotlist",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HotlistsServer).CreateHotlist(ctx, req.(*CreateHotlistRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Hotlists_GetHotlist_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetHotlistRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HotlistsServer).GetHotlist(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/monorail.v3.Hotlists/GetHotlist",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HotlistsServer).GetHotlist(ctx, req.(*GetHotlistRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Hotlists_UpdateHotlist_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateHotlistRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HotlistsServer).UpdateHotlist(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/monorail.v3.Hotlists/UpdateHotlist",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HotlistsServer).UpdateHotlist(ctx, req.(*UpdateHotlistRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Hotlists_DeleteHotlist_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetHotlistRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HotlistsServer).DeleteHotlist(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/monorail.v3.Hotlists/DeleteHotlist",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HotlistsServer).DeleteHotlist(ctx, req.(*GetHotlistRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Hotlists_ListHotlistItems_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListHotlistItemsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HotlistsServer).ListHotlistItems(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/monorail.v3.Hotlists/ListHotlistItems",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HotlistsServer).ListHotlistItems(ctx, req.(*ListHotlistItemsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Hotlists_RerankHotlistItems_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RerankHotlistItemsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HotlistsServer).RerankHotlistItems(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/monorail.v3.Hotlists/RerankHotlistItems",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HotlistsServer).RerankHotlistItems(ctx, req.(*RerankHotlistItemsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Hotlists_AddHotlistItems_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddHotlistItemsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HotlistsServer).AddHotlistItems(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/monorail.v3.Hotlists/AddHotlistItems",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HotlistsServer).AddHotlistItems(ctx, req.(*AddHotlistItemsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Hotlists_RemoveHotlistItems_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveHotlistItemsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HotlistsServer).RemoveHotlistItems(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/monorail.v3.Hotlists/RemoveHotlistItems",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HotlistsServer).RemoveHotlistItems(ctx, req.(*RemoveHotlistItemsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Hotlists_RemoveHotlistEditors_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveHotlistEditorsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HotlistsServer).RemoveHotlistEditors(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/monorail.v3.Hotlists/RemoveHotlistEditors",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HotlistsServer).RemoveHotlistEditors(ctx, req.(*RemoveHotlistEditorsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Hotlists_GatherHotlistsForUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GatherHotlistsForUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HotlistsServer).GatherHotlistsForUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/monorail.v3.Hotlists/GatherHotlistsForUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HotlistsServer).GatherHotlistsForUser(ctx, req.(*GatherHotlistsForUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Hotlists_serviceDesc = grpc.ServiceDesc{
	ServiceName: "monorail.v3.Hotlists",
	HandlerType: (*HotlistsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateHotlist",
			Handler:    _Hotlists_CreateHotlist_Handler,
		},
		{
			MethodName: "GetHotlist",
			Handler:    _Hotlists_GetHotlist_Handler,
		},
		{
			MethodName: "UpdateHotlist",
			Handler:    _Hotlists_UpdateHotlist_Handler,
		},
		{
			MethodName: "DeleteHotlist",
			Handler:    _Hotlists_DeleteHotlist_Handler,
		},
		{
			MethodName: "ListHotlistItems",
			Handler:    _Hotlists_ListHotlistItems_Handler,
		},
		{
			MethodName: "RerankHotlistItems",
			Handler:    _Hotlists_RerankHotlistItems_Handler,
		},
		{
			MethodName: "AddHotlistItems",
			Handler:    _Hotlists_AddHotlistItems_Handler,
		},
		{
			MethodName: "RemoveHotlistItems",
			Handler:    _Hotlists_RemoveHotlistItems_Handler,
		},
		{
			MethodName: "RemoveHotlistEditors",
			Handler:    _Hotlists_RemoveHotlistEditors_Handler,
		},
		{
			MethodName: "GatherHotlistsForUser",
			Handler:    _Hotlists_GatherHotlistsForUser_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/v3/api_proto/hotlists.proto",
}
