// Copyright 2020 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file or at
// https://developers.google.com/open-source/licenses/bsd

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.24.0-devel
// 	protoc        v3.6.1
// source: api/v3/api_proto/issues.proto

package monorail_v3

import prpc "go.chromium.org/luci/grpc/prpc"

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	field_mask "google.golang.org/genproto/protobuf/field_mask"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

// The type of notification a change should trigger.
// See monorail/doc/userguide/email.md
// Next available tag: 2
type NotifyType int32

const (
	// The default value. This value is unused.
	NotifyType_NOTIFY_TYPE_UNSPECIFIED NotifyType = 0
	// An email notification should be sent.
	NotifyType_EMAIL NotifyType = 1
	// No notifcation should be triggered at all.
	NotifyType_NO_NOTIFICATION NotifyType = 2
)

// Enum value maps for NotifyType.
var (
	NotifyType_name = map[int32]string{
		0: "NOTIFY_TYPE_UNSPECIFIED",
		1: "EMAIL",
		2: "NO_NOTIFICATION",
	}
	NotifyType_value = map[string]int32{
		"NOTIFY_TYPE_UNSPECIFIED": 0,
		"EMAIL":                   1,
		"NO_NOTIFICATION":         2,
	}
)

func (x NotifyType) Enum() *NotifyType {
	p := new(NotifyType)
	*p = x
	return p
}

func (x NotifyType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (NotifyType) Descriptor() protoreflect.EnumDescriptor {
	return file_api_v3_api_proto_issues_proto_enumTypes[0].Descriptor()
}

func (NotifyType) Type() protoreflect.EnumType {
	return &file_api_v3_api_proto_issues_proto_enumTypes[0]
}

func (x NotifyType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use NotifyType.Descriptor instead.
func (NotifyType) EnumDescriptor() ([]byte, []int) {
	return file_api_v3_api_proto_issues_proto_rawDescGZIP(), []int{0}
}

// The request message for Issues.GetIssue.
// Next available tag: 2
type GetIssueRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The name of the issue to request.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *GetIssueRequest) Reset() {
	*x = GetIssueRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v3_api_proto_issues_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetIssueRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetIssueRequest) ProtoMessage() {}

func (x *GetIssueRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_v3_api_proto_issues_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetIssueRequest.ProtoReflect.Descriptor instead.
func (*GetIssueRequest) Descriptor() ([]byte, []int) {
	return file_api_v3_api_proto_issues_proto_rawDescGZIP(), []int{0}
}

func (x *GetIssueRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

// The request message for Issues.SearchIssues.
// Next available tag: 6
type SearchIssuesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The names of Projects in which to search issues.
	// TODO(crbug/monorail/7143): `projects` must hold exactly one project
	// for now. We will add cross-project search later.
	Projects []string `protobuf:"bytes,1,rep,name=projects,proto3" json:"projects,omitempty"`
	// The query string can contain any number of free text and
	// field search expressions.
	// Please see https://bugs.chromium.org/p/chromium/issues/searchtips for more
	// details of how the query string works.
	Query string `protobuf:"bytes,2,opt,name=query,proto3" json:"query,omitempty"`
	// The maximum number of items to return. The service may return fewer than
	// this value.
	// If unspecified, at most 1000 items will be returned.
	// The maximum value is 1000; values above 1000 will be coerced to 1000.
	PageSize int32 `protobuf:"varint,3,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// A page token, received from a previous `SearchIssues` call.
	// Provide this to retrieve the subsequent page.
	//
	// When paginating, all other parameters provided to `SearchIssues` must match
	// the call that provided the page token.
	PageToken string `protobuf:"bytes,4,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	// The string of comma separated field names used to order the items.
	// Adding '-' before a field, reverses the sort order.
	// E.g. 'stars,-status' sorts the items by number of stars, high to low,
	// then by status, low to high.
	OrderBy string `protobuf:"bytes,5,opt,name=order_by,json=orderBy,proto3" json:"order_by,omitempty"`
}

func (x *SearchIssuesRequest) Reset() {
	*x = SearchIssuesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v3_api_proto_issues_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchIssuesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchIssuesRequest) ProtoMessage() {}

func (x *SearchIssuesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_v3_api_proto_issues_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchIssuesRequest.ProtoReflect.Descriptor instead.
func (*SearchIssuesRequest) Descriptor() ([]byte, []int) {
	return file_api_v3_api_proto_issues_proto_rawDescGZIP(), []int{1}
}

func (x *SearchIssuesRequest) GetProjects() []string {
	if x != nil {
		return x.Projects
	}
	return nil
}

func (x *SearchIssuesRequest) GetQuery() string {
	if x != nil {
		return x.Query
	}
	return ""
}

func (x *SearchIssuesRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *SearchIssuesRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

func (x *SearchIssuesRequest) GetOrderBy() string {
	if x != nil {
		return x.OrderBy
	}
	return ""
}

// The response message for Issues.SearchIssues.
// Next available tag: 3
type SearchIssuesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Issues matching the given request.
	Issues []*Issue `protobuf:"bytes,1,rep,name=issues,proto3" json:"issues,omitempty"`
	// A token, which can be sent as `page_token` to retrieve the next page.
	// If this field is omitted, there are no subsequent pages.
	NextPageToken string `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
}

func (x *SearchIssuesResponse) Reset() {
	*x = SearchIssuesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v3_api_proto_issues_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchIssuesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchIssuesResponse) ProtoMessage() {}

func (x *SearchIssuesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_v3_api_proto_issues_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchIssuesResponse.ProtoReflect.Descriptor instead.
func (*SearchIssuesResponse) Descriptor() ([]byte, []int) {
	return file_api_v3_api_proto_issues_proto_rawDescGZIP(), []int{2}
}

func (x *SearchIssuesResponse) GetIssues() []*Issue {
	if x != nil {
		return x.Issues
	}
	return nil
}

func (x *SearchIssuesResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

// The request message for Issues.ListComments.
// Next available tag: 4
type ListCommentsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The name of the issue for which to list comments.
	Parent string `protobuf:"bytes,1,opt,name=parent,proto3" json:"parent,omitempty"`
	// The maximum number of items to return. The service may return fewer than
	// this value.
	// If unspecified, at most 1000 items will be returned.
	// The maximum value is 1000; values above 1000 will be coerced to 1000.
	PageSize int32 `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// A page token, received from a previous `ListComments` call.
	// Provide this to retrieve the subsequent page.
	//
	// When paginating, all other parameters provided to `ListComments` must
	// match the call that provided the page token.
	PageToken string `protobuf:"bytes,3,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
}

func (x *ListCommentsRequest) Reset() {
	*x = ListCommentsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v3_api_proto_issues_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListCommentsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListCommentsRequest) ProtoMessage() {}

func (x *ListCommentsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_v3_api_proto_issues_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListCommentsRequest.ProtoReflect.Descriptor instead.
func (*ListCommentsRequest) Descriptor() ([]byte, []int) {
	return file_api_v3_api_proto_issues_proto_rawDescGZIP(), []int{3}
}

func (x *ListCommentsRequest) GetParent() string {
	if x != nil {
		return x.Parent
	}
	return ""
}

func (x *ListCommentsRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListCommentsRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

// The response message for Issues.ListComments
// Next available tag: 3
type ListCommentsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The comments from the specified issue.
	Comments []*Comment `protobuf:"bytes,1,rep,name=comments,proto3" json:"comments,omitempty"`
	// A token, which can be sent as `page_token` to retrieve the next page.
	// If this field is omitted, there are no subsequent pages.
	NextPageToken string `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
}

func (x *ListCommentsResponse) Reset() {
	*x = ListCommentsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v3_api_proto_issues_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListCommentsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListCommentsResponse) ProtoMessage() {}

func (x *ListCommentsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_v3_api_proto_issues_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListCommentsResponse.ProtoReflect.Descriptor instead.
func (*ListCommentsResponse) Descriptor() ([]byte, []int) {
	return file_api_v3_api_proto_issues_proto_rawDescGZIP(), []int{4}
}

func (x *ListCommentsResponse) GetComments() []*Comment {
	if x != nil {
		return x.Comments
	}
	return nil
}

func (x *ListCommentsResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

// Holds changes to one issue, used in ModifyIssuesRequest.
// Next available tag: 9
type IssueDelta struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The issue's `name` field is used to identify the issue to be
	// updated. `issue.name` must always be filled.
	Issue *Issue `protobuf:"bytes,1,opt,name=issue,proto3" json:"issue,omitempty"`
	// The list of fields in `issue` to be updated.
	// Repeated fields will be appended to.
	UpdateMask *field_mask.FieldMask `protobuf:"bytes,2,opt,name=update_mask,json=updateMask,proto3" json:"update_mask,omitempty"`
	// Cc's to remove.
	CcsRemove []string `protobuf:"bytes,3,rep,name=ccs_remove,json=ccsRemove,proto3" json:"ccs_remove,omitempty"`
	// Blocked_on issues to remove.
	BlockedOnIssuesRemove []string `protobuf:"bytes,4,rep,name=blocked_on_issues_remove,json=blockedOnIssuesRemove,proto3" json:"blocked_on_issues_remove,omitempty"`
	// Blocking issues to remove.
	BlockingIssuesRemove []string `protobuf:"bytes,5,rep,name=blocking_issues_remove,json=blockingIssuesRemove,proto3" json:"blocking_issues_remove,omitempty"`
	// Components to remove.
	ComponentsRemove []string `protobuf:"bytes,6,rep,name=components_remove,json=componentsRemove,proto3" json:"components_remove,omitempty"`
	// Labels to remove.
	LabelsRemove []string `protobuf:"bytes,7,rep,name=labels_remove,json=labelsRemove,proto3" json:"labels_remove,omitempty"`
	// FieldValues to remove.
	FieldValsRemove []*FieldValue `protobuf:"bytes,8,rep,name=field_vals_remove,json=fieldValsRemove,proto3" json:"field_vals_remove,omitempty"`
}

func (x *IssueDelta) Reset() {
	*x = IssueDelta{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v3_api_proto_issues_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IssueDelta) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IssueDelta) ProtoMessage() {}

func (x *IssueDelta) ProtoReflect() protoreflect.Message {
	mi := &file_api_v3_api_proto_issues_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IssueDelta.ProtoReflect.Descriptor instead.
func (*IssueDelta) Descriptor() ([]byte, []int) {
	return file_api_v3_api_proto_issues_proto_rawDescGZIP(), []int{5}
}

func (x *IssueDelta) GetIssue() *Issue {
	if x != nil {
		return x.Issue
	}
	return nil
}

func (x *IssueDelta) GetUpdateMask() *field_mask.FieldMask {
	if x != nil {
		return x.UpdateMask
	}
	return nil
}

func (x *IssueDelta) GetCcsRemove() []string {
	if x != nil {
		return x.CcsRemove
	}
	return nil
}

func (x *IssueDelta) GetBlockedOnIssuesRemove() []string {
	if x != nil {
		return x.BlockedOnIssuesRemove
	}
	return nil
}

func (x *IssueDelta) GetBlockingIssuesRemove() []string {
	if x != nil {
		return x.BlockingIssuesRemove
	}
	return nil
}

func (x *IssueDelta) GetComponentsRemove() []string {
	if x != nil {
		return x.ComponentsRemove
	}
	return nil
}

func (x *IssueDelta) GetLabelsRemove() []string {
	if x != nil {
		return x.LabelsRemove
	}
	return nil
}

func (x *IssueDelta) GetFieldValsRemove() []*FieldValue {
	if x != nil {
		return x.FieldValsRemove
	}
	return nil
}

// The request message for Issues.ModifyIssues.
// Next available tag: 4
type ModifyIssuesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The issue changes to make.
	Deltas []*IssueDelta `protobuf:"bytes,1,rep,name=deltas,proto3" json:"deltas,omitempty"`
	// The type of notification the modifications should trigger.
	NotifyType NotifyType `protobuf:"varint,2,opt,name=notify_type,json=notifyType,proto3,enum=monorail.v3.NotifyType" json:"notify_type,omitempty"`
	// The comment text that should be added to each issue in delta.
	CommentContent string `protobuf:"bytes,3,opt,name=comment_content,json=commentContent,proto3" json:"comment_content,omitempty"`
}

func (x *ModifyIssuesRequest) Reset() {
	*x = ModifyIssuesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v3_api_proto_issues_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ModifyIssuesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ModifyIssuesRequest) ProtoMessage() {}

func (x *ModifyIssuesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_v3_api_proto_issues_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ModifyIssuesRequest.ProtoReflect.Descriptor instead.
func (*ModifyIssuesRequest) Descriptor() ([]byte, []int) {
	return file_api_v3_api_proto_issues_proto_rawDescGZIP(), []int{6}
}

func (x *ModifyIssuesRequest) GetDeltas() []*IssueDelta {
	if x != nil {
		return x.Deltas
	}
	return nil
}

func (x *ModifyIssuesRequest) GetNotifyType() NotifyType {
	if x != nil {
		return x.NotifyType
	}
	return NotifyType_NOTIFY_TYPE_UNSPECIFIED
}

func (x *ModifyIssuesRequest) GetCommentContent() string {
	if x != nil {
		return x.CommentContent
	}
	return ""
}

// The response message for Issues.ModifyIssues.
// Next available tag: 2
type ModifyIssuesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The updated issues.
	Issues []*Issue `protobuf:"bytes,1,rep,name=issues,proto3" json:"issues,omitempty"`
}

func (x *ModifyIssuesResponse) Reset() {
	*x = ModifyIssuesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v3_api_proto_issues_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ModifyIssuesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ModifyIssuesResponse) ProtoMessage() {}

func (x *ModifyIssuesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_v3_api_proto_issues_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ModifyIssuesResponse.ProtoReflect.Descriptor instead.
func (*ModifyIssuesResponse) Descriptor() ([]byte, []int) {
	return file_api_v3_api_proto_issues_proto_rawDescGZIP(), []int{7}
}

func (x *ModifyIssuesResponse) GetIssues() []*Issue {
	if x != nil {
		return x.Issues
	}
	return nil
}

var File_api_v3_api_proto_issues_proto protoreflect.FileDescriptor

var file_api_v3_api_proto_issues_proto_rawDesc = []byte{
	0x0a, 0x1d, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x33, 0x2f, 0x61, 0x70, 0x69, 0x5f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2f, 0x69, 0x73, 0x73, 0x75, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x0b, 0x6d, 0x6f, 0x6e, 0x6f, 0x72, 0x61, 0x69, 0x6c, 0x2e, 0x76, 0x33, 0x1a, 0x20, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x66, 0x69,
	0x65, 0x6c, 0x64, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x29,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2c, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x62, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f,
	0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x26, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x5f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x24, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x33, 0x2f, 0x61, 0x70, 0x69, 0x5f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2f, 0x69, 0x73, 0x73, 0x75, 0x65, 0x5f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x42, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x49, 0x73, 0x73, 0x75,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2f, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1b, 0xfa, 0x41, 0x15, 0x0a, 0x13, 0x61, 0x70, 0x69,
	0x2e, 0x63, 0x72, 0x62, 0x75, 0x67, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x49, 0x73, 0x73, 0x75, 0x65,
	0xe0, 0x41, 0x02, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0xbd, 0x01, 0x0a, 0x13, 0x53, 0x65,
	0x61, 0x72, 0x63, 0x68, 0x49, 0x73, 0x73, 0x75, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x39, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x09, 0x42, 0x1d, 0xfa, 0x41, 0x17, 0x0a, 0x15, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x72,
	0x62, 0x75, 0x67, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0xe0,
	0x41, 0x02, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x12, 0x14, 0x0a, 0x05,
	0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x71, 0x75, 0x65,
	0x72, 0x79, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12,
	0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x19,
	0x0a, 0x08, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x62, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x79, 0x22, 0x6a, 0x0a, 0x14, 0x53, 0x65, 0x61,
	0x72, 0x63, 0x68, 0x49, 0x73, 0x73, 0x75, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x2a, 0x0a, 0x06, 0x69, 0x73, 0x73, 0x75, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x12, 0x2e, 0x6d, 0x6f, 0x6e, 0x6f, 0x72, 0x61, 0x69, 0x6c, 0x2e, 0x76, 0x33, 0x2e,
	0x49, 0x73, 0x73, 0x75, 0x65, 0x52, 0x06, 0x69, 0x73, 0x73, 0x75, 0x65, 0x73, 0x12, 0x26, 0x0a,
	0x0f, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6e, 0x65, 0x78, 0x74, 0x50, 0x61, 0x67, 0x65,
	0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x86, 0x01, 0x0a, 0x13, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f,
	0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x33, 0x0a,
	0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1b, 0xfa,
	0x41, 0x15, 0x0a, 0x13, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x72, 0x62, 0x75, 0x67, 0x2e, 0x63, 0x6f,
	0x6d, 0x2f, 0x49, 0x73, 0x73, 0x75, 0x65, 0xe0, 0x41, 0x02, 0x52, 0x06, 0x70, 0x61, 0x72, 0x65,
	0x6e, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12,
	0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x70,
	0x0a, 0x14, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x30, 0x0a, 0x08, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e,
	0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6d, 0x6f, 0x6e, 0x6f, 0x72,
	0x61, 0x69, 0x6c, 0x2e, 0x76, 0x33, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x08,
	0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x6e, 0x65, 0x78, 0x74,
	0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0d, 0x6e, 0x65, 0x78, 0x74, 0x50, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e,
	0x22, 0xa3, 0x04, 0x0a, 0x0a, 0x49, 0x73, 0x73, 0x75, 0x65, 0x44, 0x65, 0x6c, 0x74, 0x61, 0x12,
	0x45, 0x0a, 0x05, 0x69, 0x73, 0x73, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12,
	0x2e, 0x6d, 0x6f, 0x6e, 0x6f, 0x72, 0x61, 0x69, 0x6c, 0x2e, 0x76, 0x33, 0x2e, 0x49, 0x73, 0x73,
	0x75, 0x65, 0x42, 0x1b, 0xfa, 0x41, 0x15, 0x0a, 0x13, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x72, 0x62,
	0x75, 0x67, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x49, 0x73, 0x73, 0x75, 0x65, 0xe0, 0x41, 0x02, 0x52,
	0x05, 0x69, 0x73, 0x73, 0x75, 0x65, 0x12, 0x3b, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x69,
	0x65, 0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d,
	0x61, 0x73, 0x6b, 0x12, 0x36, 0x0a, 0x0a, 0x63, 0x63, 0x73, 0x5f, 0x72, 0x65, 0x6d, 0x6f, 0x76,
	0x65, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x42, 0x17, 0xfa, 0x41, 0x14, 0x0a, 0x12, 0x61, 0x70,
	0x69, 0x2e, 0x63, 0x72, 0x62, 0x75, 0x67, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x55, 0x73, 0x65, 0x72,
	0x52, 0x09, 0x63, 0x63, 0x73, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x12, 0x51, 0x0a, 0x18, 0x62,
	0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x5f, 0x6f, 0x6e, 0x5f, 0x69, 0x73, 0x73, 0x75, 0x65, 0x73,
	0x5f, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x42, 0x18, 0xfa,
	0x41, 0x15, 0x0a, 0x13, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x72, 0x62, 0x75, 0x67, 0x2e, 0x63, 0x6f,
	0x6d, 0x2f, 0x49, 0x73, 0x73, 0x75, 0x65, 0x52, 0x15, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64,
	0x4f, 0x6e, 0x49, 0x73, 0x73, 0x75, 0x65, 0x73, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x12, 0x4e,
	0x0a, 0x16, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x73, 0x73, 0x75, 0x65,
	0x73, 0x5f, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x42, 0x18,
	0xfa, 0x41, 0x15, 0x0a, 0x13, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x72, 0x62, 0x75, 0x67, 0x2e, 0x63,
	0x6f, 0x6d, 0x2f, 0x49, 0x73, 0x73, 0x75, 0x65, 0x52, 0x14, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x69,
	0x6e, 0x67, 0x49, 0x73, 0x73, 0x75, 0x65, 0x73, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x12, 0x4c,
	0x0a, 0x11, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x72, 0x65, 0x6d,
	0x6f, 0x76, 0x65, 0x18, 0x06, 0x20, 0x03, 0x28, 0x09, 0x42, 0x1f, 0xfa, 0x41, 0x1c, 0x0a, 0x1a,
	0x61, 0x70, 0x69, 0x2e, 0x63, 0x72, 0x62, 0x75, 0x67, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x43, 0x6f,
	0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x44, 0x65, 0x66, 0x52, 0x10, 0x63, 0x6f, 0x6d, 0x70,
	0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x12, 0x23, 0x0a, 0x0d,
	0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x5f, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x18, 0x07, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x0c, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x52, 0x65, 0x6d, 0x6f, 0x76,
	0x65, 0x12, 0x43, 0x0a, 0x11, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x76, 0x61, 0x6c, 0x73, 0x5f,
	0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6d,
	0x6f, 0x6e, 0x6f, 0x72, 0x61, 0x69, 0x6c, 0x2e, 0x76, 0x33, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x56, 0x61, 0x6c, 0x73,
	0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x22, 0xae, 0x01, 0x0a, 0x13, 0x4d, 0x6f, 0x64, 0x69, 0x66,
	0x79, 0x49, 0x73, 0x73, 0x75, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x34,
	0x0a, 0x06, 0x64, 0x65, 0x6c, 0x74, 0x61, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17,
	0x2e, 0x6d, 0x6f, 0x6e, 0x6f, 0x72, 0x61, 0x69, 0x6c, 0x2e, 0x76, 0x33, 0x2e, 0x49, 0x73, 0x73,
	0x75, 0x65, 0x44, 0x65, 0x6c, 0x74, 0x61, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x06, 0x64, 0x65,
	0x6c, 0x74, 0x61, 0x73, 0x12, 0x38, 0x0a, 0x0b, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x6d, 0x6f, 0x6e, 0x6f,
	0x72, 0x61, 0x69, 0x6c, 0x2e, 0x76, 0x33, 0x2e, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x0a, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x27,
	0x0a, 0x0f, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74,
	0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x22, 0x42, 0x0a, 0x14, 0x4d, 0x6f, 0x64, 0x69, 0x66,
	0x79, 0x49, 0x73, 0x73, 0x75, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x2a, 0x0a, 0x06, 0x69, 0x73, 0x73, 0x75, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x12, 0x2e, 0x6d, 0x6f, 0x6e, 0x6f, 0x72, 0x61, 0x69, 0x6c, 0x2e, 0x76, 0x33, 0x2e, 0x49, 0x73,
	0x73, 0x75, 0x65, 0x52, 0x06, 0x69, 0x73, 0x73, 0x75, 0x65, 0x73, 0x2a, 0x49, 0x0a, 0x0a, 0x4e,
	0x6f, 0x74, 0x69, 0x66, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1b, 0x0a, 0x17, 0x4e, 0x4f, 0x54,
	0x49, 0x46, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49,
	0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x45, 0x4d, 0x41, 0x49, 0x4c, 0x10,
	0x01, 0x12, 0x13, 0x0a, 0x0f, 0x4e, 0x4f, 0x5f, 0x4e, 0x4f, 0x54, 0x49, 0x46, 0x49, 0x43, 0x41,
	0x54, 0x49, 0x4f, 0x4e, 0x10, 0x02, 0x32, 0xcd, 0x02, 0x0a, 0x06, 0x49, 0x73, 0x73, 0x75, 0x65,
	0x73, 0x12, 0x3e, 0x0a, 0x08, 0x47, 0x65, 0x74, 0x49, 0x73, 0x73, 0x75, 0x65, 0x12, 0x1c, 0x2e,
	0x6d, 0x6f, 0x6e, 0x6f, 0x72, 0x61, 0x69, 0x6c, 0x2e, 0x76, 0x33, 0x2e, 0x47, 0x65, 0x74, 0x49,
	0x73, 0x73, 0x75, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x12, 0x2e, 0x6d, 0x6f,
	0x6e, 0x6f, 0x72, 0x61, 0x69, 0x6c, 0x2e, 0x76, 0x33, 0x2e, 0x49, 0x73, 0x73, 0x75, 0x65, 0x22,
	0x00, 0x12, 0x55, 0x0a, 0x0c, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x49, 0x73, 0x73, 0x75, 0x65,
	0x73, 0x12, 0x20, 0x2e, 0x6d, 0x6f, 0x6e, 0x6f, 0x72, 0x61, 0x69, 0x6c, 0x2e, 0x76, 0x33, 0x2e,
	0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x49, 0x73, 0x73, 0x75, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x6d, 0x6f, 0x6e, 0x6f, 0x72, 0x61, 0x69, 0x6c, 0x2e, 0x76,
	0x33, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x49, 0x73, 0x73, 0x75, 0x65, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x55, 0x0a, 0x0c, 0x4c, 0x69, 0x73, 0x74,
	0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x20, 0x2e, 0x6d, 0x6f, 0x6e, 0x6f, 0x72,
	0x61, 0x69, 0x6c, 0x2e, 0x76, 0x33, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x65,
	0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x6d, 0x6f, 0x6e,
	0x6f, 0x72, 0x61, 0x69, 0x6c, 0x2e, 0x76, 0x33, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x6d,
	0x6d, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12,
	0x55, 0x0a, 0x0c, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x49, 0x73, 0x73, 0x75, 0x65, 0x73, 0x12,
	0x20, 0x2e, 0x6d, 0x6f, 0x6e, 0x6f, 0x72, 0x61, 0x69, 0x6c, 0x2e, 0x76, 0x33, 0x2e, 0x4d, 0x6f,
	0x64, 0x69, 0x66, 0x79, 0x49, 0x73, 0x73, 0x75, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x21, 0x2e, 0x6d, 0x6f, 0x6e, 0x6f, 0x72, 0x61, 0x69, 0x6c, 0x2e, 0x76, 0x33, 0x2e,
	0x4d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x49, 0x73, 0x73, 0x75, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_api_v3_api_proto_issues_proto_rawDescOnce sync.Once
	file_api_v3_api_proto_issues_proto_rawDescData = file_api_v3_api_proto_issues_proto_rawDesc
)

func file_api_v3_api_proto_issues_proto_rawDescGZIP() []byte {
	file_api_v3_api_proto_issues_proto_rawDescOnce.Do(func() {
		file_api_v3_api_proto_issues_proto_rawDescData = protoimpl.X.CompressGZIP(file_api_v3_api_proto_issues_proto_rawDescData)
	})
	return file_api_v3_api_proto_issues_proto_rawDescData
}

var file_api_v3_api_proto_issues_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_api_v3_api_proto_issues_proto_msgTypes = make([]protoimpl.MessageInfo, 8)
var file_api_v3_api_proto_issues_proto_goTypes = []interface{}{
	(NotifyType)(0),              // 0: monorail.v3.NotifyType
	(*GetIssueRequest)(nil),      // 1: monorail.v3.GetIssueRequest
	(*SearchIssuesRequest)(nil),  // 2: monorail.v3.SearchIssuesRequest
	(*SearchIssuesResponse)(nil), // 3: monorail.v3.SearchIssuesResponse
	(*ListCommentsRequest)(nil),  // 4: monorail.v3.ListCommentsRequest
	(*ListCommentsResponse)(nil), // 5: monorail.v3.ListCommentsResponse
	(*IssueDelta)(nil),           // 6: monorail.v3.IssueDelta
	(*ModifyIssuesRequest)(nil),  // 7: monorail.v3.ModifyIssuesRequest
	(*ModifyIssuesResponse)(nil), // 8: monorail.v3.ModifyIssuesResponse
	(*Issue)(nil),                // 9: monorail.v3.Issue
	(*Comment)(nil),              // 10: monorail.v3.Comment
	(*field_mask.FieldMask)(nil), // 11: google.protobuf.FieldMask
	(*FieldValue)(nil),           // 12: monorail.v3.FieldValue
}
var file_api_v3_api_proto_issues_proto_depIdxs = []int32{
	9,  // 0: monorail.v3.SearchIssuesResponse.issues:type_name -> monorail.v3.Issue
	10, // 1: monorail.v3.ListCommentsResponse.comments:type_name -> monorail.v3.Comment
	9,  // 2: monorail.v3.IssueDelta.issue:type_name -> monorail.v3.Issue
	11, // 3: monorail.v3.IssueDelta.update_mask:type_name -> google.protobuf.FieldMask
	12, // 4: monorail.v3.IssueDelta.field_vals_remove:type_name -> monorail.v3.FieldValue
	6,  // 5: monorail.v3.ModifyIssuesRequest.deltas:type_name -> monorail.v3.IssueDelta
	0,  // 6: monorail.v3.ModifyIssuesRequest.notify_type:type_name -> monorail.v3.NotifyType
	9,  // 7: monorail.v3.ModifyIssuesResponse.issues:type_name -> monorail.v3.Issue
	1,  // 8: monorail.v3.Issues.GetIssue:input_type -> monorail.v3.GetIssueRequest
	2,  // 9: monorail.v3.Issues.SearchIssues:input_type -> monorail.v3.SearchIssuesRequest
	4,  // 10: monorail.v3.Issues.ListComments:input_type -> monorail.v3.ListCommentsRequest
	7,  // 11: monorail.v3.Issues.ModifyIssues:input_type -> monorail.v3.ModifyIssuesRequest
	9,  // 12: monorail.v3.Issues.GetIssue:output_type -> monorail.v3.Issue
	3,  // 13: monorail.v3.Issues.SearchIssues:output_type -> monorail.v3.SearchIssuesResponse
	5,  // 14: monorail.v3.Issues.ListComments:output_type -> monorail.v3.ListCommentsResponse
	8,  // 15: monorail.v3.Issues.ModifyIssues:output_type -> monorail.v3.ModifyIssuesResponse
	12, // [12:16] is the sub-list for method output_type
	8,  // [8:12] is the sub-list for method input_type
	8,  // [8:8] is the sub-list for extension type_name
	8,  // [8:8] is the sub-list for extension extendee
	0,  // [0:8] is the sub-list for field type_name
}

func init() { file_api_v3_api_proto_issues_proto_init() }
func file_api_v3_api_proto_issues_proto_init() {
	if File_api_v3_api_proto_issues_proto != nil {
		return
	}
	file_api_v3_api_proto_issue_objects_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_api_v3_api_proto_issues_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetIssueRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v3_api_proto_issues_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchIssuesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v3_api_proto_issues_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchIssuesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v3_api_proto_issues_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListCommentsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v3_api_proto_issues_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListCommentsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v3_api_proto_issues_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IssueDelta); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v3_api_proto_issues_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ModifyIssuesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v3_api_proto_issues_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ModifyIssuesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_api_v3_api_proto_issues_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   8,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_api_v3_api_proto_issues_proto_goTypes,
		DependencyIndexes: file_api_v3_api_proto_issues_proto_depIdxs,
		EnumInfos:         file_api_v3_api_proto_issues_proto_enumTypes,
		MessageInfos:      file_api_v3_api_proto_issues_proto_msgTypes,
	}.Build()
	File_api_v3_api_proto_issues_proto = out.File
	file_api_v3_api_proto_issues_proto_rawDesc = nil
	file_api_v3_api_proto_issues_proto_goTypes = nil
	file_api_v3_api_proto_issues_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// IssuesClient is the client API for Issues service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type IssuesClient interface {
	// Returns the requested Issue.
	//
	// Raises:
	//   INVALID_ARGUMENT if `name` is formatted incorrectly.
	//   NOT_FOUND if the issue does not exist.
	//   PERMISSION_DENIED if the requester is not allowed to view the issue.
	GetIssue(ctx context.Context, in *GetIssueRequest, opts ...grpc.CallOption) (*Issue, error)
	// Searches over issues within the specified projects.
	// TODO(monorail:6988): Document possible errors when implemented.
	SearchIssues(ctx context.Context, in *SearchIssuesRequest, opts ...grpc.CallOption) (*SearchIssuesResponse, error)
	// Lists comments for an issue.
	//
	// Raises:
	//   INVALID_ARGUMENT if `parent` is formatted incorrectly or `page_size` < 0.
	//   NOT_FOUND if `parent` does not exist.
	//   PERMISSION_DENIED if the requester is not allowed to view `parent`.
	ListComments(ctx context.Context, in *ListCommentsRequest, opts ...grpc.CallOption) (*ListCommentsResponse, error)
	// Modifies Issues and creates a new Comment for each.
	// We do not offer a standard UpdateIssue because every issue change
	// must result in the side-effect of creating a new issue. We also want
	// to allow for any combination of issue changes to be made at once in
	// a monolithic method.
	//
	// Raises:
	//   INVALID_ARGUMENT required fields are missing or fields are formatted
	//     incorrectly.
	//   NOT_FOUND if any specified issues are not found.
	//   PERMISSION_DENIED if the requester is not allowed to make the
	//     requested change.
	ModifyIssues(ctx context.Context, in *ModifyIssuesRequest, opts ...grpc.CallOption) (*ModifyIssuesResponse, error)
}
type issuesPRPCClient struct {
	client *prpc.Client
}

func NewIssuesPRPCClient(client *prpc.Client) IssuesClient {
	return &issuesPRPCClient{client}
}

func (c *issuesPRPCClient) GetIssue(ctx context.Context, in *GetIssueRequest, opts ...grpc.CallOption) (*Issue, error) {
	out := new(Issue)
	err := c.client.Call(ctx, "monorail.v3.Issues", "GetIssue", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *issuesPRPCClient) SearchIssues(ctx context.Context, in *SearchIssuesRequest, opts ...grpc.CallOption) (*SearchIssuesResponse, error) {
	out := new(SearchIssuesResponse)
	err := c.client.Call(ctx, "monorail.v3.Issues", "SearchIssues", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *issuesPRPCClient) ListComments(ctx context.Context, in *ListCommentsRequest, opts ...grpc.CallOption) (*ListCommentsResponse, error) {
	out := new(ListCommentsResponse)
	err := c.client.Call(ctx, "monorail.v3.Issues", "ListComments", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *issuesPRPCClient) ModifyIssues(ctx context.Context, in *ModifyIssuesRequest, opts ...grpc.CallOption) (*ModifyIssuesResponse, error) {
	out := new(ModifyIssuesResponse)
	err := c.client.Call(ctx, "monorail.v3.Issues", "ModifyIssues", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

type issuesClient struct {
	cc grpc.ClientConnInterface
}

func NewIssuesClient(cc grpc.ClientConnInterface) IssuesClient {
	return &issuesClient{cc}
}

func (c *issuesClient) GetIssue(ctx context.Context, in *GetIssueRequest, opts ...grpc.CallOption) (*Issue, error) {
	out := new(Issue)
	err := c.cc.Invoke(ctx, "/monorail.v3.Issues/GetIssue", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *issuesClient) SearchIssues(ctx context.Context, in *SearchIssuesRequest, opts ...grpc.CallOption) (*SearchIssuesResponse, error) {
	out := new(SearchIssuesResponse)
	err := c.cc.Invoke(ctx, "/monorail.v3.Issues/SearchIssues", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *issuesClient) ListComments(ctx context.Context, in *ListCommentsRequest, opts ...grpc.CallOption) (*ListCommentsResponse, error) {
	out := new(ListCommentsResponse)
	err := c.cc.Invoke(ctx, "/monorail.v3.Issues/ListComments", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *issuesClient) ModifyIssues(ctx context.Context, in *ModifyIssuesRequest, opts ...grpc.CallOption) (*ModifyIssuesResponse, error) {
	out := new(ModifyIssuesResponse)
	err := c.cc.Invoke(ctx, "/monorail.v3.Issues/ModifyIssues", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// IssuesServer is the server API for Issues service.
type IssuesServer interface {
	// Returns the requested Issue.
	//
	// Raises:
	//   INVALID_ARGUMENT if `name` is formatted incorrectly.
	//   NOT_FOUND if the issue does not exist.
	//   PERMISSION_DENIED if the requester is not allowed to view the issue.
	GetIssue(context.Context, *GetIssueRequest) (*Issue, error)
	// Searches over issues within the specified projects.
	// TODO(monorail:6988): Document possible errors when implemented.
	SearchIssues(context.Context, *SearchIssuesRequest) (*SearchIssuesResponse, error)
	// Lists comments for an issue.
	//
	// Raises:
	//   INVALID_ARGUMENT if `parent` is formatted incorrectly or `page_size` < 0.
	//   NOT_FOUND if `parent` does not exist.
	//   PERMISSION_DENIED if the requester is not allowed to view `parent`.
	ListComments(context.Context, *ListCommentsRequest) (*ListCommentsResponse, error)
	// Modifies Issues and creates a new Comment for each.
	// We do not offer a standard UpdateIssue because every issue change
	// must result in the side-effect of creating a new issue. We also want
	// to allow for any combination of issue changes to be made at once in
	// a monolithic method.
	//
	// Raises:
	//   INVALID_ARGUMENT required fields are missing or fields are formatted
	//     incorrectly.
	//   NOT_FOUND if any specified issues are not found.
	//   PERMISSION_DENIED if the requester is not allowed to make the
	//     requested change.
	ModifyIssues(context.Context, *ModifyIssuesRequest) (*ModifyIssuesResponse, error)
}

// UnimplementedIssuesServer can be embedded to have forward compatible implementations.
type UnimplementedIssuesServer struct {
}

func (*UnimplementedIssuesServer) GetIssue(context.Context, *GetIssueRequest) (*Issue, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetIssue not implemented")
}
func (*UnimplementedIssuesServer) SearchIssues(context.Context, *SearchIssuesRequest) (*SearchIssuesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchIssues not implemented")
}
func (*UnimplementedIssuesServer) ListComments(context.Context, *ListCommentsRequest) (*ListCommentsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListComments not implemented")
}
func (*UnimplementedIssuesServer) ModifyIssues(context.Context, *ModifyIssuesRequest) (*ModifyIssuesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ModifyIssues not implemented")
}

func RegisterIssuesServer(s prpc.Registrar, srv IssuesServer) {
	s.RegisterService(&_Issues_serviceDesc, srv)
}

func _Issues_GetIssue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetIssueRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IssuesServer).GetIssue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/monorail.v3.Issues/GetIssue",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IssuesServer).GetIssue(ctx, req.(*GetIssueRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Issues_SearchIssues_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchIssuesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IssuesServer).SearchIssues(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/monorail.v3.Issues/SearchIssues",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IssuesServer).SearchIssues(ctx, req.(*SearchIssuesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Issues_ListComments_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListCommentsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IssuesServer).ListComments(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/monorail.v3.Issues/ListComments",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IssuesServer).ListComments(ctx, req.(*ListCommentsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Issues_ModifyIssues_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ModifyIssuesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IssuesServer).ModifyIssues(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/monorail.v3.Issues/ModifyIssues",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IssuesServer).ModifyIssues(ctx, req.(*ModifyIssuesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Issues_serviceDesc = grpc.ServiceDesc{
	ServiceName: "monorail.v3.Issues",
	HandlerType: (*IssuesServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetIssue",
			Handler:    _Issues_GetIssue_Handler,
		},
		{
			MethodName: "SearchIssues",
			Handler:    _Issues_SearchIssues_Handler,
		},
		{
			MethodName: "ListComments",
			Handler:    _Issues_ListComments_Handler,
		},
		{
			MethodName: "ModifyIssues",
			Handler:    _Issues_ModifyIssues_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/v3/api_proto/issues.proto",
}
