// Copyright 2020 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file or at
// https://developers.google.com/open-source/licenses/bsd

// This file defines protobufs for issues and related business
// objects, e.g., field values, comments, and attachments.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.24.0-devel
// 	protoc        v3.6.1
// source: api/v3/api_proto/issue_objects.proto

package monorail_v3

import (
	proto "github.com/golang/protobuf/proto"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

// Many values on an issue can be set either explicitly or by a rule.
// Next available tag: 3
type Derivation int32

const (
	// The default derivation. This value is used if the derivation is omitted.
	Derivation_DERIVATION_UNSPECIFIED Derivation = 0
	// The value was explicitly set on the issue.
	Derivation_EXPLICIT Derivation = 1
	// Value was auto-applied to the issue based on a project's rule. See
	// monorail/doc/userguide/project-owners.md#how-to-configure-filter-rules
	Derivation_RULE Derivation = 2
)

// Enum value maps for Derivation.
var (
	Derivation_name = map[int32]string{
		0: "DERIVATION_UNSPECIFIED",
		1: "EXPLICIT",
		2: "RULE",
	}
	Derivation_value = map[string]int32{
		"DERIVATION_UNSPECIFIED": 0,
		"EXPLICIT":               1,
		"RULE":                   2,
	}
)

func (x Derivation) Enum() *Derivation {
	p := new(Derivation)
	*p = x
	return p
}

func (x Derivation) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Derivation) Descriptor() protoreflect.EnumDescriptor {
	return file_api_v3_api_proto_issue_objects_proto_enumTypes[0].Descriptor()
}

func (Derivation) Type() protoreflect.EnumType {
	return &file_api_v3_api_proto_issue_objects_proto_enumTypes[0]
}

func (x Derivation) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Derivation.Descriptor instead.
func (Derivation) EnumDescriptor() ([]byte, []int) {
	return file_api_v3_api_proto_issue_objects_proto_rawDescGZIP(), []int{0}
}

// States that an issue or its comments can be in (aip.dev/216).
// Next available tag: 4
type IssueContentState int32

const (
	// The default value. This value is used if the state is omitted.
	IssueContentState_STATE_UNSPECIFIED IssueContentState = 0
	// The Issue or Comment is available.
	IssueContentState_ACTIVE IssueContentState = 1
	// The Issue or Comment has been deleted.
	IssueContentState_DELETED IssueContentState = 2
	// The Issue or Comment has been flagged as spam.
	// Takes precedent over DELETED.
	IssueContentState_SPAM IssueContentState = 3
)

// Enum value maps for IssueContentState.
var (
	IssueContentState_name = map[int32]string{
		0: "STATE_UNSPECIFIED",
		1: "ACTIVE",
		2: "DELETED",
		3: "SPAM",
	}
	IssueContentState_value = map[string]int32{
		"STATE_UNSPECIFIED": 0,
		"ACTIVE":            1,
		"DELETED":           2,
		"SPAM":              3,
	}
)

func (x IssueContentState) Enum() *IssueContentState {
	p := new(IssueContentState)
	*p = x
	return p
}

func (x IssueContentState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (IssueContentState) Descriptor() protoreflect.EnumDescriptor {
	return file_api_v3_api_proto_issue_objects_proto_enumTypes[1].Descriptor()
}

func (IssueContentState) Type() protoreflect.EnumType {
	return &file_api_v3_api_proto_issue_objects_proto_enumTypes[1]
}

func (x IssueContentState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use IssueContentState.Descriptor instead.
func (IssueContentState) EnumDescriptor() ([]byte, []int) {
	return file_api_v3_api_proto_issue_objects_proto_rawDescGZIP(), []int{1}
}

// The type of comment.
// Next available tag: 9
type Comment_Type int32

const (
	// The default comment type. Used if type is omitted.
	Comment_UNSPECIFIED Comment_Type = 0
	// A standard comment on an issue.
	Comment_COMMENT Comment_Type = 1
	// A comment representing a new description for the issue.
	Comment_DESCRIPTION Comment_Type = 2
)

// Enum value maps for Comment_Type.
var (
	Comment_Type_name = map[int32]string{
		0: "UNSPECIFIED",
		1: "COMMENT",
		2: "DESCRIPTION",
	}
	Comment_Type_value = map[string]int32{
		"UNSPECIFIED": 0,
		"COMMENT":     1,
		"DESCRIPTION": 2,
	}
)

func (x Comment_Type) Enum() *Comment_Type {
	p := new(Comment_Type)
	*p = x
	return p
}

func (x Comment_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Comment_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_api_v3_api_proto_issue_objects_proto_enumTypes[2].Descriptor()
}

func (Comment_Type) Type() protoreflect.EnumType {
	return &file_api_v3_api_proto_issue_objects_proto_enumTypes[2]
}

func (x Comment_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Comment_Type.Descriptor instead.
func (Comment_Type) EnumDescriptor() ([]byte, []int) {
	return file_api_v3_api_proto_issue_objects_proto_rawDescGZIP(), []int{0, 0}
}

// Potential states for an approval.
// Next available tag: 8
type ApprovalValue_ApprovalStatus int32

const (
	// The default approval status. This value is used if the status is omitted.
	ApprovalValue_APPROVAL_STATUS_UNSPECIFIED ApprovalValue_ApprovalStatus = 0
	ApprovalValue_NEEDS_REVIEW                ApprovalValue_ApprovalStatus = 1
	ApprovalValue_NA                          ApprovalValue_ApprovalStatus = 2
	ApprovalValue_REVIEW_REQUESTED            ApprovalValue_ApprovalStatus = 3
	ApprovalValue_REVIEW_STARTED              ApprovalValue_ApprovalStatus = 4
	ApprovalValue_NEED_INFO                   ApprovalValue_ApprovalStatus = 5
	ApprovalValue_APPROVED                    ApprovalValue_ApprovalStatus = 6
	ApprovalValue_NOT_APPROVED                ApprovalValue_ApprovalStatus = 7
)

// Enum value maps for ApprovalValue_ApprovalStatus.
var (
	ApprovalValue_ApprovalStatus_name = map[int32]string{
		0: "APPROVAL_STATUS_UNSPECIFIED",
		1: "NEEDS_REVIEW",
		2: "NA",
		3: "REVIEW_REQUESTED",
		4: "REVIEW_STARTED",
		5: "NEED_INFO",
		6: "APPROVED",
		7: "NOT_APPROVED",
	}
	ApprovalValue_ApprovalStatus_value = map[string]int32{
		"APPROVAL_STATUS_UNSPECIFIED": 0,
		"NEEDS_REVIEW":                1,
		"NA":                          2,
		"REVIEW_REQUESTED":            3,
		"REVIEW_STARTED":              4,
		"NEED_INFO":                   5,
		"APPROVED":                    6,
		"NOT_APPROVED":                7,
	}
)

func (x ApprovalValue_ApprovalStatus) Enum() *ApprovalValue_ApprovalStatus {
	p := new(ApprovalValue_ApprovalStatus)
	*p = x
	return p
}

func (x ApprovalValue_ApprovalStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ApprovalValue_ApprovalStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_api_v3_api_proto_issue_objects_proto_enumTypes[3].Descriptor()
}

func (ApprovalValue_ApprovalStatus) Type() protoreflect.EnumType {
	return &file_api_v3_api_proto_issue_objects_proto_enumTypes[3]
}

func (x ApprovalValue_ApprovalStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ApprovalValue_ApprovalStatus.Descriptor instead.
func (ApprovalValue_ApprovalStatus) EnumDescriptor() ([]byte, []int) {
	return file_api_v3_api_proto_issue_objects_proto_rawDescGZIP(), []int{5, 0}
}

// Represents a comment and any associated changes to an Issue.
//
// Comments cannot be Created or Updated through standard methods. The
// OUTPUT_ONLY annotations here indicate fields that would never be provided
// by the user even if these methods were made available.
// Next available tag: 11.
type Comment struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Resource name of the comment.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// The state of the comment.
	State IssueContentState `protobuf:"varint,2,opt,name=state,proto3,enum=monorail.v3.IssueContentState" json:"state,omitempty"`
	// The type of comment.
	Type Comment_Type `protobuf:"varint,3,opt,name=type,proto3,enum=monorail.v3.Comment_Type" json:"type,omitempty"`
	// The text of the comment.
	Content string `protobuf:"bytes,4,opt,name=content,proto3" json:"content,omitempty"`
	// Resource name of the author of the comment.
	Commenter string `protobuf:"bytes,5,opt,name=commenter,proto3" json:"commenter,omitempty"`
	// The time this comment was added to the Issue.
	CreateTime *timestamp.Timestamp `protobuf:"bytes,6,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	// Optional string full text of an email that caused this comment to be added.
	InboundMessage string `protobuf:"bytes,7,opt,name=inbound_message,json=inboundMessage,proto3" json:"inbound_message,omitempty"`
	// The approval this comment is associated with, if applicable.
	Approval string `protobuf:"bytes,8,opt,name=approval,proto3" json:"approval,omitempty"`
	// Any changes made to the issue in association with this comment.
	Amendments []*Comment_Amendment `protobuf:"bytes,9,rep,name=amendments,proto3" json:"amendments,omitempty"`
	// Any attachments uploaded in association with this comment.
	Attachments []*Comment_Attachment `protobuf:"bytes,10,rep,name=attachments,proto3" json:"attachments,omitempty"`
}

func (x *Comment) Reset() {
	*x = Comment{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v3_api_proto_issue_objects_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Comment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Comment) ProtoMessage() {}

func (x *Comment) ProtoReflect() protoreflect.Message {
	mi := &file_api_v3_api_proto_issue_objects_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Comment.ProtoReflect.Descriptor instead.
func (*Comment) Descriptor() ([]byte, []int) {
	return file_api_v3_api_proto_issue_objects_proto_rawDescGZIP(), []int{0}
}

func (x *Comment) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Comment) GetState() IssueContentState {
	if x != nil {
		return x.State
	}
	return IssueContentState_STATE_UNSPECIFIED
}

func (x *Comment) GetType() Comment_Type {
	if x != nil {
		return x.Type
	}
	return Comment_UNSPECIFIED
}

func (x *Comment) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *Comment) GetCommenter() string {
	if x != nil {
		return x.Commenter
	}
	return ""
}

func (x *Comment) GetCreateTime() *timestamp.Timestamp {
	if x != nil {
		return x.CreateTime
	}
	return nil
}

func (x *Comment) GetInboundMessage() string {
	if x != nil {
		return x.InboundMessage
	}
	return ""
}

func (x *Comment) GetApproval() string {
	if x != nil {
		return x.Approval
	}
	return ""
}

func (x *Comment) GetAmendments() []*Comment_Amendment {
	if x != nil {
		return x.Amendments
	}
	return nil
}

func (x *Comment) GetAttachments() []*Comment_Attachment {
	if x != nil {
		return x.Attachments
	}
	return nil
}

// A value of a custom field for an issue.
// Next available tag: 5
type FieldValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The project-defined field associated with this value
	Field string `protobuf:"bytes,1,opt,name=field,proto3" json:"field,omitempty"`
	// The value associated with the field.
	// Mapping of field types to string value:
	// ENUM_TYPE(int) => str(value)
	// INT_TYPE(int) => str(value)
	// STR_TYPE(str) => value
	// USER_TYPE(int) => the user's resource name
	// DATE_TYPE(int) => str(int) representing time in seconds since epoch
	// URL_TYPE(str) => value
	Value string `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
	// How the value was derived.
	Derivation Derivation `protobuf:"varint,3,opt,name=derivation,proto3,enum=monorail.v3.Derivation" json:"derivation,omitempty"`
	// Issues with phase-specific fields can have values for each phase.
	Phase string `protobuf:"bytes,4,opt,name=phase,proto3" json:"phase,omitempty"`
}

func (x *FieldValue) Reset() {
	*x = FieldValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v3_api_proto_issue_objects_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FieldValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FieldValue) ProtoMessage() {}

func (x *FieldValue) ProtoReflect() protoreflect.Message {
	mi := &file_api_v3_api_proto_issue_objects_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FieldValue.ProtoReflect.Descriptor instead.
func (*FieldValue) Descriptor() ([]byte, []int) {
	return file_api_v3_api_proto_issue_objects_proto_rawDescGZIP(), []int{1}
}

func (x *FieldValue) GetField() string {
	if x != nil {
		return x.Field
	}
	return ""
}

func (x *FieldValue) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *FieldValue) GetDerivation() Derivation {
	if x != nil {
		return x.Derivation
	}
	return Derivation_DERIVATION_UNSPECIFIED
}

func (x *FieldValue) GetPhase() string {
	if x != nil {
		return x.Phase
	}
	return ""
}

// Documents and tracks a bug, task, or feature request within a Project.
// Next available tag: 23
type Issue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Resource name of the issue.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// A brief summary of the issue. Generally displayed as a user-facing title.
	// TODO(monorail:6988): The UI limits summary length while the backend does
	// not. Resolve this discrepancy.
	Summary string `protobuf:"bytes,2,opt,name=summary,proto3" json:"summary,omitempty"`
	// The state of the issue.
	State IssueContentState `protobuf:"varint,3,opt,name=state,proto3,enum=monorail.v3.IssueContentState" json:"state,omitempty"`
	// The current status of the issue.
	Status *Issue_StatusValue `protobuf:"bytes,4,opt,name=status,proto3" json:"status,omitempty"`
	// The user who created the issue.
	Reporter string `protobuf:"bytes,5,opt,name=reporter,proto3" json:"reporter,omitempty"`
	// The user currently responsible for the issue.
	Owner *Issue_UserValue `protobuf:"bytes,6,opt,name=owner,proto3" json:"owner,omitempty"`
	// Additional users receiving notifications on the issue.
	CcUsers []*Issue_UserValue `protobuf:"bytes,7,rep,name=cc_users,json=ccUsers,proto3" json:"cc_users,omitempty"`
	// Labels applied to the issue
	Labels []*Issue_LabelValue `protobuf:"bytes,8,rep,name=labels,proto3" json:"labels,omitempty"`
	// Components the issue is associated with.
	Components []*Issue_ComponentValue `protobuf:"bytes,9,rep,name=components,proto3" json:"components,omitempty"`
	// Values for custom fields on the issue.
	FieldValues []*FieldValue `protobuf:"bytes,10,rep,name=field_values,json=fieldValues,proto3" json:"field_values,omitempty"`
	// An issue can be merged into another. If this value is set, the issue
	// to referred should be considered the primary source for further updates.
	MergedIntoIssueRef *IssueRef `protobuf:"bytes,11,opt,name=merged_into_issue_ref,json=mergedIntoIssueRef,proto3" json:"merged_into_issue_ref,omitempty"`
	// Issues preventing the completion of this issue.
	BlockedOnIssueRefs []*IssueRef `protobuf:"bytes,12,rep,name=blocked_on_issue_refs,json=blockedOnIssueRefs,proto3" json:"blocked_on_issue_refs,omitempty"`
	// Issues for which this issue is blocking completion.
	BlockingIssueRefs []*IssueRef `protobuf:"bytes,13,rep,name=blocking_issue_refs,json=blockingIssueRefs,proto3" json:"blocking_issue_refs,omitempty"`
	// The time the issue was reported.
	CreateTime *timestamp.Timestamp `protobuf:"bytes,14,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	// The most recent time the issue was closed.
	CloseTime *timestamp.Timestamp `protobuf:"bytes,15,opt,name=close_time,json=closeTime,proto3" json:"close_time,omitempty"`
	// The most recent time the issue was modified.
	ModifyTime *timestamp.Timestamp `protobuf:"bytes,16,opt,name=modify_time,json=modifyTime,proto3" json:"modify_time,omitempty"`
	// The most recent time a component value was modified.
	ComponentModifyTime *timestamp.Timestamp `protobuf:"bytes,17,opt,name=component_modify_time,json=componentModifyTime,proto3" json:"component_modify_time,omitempty"`
	// The most recent time the status value was modified.
	StatusModifyTime *timestamp.Timestamp `protobuf:"bytes,18,opt,name=status_modify_time,json=statusModifyTime,proto3" json:"status_modify_time,omitempty"`
	// The most recent time the owner made a modification to the issue.
	OwnerModifyTime *timestamp.Timestamp `protobuf:"bytes,19,opt,name=owner_modify_time,json=ownerModifyTime,proto3" json:"owner_modify_time,omitempty"`
	// The number of attachments associated with the issue.
	AttachmentCount uint32 `protobuf:"varint,20,opt,name=attachment_count,json=attachmentCount,proto3" json:"attachment_count,omitempty"`
	// The number of users who have starred the issue.
	StarCount uint32 `protobuf:"varint,21,opt,name=star_count,json=starCount,proto3" json:"star_count,omitempty"`
	// Phases of a process the issue is tracking (if applicable).
	// See monorail/doc/userguide/concepts.md#issue-approvals-and-gates
	Phases []string `protobuf:"bytes,22,rep,name=phases,proto3" json:"phases,omitempty"`
}

func (x *Issue) Reset() {
	*x = Issue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v3_api_proto_issue_objects_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Issue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Issue) ProtoMessage() {}

func (x *Issue) ProtoReflect() protoreflect.Message {
	mi := &file_api_v3_api_proto_issue_objects_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Issue.ProtoReflect.Descriptor instead.
func (*Issue) Descriptor() ([]byte, []int) {
	return file_api_v3_api_proto_issue_objects_proto_rawDescGZIP(), []int{2}
}

func (x *Issue) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Issue) GetSummary() string {
	if x != nil {
		return x.Summary
	}
	return ""
}

func (x *Issue) GetState() IssueContentState {
	if x != nil {
		return x.State
	}
	return IssueContentState_STATE_UNSPECIFIED
}

func (x *Issue) GetStatus() *Issue_StatusValue {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *Issue) GetReporter() string {
	if x != nil {
		return x.Reporter
	}
	return ""
}

func (x *Issue) GetOwner() *Issue_UserValue {
	if x != nil {
		return x.Owner
	}
	return nil
}

func (x *Issue) GetCcUsers() []*Issue_UserValue {
	if x != nil {
		return x.CcUsers
	}
	return nil
}

func (x *Issue) GetLabels() []*Issue_LabelValue {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *Issue) GetComponents() []*Issue_ComponentValue {
	if x != nil {
		return x.Components
	}
	return nil
}

func (x *Issue) GetFieldValues() []*FieldValue {
	if x != nil {
		return x.FieldValues
	}
	return nil
}

func (x *Issue) GetMergedIntoIssueRef() *IssueRef {
	if x != nil {
		return x.MergedIntoIssueRef
	}
	return nil
}

func (x *Issue) GetBlockedOnIssueRefs() []*IssueRef {
	if x != nil {
		return x.BlockedOnIssueRefs
	}
	return nil
}

func (x *Issue) GetBlockingIssueRefs() []*IssueRef {
	if x != nil {
		return x.BlockingIssueRefs
	}
	return nil
}

func (x *Issue) GetCreateTime() *timestamp.Timestamp {
	if x != nil {
		return x.CreateTime
	}
	return nil
}

func (x *Issue) GetCloseTime() *timestamp.Timestamp {
	if x != nil {
		return x.CloseTime
	}
	return nil
}

func (x *Issue) GetModifyTime() *timestamp.Timestamp {
	if x != nil {
		return x.ModifyTime
	}
	return nil
}

func (x *Issue) GetComponentModifyTime() *timestamp.Timestamp {
	if x != nil {
		return x.ComponentModifyTime
	}
	return nil
}

func (x *Issue) GetStatusModifyTime() *timestamp.Timestamp {
	if x != nil {
		return x.StatusModifyTime
	}
	return nil
}

func (x *Issue) GetOwnerModifyTime() *timestamp.Timestamp {
	if x != nil {
		return x.OwnerModifyTime
	}
	return nil
}

func (x *Issue) GetAttachmentCount() uint32 {
	if x != nil {
		return x.AttachmentCount
	}
	return 0
}

func (x *Issue) GetStarCount() uint32 {
	if x != nil {
		return x.StarCount
	}
	return 0
}

func (x *Issue) GetPhases() []string {
	if x != nil {
		return x.Phases
	}
	return nil
}

// Specifies a column in an issues list view.
// Next available tag: 2
type IssuesListColumn struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Column name shown in the column header.
	Column string `protobuf:"bytes,1,opt,name=column,proto3" json:"column,omitempty"`
}

func (x *IssuesListColumn) Reset() {
	*x = IssuesListColumn{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v3_api_proto_issue_objects_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IssuesListColumn) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IssuesListColumn) ProtoMessage() {}

func (x *IssuesListColumn) ProtoReflect() protoreflect.Message {
	mi := &file_api_v3_api_proto_issue_objects_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IssuesListColumn.ProtoReflect.Descriptor instead.
func (*IssuesListColumn) Descriptor() ([]byte, []int) {
	return file_api_v3_api_proto_issue_objects_proto_rawDescGZIP(), []int{3}
}

func (x *IssuesListColumn) GetColumn() string {
	if x != nil {
		return x.Column
	}
	return ""
}

// Refers to an issue that may or may not be tracked in Monorail.
// Only one of `issue` and `ext_identifier` should be set.
// Next available tag: 3
type IssueRef struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Resource name of an issue tracked in Monorail
	Issue string `protobuf:"bytes,1,opt,name=issue,proto3" json:"issue,omitempty"`
	// For referencing external issues, e.g. b/1234, or a dangling reference
	// to an old 'codesite' issue.
	// TODO(monorail:7208): add more documentation on dangling references.
	ExtIdentifier string `protobuf:"bytes,2,opt,name=ext_identifier,json=extIdentifier,proto3" json:"ext_identifier,omitempty"`
}

func (x *IssueRef) Reset() {
	*x = IssueRef{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v3_api_proto_issue_objects_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IssueRef) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IssueRef) ProtoMessage() {}

func (x *IssueRef) ProtoReflect() protoreflect.Message {
	mi := &file_api_v3_api_proto_issue_objects_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IssueRef.ProtoReflect.Descriptor instead.
func (*IssueRef) Descriptor() ([]byte, []int) {
	return file_api_v3_api_proto_issue_objects_proto_rawDescGZIP(), []int{4}
}

func (x *IssueRef) GetIssue() string {
	if x != nil {
		return x.Issue
	}
	return ""
}

func (x *IssueRef) GetExtIdentifier() string {
	if x != nil {
		return x.ExtIdentifier
	}
	return ""
}

// Documents and tracks an approval process.
// See monorail/doc/userguide/concepts.md#issue-approvals-and-gates
// Next available tag: 9
type ApprovalValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The resource name.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// The resource name of the approvalDef.
	ApprovalDef string `protobuf:"bytes,2,opt,name=approval_def,json=approvalDef,proto3" json:"approval_def,omitempty"`
	// The users able to approve the issue.
	Approvers []string `protobuf:"bytes,3,rep,name=approvers,proto3" json:"approvers,omitempty"`
	// The current status of the approval.
	Status ApprovalValue_ApprovalStatus `protobuf:"varint,4,opt,name=status,proto3,enum=monorail.v3.ApprovalValue_ApprovalStatus" json:"status,omitempty"`
	// The time the approval value was last set.
	SetTime *timestamp.Timestamp `protobuf:"bytes,5,opt,name=set_time,json=setTime,proto3" json:"set_time,omitempty"`
	// The user who most recently set the issue
	Setter string `protobuf:"bytes,6,opt,name=setter,proto3" json:"setter,omitempty"`
	// The phase the approval is associated with (if applicable).
	Phase       string        `protobuf:"bytes,7,opt,name=phase,proto3" json:"phase,omitempty"`
	FieldValues []*FieldValue `protobuf:"bytes,8,rep,name=field_values,json=fieldValues,proto3" json:"field_values,omitempty"`
}

func (x *ApprovalValue) Reset() {
	*x = ApprovalValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v3_api_proto_issue_objects_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApprovalValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApprovalValue) ProtoMessage() {}

func (x *ApprovalValue) ProtoReflect() protoreflect.Message {
	mi := &file_api_v3_api_proto_issue_objects_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApprovalValue.ProtoReflect.Descriptor instead.
func (*ApprovalValue) Descriptor() ([]byte, []int) {
	return file_api_v3_api_proto_issue_objects_proto_rawDescGZIP(), []int{5}
}

func (x *ApprovalValue) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ApprovalValue) GetApprovalDef() string {
	if x != nil {
		return x.ApprovalDef
	}
	return ""
}

func (x *ApprovalValue) GetApprovers() []string {
	if x != nil {
		return x.Approvers
	}
	return nil
}

func (x *ApprovalValue) GetStatus() ApprovalValue_ApprovalStatus {
	if x != nil {
		return x.Status
	}
	return ApprovalValue_APPROVAL_STATUS_UNSPECIFIED
}

func (x *ApprovalValue) GetSetTime() *timestamp.Timestamp {
	if x != nil {
		return x.SetTime
	}
	return nil
}

func (x *ApprovalValue) GetSetter() string {
	if x != nil {
		return x.Setter
	}
	return ""
}

func (x *ApprovalValue) GetPhase() string {
	if x != nil {
		return x.Phase
	}
	return ""
}

func (x *ApprovalValue) GetFieldValues() []*FieldValue {
	if x != nil {
		return x.FieldValues
	}
	return nil
}

// A file attached to a comment.
// Next available tag: 8
type Comment_Attachment struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The name of the attached file.
	Filename string `protobuf:"bytes,1,opt,name=filename,proto3" json:"filename,omitempty"`
	// It is possible for attachments to be deleted (and undeleted) by the
	// uploader. The name of deleted attachments are still shown, but the
	// content is not available.
	State IssueContentState `protobuf:"varint,2,opt,name=state,proto3,enum=monorail.v3.IssueContentState" json:"state,omitempty"`
	// Size of the attached file in bytes.
	Size uint64 `protobuf:"varint,3,opt,name=size,proto3" json:"size,omitempty"`
	// The type of content contained in the file, using the IANA's media type
	// https://www.iana.org/assignments/media-types/media-types.xhtml.
	MediaType string `protobuf:"bytes,4,opt,name=media_type,json=mediaType,proto3" json:"media_type,omitempty"`
	// The URI used for a preview of the attachment (when relelvant).
	ThumbnailUri string `protobuf:"bytes,5,opt,name=thumbnail_uri,json=thumbnailUri,proto3" json:"thumbnail_uri,omitempty"`
	// The URI used to view the content of the attachment.
	ViewUri string `protobuf:"bytes,6,opt,name=view_uri,json=viewUri,proto3" json:"view_uri,omitempty"`
	// The URI used to download the content of the attachment.
	DownloadUri string `protobuf:"bytes,7,opt,name=download_uri,json=downloadUri,proto3" json:"download_uri,omitempty"`
}

func (x *Comment_Attachment) Reset() {
	*x = Comment_Attachment{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v3_api_proto_issue_objects_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Comment_Attachment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Comment_Attachment) ProtoMessage() {}

func (x *Comment_Attachment) ProtoReflect() protoreflect.Message {
	mi := &file_api_v3_api_proto_issue_objects_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Comment_Attachment.ProtoReflect.Descriptor instead.
func (*Comment_Attachment) Descriptor() ([]byte, []int) {
	return file_api_v3_api_proto_issue_objects_proto_rawDescGZIP(), []int{0, 0}
}

func (x *Comment_Attachment) GetFilename() string {
	if x != nil {
		return x.Filename
	}
	return ""
}

func (x *Comment_Attachment) GetState() IssueContentState {
	if x != nil {
		return x.State
	}
	return IssueContentState_STATE_UNSPECIFIED
}

func (x *Comment_Attachment) GetSize() uint64 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *Comment_Attachment) GetMediaType() string {
	if x != nil {
		return x.MediaType
	}
	return ""
}

func (x *Comment_Attachment) GetThumbnailUri() string {
	if x != nil {
		return x.ThumbnailUri
	}
	return ""
}

func (x *Comment_Attachment) GetViewUri() string {
	if x != nil {
		return x.ViewUri
	}
	return ""
}

func (x *Comment_Attachment) GetDownloadUri() string {
	if x != nil {
		return x.DownloadUri
	}
	return ""
}

// This message is only suitable for displaying the amendment to users.
// We don't currently offer structured amendments that client code can
// reason about, field names can be ambiguous, and we don't have
// old_value for most changes.
// Next available tag: 4
type Comment_Amendment struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// This may be the name of a built-in or custom field, or relative to
	// an approval field name.
	FieldName string `protobuf:"bytes,1,opt,name=field_name,json=fieldName,proto3" json:"field_name,omitempty"`
	// This may be a new value that overwrote the old value, e.g., "Assigned",
	// or it may be a space-separated list of changes, e.g., "Size-L -Size-S".
	NewOrDeltaValue string `protobuf:"bytes,2,opt,name=new_or_delta_value,json=newOrDeltaValue,proto3" json:"new_or_delta_value,omitempty"`
	// old_value is only used when the user changes the summary.
	OldValue string `protobuf:"bytes,3,opt,name=old_value,json=oldValue,proto3" json:"old_value,omitempty"`
}

func (x *Comment_Amendment) Reset() {
	*x = Comment_Amendment{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v3_api_proto_issue_objects_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Comment_Amendment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Comment_Amendment) ProtoMessage() {}

func (x *Comment_Amendment) ProtoReflect() protoreflect.Message {
	mi := &file_api_v3_api_proto_issue_objects_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Comment_Amendment.ProtoReflect.Descriptor instead.
func (*Comment_Amendment) Descriptor() ([]byte, []int) {
	return file_api_v3_api_proto_issue_objects_proto_rawDescGZIP(), []int{0, 1}
}

func (x *Comment_Amendment) GetFieldName() string {
	if x != nil {
		return x.FieldName
	}
	return ""
}

func (x *Comment_Amendment) GetNewOrDeltaValue() string {
	if x != nil {
		return x.NewOrDeltaValue
	}
	return ""
}

func (x *Comment_Amendment) GetOldValue() string {
	if x != nil {
		return x.OldValue
	}
	return ""
}

// A possibly rule-derived component for the issue.
// Next available tag: 3
type Issue_ComponentValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The component.
	Component string `protobuf:"bytes,1,opt,name=component,proto3" json:"component,omitempty"`
	// How the component was derived.
	Derivation Derivation `protobuf:"varint,2,opt,name=derivation,proto3,enum=monorail.v3.Derivation" json:"derivation,omitempty"`
}

func (x *Issue_ComponentValue) Reset() {
	*x = Issue_ComponentValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v3_api_proto_issue_objects_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Issue_ComponentValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Issue_ComponentValue) ProtoMessage() {}

func (x *Issue_ComponentValue) ProtoReflect() protoreflect.Message {
	mi := &file_api_v3_api_proto_issue_objects_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Issue_ComponentValue.ProtoReflect.Descriptor instead.
func (*Issue_ComponentValue) Descriptor() ([]byte, []int) {
	return file_api_v3_api_proto_issue_objects_proto_rawDescGZIP(), []int{2, 0}
}

func (x *Issue_ComponentValue) GetComponent() string {
	if x != nil {
		return x.Component
	}
	return ""
}

func (x *Issue_ComponentValue) GetDerivation() Derivation {
	if x != nil {
		return x.Derivation
	}
	return Derivation_DERIVATION_UNSPECIFIED
}

// A possibly rule-derived label for an issue.
// Next available tag: 3
type Issue_LabelValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The label.
	Label string `protobuf:"bytes,1,opt,name=label,proto3" json:"label,omitempty"`
	// How the label was derived.
	Derivation Derivation `protobuf:"varint,2,opt,name=derivation,proto3,enum=monorail.v3.Derivation" json:"derivation,omitempty"`
}

func (x *Issue_LabelValue) Reset() {
	*x = Issue_LabelValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v3_api_proto_issue_objects_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Issue_LabelValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Issue_LabelValue) ProtoMessage() {}

func (x *Issue_LabelValue) ProtoReflect() protoreflect.Message {
	mi := &file_api_v3_api_proto_issue_objects_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Issue_LabelValue.ProtoReflect.Descriptor instead.
func (*Issue_LabelValue) Descriptor() ([]byte, []int) {
	return file_api_v3_api_proto_issue_objects_proto_rawDescGZIP(), []int{2, 1}
}

func (x *Issue_LabelValue) GetLabel() string {
	if x != nil {
		return x.Label
	}
	return ""
}

func (x *Issue_LabelValue) GetDerivation() Derivation {
	if x != nil {
		return x.Derivation
	}
	return Derivation_DERIVATION_UNSPECIFIED
}

// A possibly rule-derived status for an issue.
// Next available tag: 3
type Issue_StatusValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The status of the issue. Note that in rare cases this can be a
	// value not defined in the project's StatusDefs (e.g. if the issue
	// was moved from another project)
	Status string `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	// How the status was derived.
	Derivation Derivation `protobuf:"varint,2,opt,name=derivation,proto3,enum=monorail.v3.Derivation" json:"derivation,omitempty"`
}

func (x *Issue_StatusValue) Reset() {
	*x = Issue_StatusValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v3_api_proto_issue_objects_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Issue_StatusValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Issue_StatusValue) ProtoMessage() {}

func (x *Issue_StatusValue) ProtoReflect() protoreflect.Message {
	mi := &file_api_v3_api_proto_issue_objects_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Issue_StatusValue.ProtoReflect.Descriptor instead.
func (*Issue_StatusValue) Descriptor() ([]byte, []int) {
	return file_api_v3_api_proto_issue_objects_proto_rawDescGZIP(), []int{2, 2}
}

func (x *Issue_StatusValue) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *Issue_StatusValue) GetDerivation() Derivation {
	if x != nil {
		return x.Derivation
	}
	return Derivation_DERIVATION_UNSPECIFIED
}

// A possibly rule-derived user value on an issue.
// Next available tag: 3
type Issue_UserValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The user.
	User string `protobuf:"bytes,1,opt,name=user,proto3" json:"user,omitempty"`
	// How the user value was derived.
	Derivation Derivation `protobuf:"varint,2,opt,name=derivation,proto3,enum=monorail.v3.Derivation" json:"derivation,omitempty"`
}

func (x *Issue_UserValue) Reset() {
	*x = Issue_UserValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v3_api_proto_issue_objects_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Issue_UserValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Issue_UserValue) ProtoMessage() {}

func (x *Issue_UserValue) ProtoReflect() protoreflect.Message {
	mi := &file_api_v3_api_proto_issue_objects_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Issue_UserValue.ProtoReflect.Descriptor instead.
func (*Issue_UserValue) Descriptor() ([]byte, []int) {
	return file_api_v3_api_proto_issue_objects_proto_rawDescGZIP(), []int{2, 3}
}

func (x *Issue_UserValue) GetUser() string {
	if x != nil {
		return x.User
	}
	return ""
}

func (x *Issue_UserValue) GetDerivation() Derivation {
	if x != nil {
		return x.Derivation
	}
	return Derivation_DERIVATION_UNSPECIFIED
}

var File_api_v3_api_proto_issue_objects_proto protoreflect.FileDescriptor

var file_api_v3_api_proto_issue_objects_proto_rawDesc = []byte{
	0x0a, 0x24, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x33, 0x2f, 0x61, 0x70, 0x69, 0x5f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2f, 0x69, 0x73, 0x73, 0x75, 0x65, 0x5f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0b, 0x6d, 0x6f, 0x6e, 0x6f, 0x72, 0x61, 0x69, 0x6c,
	0x2e, 0x76, 0x33, 0x1a, 0x2c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x66, 0x69, 0x65,
	0x6c, 0x64, 0x5f, 0x62, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x26, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x91, 0x08, 0x0a, 0x07, 0x43,
	0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x39, 0x0a, 0x05, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x6d, 0x6f, 0x6e, 0x6f,
	0x72, 0x61, 0x69, 0x6c, 0x2e, 0x76, 0x33, 0x2e, 0x49, 0x73, 0x73, 0x75, 0x65, 0x43, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x05,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x2d, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x6d, 0x6f, 0x6e, 0x6f, 0x72, 0x61, 0x69, 0x6c, 0x2e, 0x76,
	0x33, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x38,
	0x0a, 0x09, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x1a, 0xfa, 0x41, 0x14, 0x0a, 0x12, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x72, 0x62, 0x75,
	0x67, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x55, 0x73, 0x65, 0x72, 0xe0, 0x41, 0x03, 0x52, 0x09, 0x63,
	0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x12, 0x40, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x0a,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x2c, 0x0a, 0x0f, 0x69, 0x6e,
	0x62, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x0e, 0x69, 0x6e, 0x62, 0x6f, 0x75, 0x6e,
	0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x3c, 0x0a, 0x08, 0x61, 0x70, 0x70, 0x72,
	0x6f, 0x76, 0x61, 0x6c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x42, 0x20, 0xfa, 0x41, 0x1d, 0x0a,
	0x1b, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x72, 0x62, 0x75, 0x67, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x41,
	0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x08, 0x61, 0x70,
	0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x12, 0x43, 0x0a, 0x0a, 0x61, 0x6d, 0x65, 0x6e, 0x64, 0x6d,
	0x65, 0x6e, 0x74, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6d, 0x6f, 0x6e,
	0x6f, 0x72, 0x61, 0x69, 0x6c, 0x2e, 0x76, 0x33, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74,
	0x2e, 0x41, 0x6d, 0x65, 0x6e, 0x64, 0x6d, 0x65, 0x6e, 0x74, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52,
	0x0a, 0x61, 0x6d, 0x65, 0x6e, 0x64, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x46, 0x0a, 0x0b, 0x61,
	0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1f, 0x2e, 0x6d, 0x6f, 0x6e, 0x6f, 0x72, 0x61, 0x69, 0x6c, 0x2e, 0x76, 0x33, 0x2e, 0x43,
	0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e,
	0x74, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x0b, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65,
	0x6e, 0x74, 0x73, 0x1a, 0xf4, 0x01, 0x0a, 0x0a, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65,
	0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x34,
	0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e,
	0x6d, 0x6f, 0x6e, 0x6f, 0x72, 0x61, 0x69, 0x6c, 0x2e, 0x76, 0x33, 0x2e, 0x49, 0x73, 0x73, 0x75,
	0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x65, 0x64, 0x69,
	0x61, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6d, 0x65,
	0x64, 0x69, 0x61, 0x54, 0x79, 0x70, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x74, 0x68, 0x75, 0x6d, 0x62,
	0x6e, 0x61, 0x69, 0x6c, 0x5f, 0x75, 0x72, 0x69, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x74, 0x68, 0x75, 0x6d, 0x62, 0x6e, 0x61, 0x69, 0x6c, 0x55, 0x72, 0x69, 0x12, 0x19, 0x0a, 0x08,
	0x76, 0x69, 0x65, 0x77, 0x5f, 0x75, 0x72, 0x69, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x76, 0x69, 0x65, 0x77, 0x55, 0x72, 0x69, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x6f, 0x77, 0x6e, 0x6c,
	0x6f, 0x61, 0x64, 0x5f, 0x75, 0x72, 0x69, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64,
	0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x55, 0x72, 0x69, 0x1a, 0x74, 0x0a, 0x09, 0x41, 0x6d,
	0x65, 0x6e, 0x64, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x66, 0x69, 0x65, 0x6c, 0x64,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x66, 0x69, 0x65,
	0x6c, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2b, 0x0a, 0x12, 0x6e, 0x65, 0x77, 0x5f, 0x6f, 0x72,
	0x5f, 0x64, 0x65, 0x6c, 0x74, 0x61, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0f, 0x6e, 0x65, 0x77, 0x4f, 0x72, 0x44, 0x65, 0x6c, 0x74, 0x61, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x6f, 0x6c, 0x64, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6f, 0x6c, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x22, 0x35, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0f, 0x0a, 0x0b, 0x55, 0x4e, 0x53, 0x50,
	0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x43, 0x4f, 0x4d,
	0x4d, 0x45, 0x4e, 0x54, 0x10, 0x01, 0x12, 0x0f, 0x0a, 0x0b, 0x44, 0x45, 0x53, 0x43, 0x52, 0x49,
	0x50, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x02, 0x3a, 0x55, 0xea, 0x41, 0x52, 0x0a, 0x1a, 0x61, 0x70,
	0x69, 0x2e, 0x63, 0x72, 0x62, 0x75, 0x67, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x49, 0x73, 0x73, 0x75,
	0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x34, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x73, 0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x7d, 0x2f, 0x69, 0x73, 0x73,
	0x75, 0x65, 0x73, 0x2f, 0x7b, 0x69, 0x73, 0x73, 0x75, 0x65, 0x7d, 0x2f, 0x63, 0x6f, 0x6d, 0x6d,
	0x65, 0x6e, 0x74, 0x73, 0x2f, 0x7b, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x7d, 0x22, 0xa4,
	0x01, 0x0a, 0x0a, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x31, 0x0a,
	0x05, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1b, 0xfa, 0x41,
	0x18, 0x0a, 0x16, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x72, 0x62, 0x75, 0x67, 0x2e, 0x63, 0x6f, 0x6d,
	0x2f, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x44, 0x65, 0x66, 0x52, 0x05, 0x66, 0x69, 0x65, 0x6c, 0x64,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x37, 0x0a, 0x0a, 0x64, 0x65, 0x72, 0x69, 0x76, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x6d, 0x6f, 0x6e,
	0x6f, 0x72, 0x61, 0x69, 0x6c, 0x2e, 0x76, 0x33, 0x2e, 0x44, 0x65, 0x72, 0x69, 0x76, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x64, 0x65, 0x72, 0x69, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x14, 0x0a, 0x05, 0x70, 0x68, 0x61, 0x73, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x70, 0x68, 0x61, 0x73, 0x65, 0x22, 0xf6, 0x0d, 0x0a, 0x05, 0x49, 0x73, 0x73, 0x75, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x12, 0x34, 0x0a,
	0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x6d,
	0x6f, 0x6e, 0x6f, 0x72, 0x61, 0x69, 0x6c, 0x2e, 0x76, 0x33, 0x2e, 0x49, 0x73, 0x73, 0x75, 0x65,
	0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x12, 0x36, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6d, 0x6f, 0x6e, 0x6f, 0x72, 0x61, 0x69, 0x6c, 0x2e, 0x76,
	0x33, 0x2e, 0x49, 0x73, 0x73, 0x75, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x36, 0x0a, 0x08, 0x72,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1a, 0xfa,
	0x41, 0x14, 0x0a, 0x12, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x72, 0x62, 0x75, 0x67, 0x2e, 0x63, 0x6f,
	0x6d, 0x2f, 0x55, 0x73, 0x65, 0x72, 0xe0, 0x41, 0x03, 0x52, 0x08, 0x72, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x65, 0x72, 0x12, 0x32, 0x0a, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6d, 0x6f, 0x6e, 0x6f, 0x72, 0x61, 0x69, 0x6c, 0x2e, 0x76, 0x33,
	0x2e, 0x49, 0x73, 0x73, 0x75, 0x65, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x12, 0x37, 0x0a, 0x08, 0x63, 0x63, 0x5f, 0x75, 0x73,
	0x65, 0x72, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6d, 0x6f, 0x6e, 0x6f,
	0x72, 0x61, 0x69, 0x6c, 0x2e, 0x76, 0x33, 0x2e, 0x49, 0x73, 0x73, 0x75, 0x65, 0x2e, 0x55, 0x73,
	0x65, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x07, 0x63, 0x63, 0x55, 0x73, 0x65, 0x72, 0x73,
	0x12, 0x35, 0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1d, 0x2e, 0x6d, 0x6f, 0x6e, 0x6f, 0x72, 0x61, 0x69, 0x6c, 0x2e, 0x76, 0x33, 0x2e, 0x49,
	0x73, 0x73, 0x75, 0x65, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0x41, 0x0a, 0x0a, 0x63, 0x6f, 0x6d, 0x70, 0x6f,
	0x6e, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x6d, 0x6f,
	0x6e, 0x6f, 0x72, 0x61, 0x69, 0x6c, 0x2e, 0x76, 0x33, 0x2e, 0x49, 0x73, 0x73, 0x75, 0x65, 0x2e,
	0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0a,
	0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x3a, 0x0a, 0x0c, 0x66, 0x69,
	0x65, 0x6c, 0x64, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x17, 0x2e, 0x6d, 0x6f, 0x6e, 0x6f, 0x72, 0x61, 0x69, 0x6c, 0x2e, 0x76, 0x33, 0x2e, 0x46,
	0x69, 0x65, 0x6c, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0b, 0x66, 0x69, 0x65, 0x6c, 0x64,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x12, 0x48, 0x0a, 0x15, 0x6d, 0x65, 0x72, 0x67, 0x65, 0x64,
	0x5f, 0x69, 0x6e, 0x74, 0x6f, 0x5f, 0x69, 0x73, 0x73, 0x75, 0x65, 0x5f, 0x72, 0x65, 0x66, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6d, 0x6f, 0x6e, 0x6f, 0x72, 0x61, 0x69, 0x6c,
	0x2e, 0x76, 0x33, 0x2e, 0x49, 0x73, 0x73, 0x75, 0x65, 0x52, 0x65, 0x66, 0x52, 0x12, 0x6d, 0x65,
	0x72, 0x67, 0x65, 0x64, 0x49, 0x6e, 0x74, 0x6f, 0x49, 0x73, 0x73, 0x75, 0x65, 0x52, 0x65, 0x66,
	0x12, 0x48, 0x0a, 0x15, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x5f, 0x6f, 0x6e, 0x5f, 0x69,
	0x73, 0x73, 0x75, 0x65, 0x5f, 0x72, 0x65, 0x66, 0x73, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x15, 0x2e, 0x6d, 0x6f, 0x6e, 0x6f, 0x72, 0x61, 0x69, 0x6c, 0x2e, 0x76, 0x33, 0x2e, 0x49, 0x73,
	0x73, 0x75, 0x65, 0x52, 0x65, 0x66, 0x52, 0x12, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x4f,
	0x6e, 0x49, 0x73, 0x73, 0x75, 0x65, 0x52, 0x65, 0x66, 0x73, 0x12, 0x45, 0x0a, 0x13, 0x62, 0x6c,
	0x6f, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x73, 0x73, 0x75, 0x65, 0x5f, 0x72, 0x65, 0x66,
	0x73, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6d, 0x6f, 0x6e, 0x6f, 0x72, 0x61,
	0x69, 0x6c, 0x2e, 0x76, 0x33, 0x2e, 0x49, 0x73, 0x73, 0x75, 0x65, 0x52, 0x65, 0x66, 0x52, 0x11,
	0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x49, 0x73, 0x73, 0x75, 0x65, 0x52, 0x65, 0x66,
	0x73, 0x12, 0x40, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x3e, 0x0a, 0x0a, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x09, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x40, 0x0a, 0x0b, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x0a, 0x6d, 0x6f, 0x64, 0x69, 0x66,
	0x79, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x53, 0x0a, 0x15, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65,
	0x6e, 0x74, 0x5f, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x11,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x13, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74,
	0x4d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x4d, 0x0a, 0x12, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x5f, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x10, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x4d,
	0x6f, 0x64, 0x69, 0x66, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x4b, 0x0a, 0x11, 0x6f, 0x77, 0x6e,
	0x65, 0x72, 0x5f, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x13,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x0f, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x4d, 0x6f, 0x64, 0x69,
	0x66, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x2e, 0x0a, 0x10, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68,
	0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0d,
	0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x0f, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e,
	0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x22, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x5f, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52,
	0x09, 0x73, 0x74, 0x61, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1b, 0x0a, 0x06, 0x70, 0x68,
	0x61, 0x73, 0x65, 0x73, 0x18, 0x16, 0x20, 0x03, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52,
	0x06, 0x70, 0x68, 0x61, 0x73, 0x65, 0x73, 0x1a, 0x88, 0x01, 0x0a, 0x0e, 0x43, 0x6f, 0x6d, 0x70,
	0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x3d, 0x0a, 0x09, 0x63, 0x6f,
	0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1f, 0xfa,
	0x41, 0x1c, 0x0a, 0x1a, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x72, 0x62, 0x75, 0x67, 0x2e, 0x63, 0x6f,
	0x6d, 0x2f, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x44, 0x65, 0x66, 0x52, 0x09,
	0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x12, 0x37, 0x0a, 0x0a, 0x64, 0x65, 0x72,
	0x69, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e,
	0x6d, 0x6f, 0x6e, 0x6f, 0x72, 0x61, 0x69, 0x6c, 0x2e, 0x76, 0x33, 0x2e, 0x44, 0x65, 0x72, 0x69,
	0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x64, 0x65, 0x72, 0x69, 0x76, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x1a, 0x5b, 0x0a, 0x0a, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x12, 0x14, 0x0a, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x37, 0x0a, 0x0a, 0x64, 0x65, 0x72, 0x69, 0x76, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x6d, 0x6f, 0x6e,
	0x6f, 0x72, 0x61, 0x69, 0x6c, 0x2e, 0x76, 0x33, 0x2e, 0x44, 0x65, 0x72, 0x69, 0x76, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x64, 0x65, 0x72, 0x69, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a,
	0x5e, 0x0a, 0x0b, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x16,
	0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x37, 0x0a, 0x0a, 0x64, 0x65, 0x72, 0x69, 0x76, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x6d, 0x6f, 0x6e,
	0x6f, 0x72, 0x61, 0x69, 0x6c, 0x2e, 0x76, 0x33, 0x2e, 0x44, 0x65, 0x72, 0x69, 0x76, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x64, 0x65, 0x72, 0x69, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a,
	0x71, 0x0a, 0x09, 0x55, 0x73, 0x65, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2b, 0x0a, 0x04,
	0x75, 0x73, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x17, 0xfa, 0x41, 0x14, 0x0a,
	0x12, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x72, 0x62, 0x75, 0x67, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x55,
	0x73, 0x65, 0x72, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x12, 0x37, 0x0a, 0x0a, 0x64, 0x65, 0x72,
	0x69, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e,
	0x6d, 0x6f, 0x6e, 0x6f, 0x72, 0x61, 0x69, 0x6c, 0x2e, 0x76, 0x33, 0x2e, 0x44, 0x65, 0x72, 0x69,
	0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x64, 0x65, 0x72, 0x69, 0x76, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x3a, 0x3a, 0xea, 0x41, 0x37, 0x0a, 0x13, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x72, 0x62,
	0x75, 0x67, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x49, 0x73, 0x73, 0x75, 0x65, 0x12, 0x20, 0x70, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x7d, 0x2f,
	0x69, 0x73, 0x73, 0x75, 0x65, 0x73, 0x2f, 0x7b, 0x69, 0x73, 0x73, 0x75, 0x65, 0x7d, 0x22, 0x2a,
	0x0a, 0x10, 0x49, 0x73, 0x73, 0x75, 0x65, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x6c, 0x75,
	0x6d, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x22, 0x61, 0x0a, 0x08, 0x49, 0x73,
	0x73, 0x75, 0x65, 0x52, 0x65, 0x66, 0x12, 0x2e, 0x0a, 0x05, 0x69, 0x73, 0x73, 0x75, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x18, 0xfa, 0x41, 0x15, 0x0a, 0x13, 0x61, 0x70, 0x69, 0x2e,
	0x63, 0x72, 0x62, 0x75, 0x67, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x49, 0x73, 0x73, 0x75, 0x65, 0x52,
	0x05, 0x69, 0x73, 0x73, 0x75, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x65, 0x78, 0x74, 0x5f, 0x69, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d,
	0x65, 0x78, 0x74, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x22, 0xab, 0x05,
	0x0a, 0x0d, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x44, 0x0a, 0x0c, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x5f,
	0x64, 0x65, 0x66, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x21, 0xfa, 0x41, 0x1b, 0x0a, 0x19,
	0x61, 0x70, 0x69, 0x2e, 0x63, 0x72, 0x62, 0x75, 0x67, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x41, 0x70,
	0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x44, 0x65, 0x66, 0xe0, 0x41, 0x03, 0x52, 0x0b, 0x61, 0x70,
	0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x44, 0x65, 0x66, 0x12, 0x35, 0x0a, 0x09, 0x61, 0x70, 0x70,
	0x72, 0x6f, 0x76, 0x65, 0x72, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x42, 0x17, 0xfa, 0x41,
	0x14, 0x0a, 0x12, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x72, 0x62, 0x75, 0x67, 0x2e, 0x63, 0x6f, 0x6d,
	0x2f, 0x55, 0x73, 0x65, 0x72, 0x52, 0x09, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x72, 0x73,
	0x12, 0x41, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x29, 0x2e, 0x6d, 0x6f, 0x6e, 0x6f, 0x72, 0x61, 0x69, 0x6c, 0x2e, 0x76, 0x33, 0x2e, 0x41,
	0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x2e, 0x41, 0x70, 0x70,
	0x72, 0x6f, 0x76, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x3a, 0x0a, 0x08, 0x73, 0x65, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x07, 0x73, 0x65, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x2f, 0x0a, 0x06, 0x73, 0x65, 0x74, 0x74, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x17, 0xfa, 0x41, 0x14, 0x0a, 0x12, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x72, 0x62, 0x75, 0x67, 0x2e,
	0x63, 0x6f, 0x6d, 0x2f, 0x55, 0x73, 0x65, 0x72, 0x52, 0x06, 0x73, 0x65, 0x74, 0x74, 0x65, 0x72,
	0x12, 0x19, 0x0a, 0x05, 0x70, 0x68, 0x61, 0x73, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x03, 0xe0, 0x41, 0x03, 0x52, 0x05, 0x70, 0x68, 0x61, 0x73, 0x65, 0x12, 0x3a, 0x0a, 0x0c, 0x66,
	0x69, 0x65, 0x6c, 0x64, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x17, 0x2e, 0x6d, 0x6f, 0x6e, 0x6f, 0x72, 0x61, 0x69, 0x6c, 0x2e, 0x76, 0x33, 0x2e,
	0x46, 0x69, 0x65, 0x6c, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0b, 0x66, 0x69, 0x65, 0x6c,
	0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x22, 0xa4, 0x01, 0x0a, 0x0e, 0x41, 0x70, 0x70, 0x72,
	0x6f, 0x76, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1f, 0x0a, 0x1b, 0x41, 0x50,
	0x50, 0x52, 0x4f, 0x56, 0x41, 0x4c, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e,
	0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x10, 0x0a, 0x0c, 0x4e,
	0x45, 0x45, 0x44, 0x53, 0x5f, 0x52, 0x45, 0x56, 0x49, 0x45, 0x57, 0x10, 0x01, 0x12, 0x06, 0x0a,
	0x02, 0x4e, 0x41, 0x10, 0x02, 0x12, 0x14, 0x0a, 0x10, 0x52, 0x45, 0x56, 0x49, 0x45, 0x57, 0x5f,
	0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x45, 0x44, 0x10, 0x03, 0x12, 0x12, 0x0a, 0x0e, 0x52,
	0x45, 0x56, 0x49, 0x45, 0x57, 0x5f, 0x53, 0x54, 0x41, 0x52, 0x54, 0x45, 0x44, 0x10, 0x04, 0x12,
	0x0d, 0x0a, 0x09, 0x4e, 0x45, 0x45, 0x44, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x10, 0x05, 0x12, 0x0c,
	0x0a, 0x08, 0x41, 0x50, 0x50, 0x52, 0x4f, 0x56, 0x45, 0x44, 0x10, 0x06, 0x12, 0x10, 0x0a, 0x0c,
	0x4e, 0x4f, 0x54, 0x5f, 0x41, 0x50, 0x50, 0x52, 0x4f, 0x56, 0x45, 0x44, 0x10, 0x07, 0x3a, 0x5b,
	0xea, 0x41, 0x58, 0x0a, 0x1b, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x72, 0x62, 0x75, 0x67, 0x2e, 0x63,
	0x6f, 0x6d, 0x2f, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x12, 0x39, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x7d, 0x2f, 0x69, 0x73, 0x73, 0x75, 0x65, 0x73, 0x2f, 0x7b, 0x69, 0x73, 0x73, 0x75,
	0x65, 0x7d, 0x2f, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x2f, 0x7b, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x7d, 0x2a, 0x40, 0x0a, 0x0a, 0x44,
	0x65, 0x72, 0x69, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x16, 0x44, 0x45, 0x52,
	0x49, 0x56, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46,
	0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x45, 0x58, 0x50, 0x4c, 0x49, 0x43, 0x49,
	0x54, 0x10, 0x01, 0x12, 0x08, 0x0a, 0x04, 0x52, 0x55, 0x4c, 0x45, 0x10, 0x02, 0x2a, 0x4d, 0x0a,
	0x11, 0x49, 0x73, 0x73, 0x75, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x12, 0x15, 0x0a, 0x11, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50,
	0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x41, 0x43, 0x54,
	0x49, 0x56, 0x45, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x44,
	0x10, 0x02, 0x12, 0x08, 0x0a, 0x04, 0x53, 0x50, 0x41, 0x4d, 0x10, 0x03, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_api_v3_api_proto_issue_objects_proto_rawDescOnce sync.Once
	file_api_v3_api_proto_issue_objects_proto_rawDescData = file_api_v3_api_proto_issue_objects_proto_rawDesc
)

func file_api_v3_api_proto_issue_objects_proto_rawDescGZIP() []byte {
	file_api_v3_api_proto_issue_objects_proto_rawDescOnce.Do(func() {
		file_api_v3_api_proto_issue_objects_proto_rawDescData = protoimpl.X.CompressGZIP(file_api_v3_api_proto_issue_objects_proto_rawDescData)
	})
	return file_api_v3_api_proto_issue_objects_proto_rawDescData
}

var file_api_v3_api_proto_issue_objects_proto_enumTypes = make([]protoimpl.EnumInfo, 4)
var file_api_v3_api_proto_issue_objects_proto_msgTypes = make([]protoimpl.MessageInfo, 12)
var file_api_v3_api_proto_issue_objects_proto_goTypes = []interface{}{
	(Derivation)(0),                   // 0: monorail.v3.Derivation
	(IssueContentState)(0),            // 1: monorail.v3.IssueContentState
	(Comment_Type)(0),                 // 2: monorail.v3.Comment.Type
	(ApprovalValue_ApprovalStatus)(0), // 3: monorail.v3.ApprovalValue.ApprovalStatus
	(*Comment)(nil),                   // 4: monorail.v3.Comment
	(*FieldValue)(nil),                // 5: monorail.v3.FieldValue
	(*Issue)(nil),                     // 6: monorail.v3.Issue
	(*IssuesListColumn)(nil),          // 7: monorail.v3.IssuesListColumn
	(*IssueRef)(nil),                  // 8: monorail.v3.IssueRef
	(*ApprovalValue)(nil),             // 9: monorail.v3.ApprovalValue
	(*Comment_Attachment)(nil),        // 10: monorail.v3.Comment.Attachment
	(*Comment_Amendment)(nil),         // 11: monorail.v3.Comment.Amendment
	(*Issue_ComponentValue)(nil),      // 12: monorail.v3.Issue.ComponentValue
	(*Issue_LabelValue)(nil),          // 13: monorail.v3.Issue.LabelValue
	(*Issue_StatusValue)(nil),         // 14: monorail.v3.Issue.StatusValue
	(*Issue_UserValue)(nil),           // 15: monorail.v3.Issue.UserValue
	(*timestamp.Timestamp)(nil),       // 16: google.protobuf.Timestamp
}
var file_api_v3_api_proto_issue_objects_proto_depIdxs = []int32{
	1,  // 0: monorail.v3.Comment.state:type_name -> monorail.v3.IssueContentState
	2,  // 1: monorail.v3.Comment.type:type_name -> monorail.v3.Comment.Type
	16, // 2: monorail.v3.Comment.create_time:type_name -> google.protobuf.Timestamp
	11, // 3: monorail.v3.Comment.amendments:type_name -> monorail.v3.Comment.Amendment
	10, // 4: monorail.v3.Comment.attachments:type_name -> monorail.v3.Comment.Attachment
	0,  // 5: monorail.v3.FieldValue.derivation:type_name -> monorail.v3.Derivation
	1,  // 6: monorail.v3.Issue.state:type_name -> monorail.v3.IssueContentState
	14, // 7: monorail.v3.Issue.status:type_name -> monorail.v3.Issue.StatusValue
	15, // 8: monorail.v3.Issue.owner:type_name -> monorail.v3.Issue.UserValue
	15, // 9: monorail.v3.Issue.cc_users:type_name -> monorail.v3.Issue.UserValue
	13, // 10: monorail.v3.Issue.labels:type_name -> monorail.v3.Issue.LabelValue
	12, // 11: monorail.v3.Issue.components:type_name -> monorail.v3.Issue.ComponentValue
	5,  // 12: monorail.v3.Issue.field_values:type_name -> monorail.v3.FieldValue
	8,  // 13: monorail.v3.Issue.merged_into_issue_ref:type_name -> monorail.v3.IssueRef
	8,  // 14: monorail.v3.Issue.blocked_on_issue_refs:type_name -> monorail.v3.IssueRef
	8,  // 15: monorail.v3.Issue.blocking_issue_refs:type_name -> monorail.v3.IssueRef
	16, // 16: monorail.v3.Issue.create_time:type_name -> google.protobuf.Timestamp
	16, // 17: monorail.v3.Issue.close_time:type_name -> google.protobuf.Timestamp
	16, // 18: monorail.v3.Issue.modify_time:type_name -> google.protobuf.Timestamp
	16, // 19: monorail.v3.Issue.component_modify_time:type_name -> google.protobuf.Timestamp
	16, // 20: monorail.v3.Issue.status_modify_time:type_name -> google.protobuf.Timestamp
	16, // 21: monorail.v3.Issue.owner_modify_time:type_name -> google.protobuf.Timestamp
	3,  // 22: monorail.v3.ApprovalValue.status:type_name -> monorail.v3.ApprovalValue.ApprovalStatus
	16, // 23: monorail.v3.ApprovalValue.set_time:type_name -> google.protobuf.Timestamp
	5,  // 24: monorail.v3.ApprovalValue.field_values:type_name -> monorail.v3.FieldValue
	1,  // 25: monorail.v3.Comment.Attachment.state:type_name -> monorail.v3.IssueContentState
	0,  // 26: monorail.v3.Issue.ComponentValue.derivation:type_name -> monorail.v3.Derivation
	0,  // 27: monorail.v3.Issue.LabelValue.derivation:type_name -> monorail.v3.Derivation
	0,  // 28: monorail.v3.Issue.StatusValue.derivation:type_name -> monorail.v3.Derivation
	0,  // 29: monorail.v3.Issue.UserValue.derivation:type_name -> monorail.v3.Derivation
	30, // [30:30] is the sub-list for method output_type
	30, // [30:30] is the sub-list for method input_type
	30, // [30:30] is the sub-list for extension type_name
	30, // [30:30] is the sub-list for extension extendee
	0,  // [0:30] is the sub-list for field type_name
}

func init() { file_api_v3_api_proto_issue_objects_proto_init() }
func file_api_v3_api_proto_issue_objects_proto_init() {
	if File_api_v3_api_proto_issue_objects_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_api_v3_api_proto_issue_objects_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Comment); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v3_api_proto_issue_objects_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FieldValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v3_api_proto_issue_objects_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Issue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v3_api_proto_issue_objects_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IssuesListColumn); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v3_api_proto_issue_objects_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IssueRef); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v3_api_proto_issue_objects_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApprovalValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v3_api_proto_issue_objects_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Comment_Attachment); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v3_api_proto_issue_objects_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Comment_Amendment); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v3_api_proto_issue_objects_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Issue_ComponentValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v3_api_proto_issue_objects_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Issue_LabelValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v3_api_proto_issue_objects_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Issue_StatusValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v3_api_proto_issue_objects_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Issue_UserValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_api_v3_api_proto_issue_objects_proto_rawDesc,
			NumEnums:      4,
			NumMessages:   12,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_api_v3_api_proto_issue_objects_proto_goTypes,
		DependencyIndexes: file_api_v3_api_proto_issue_objects_proto_depIdxs,
		EnumInfos:         file_api_v3_api_proto_issue_objects_proto_enumTypes,
		MessageInfos:      file_api_v3_api_proto_issue_objects_proto_msgTypes,
	}.Build()
	File_api_v3_api_proto_issue_objects_proto = out.File
	file_api_v3_api_proto_issue_objects_proto_rawDesc = nil
	file_api_v3_api_proto_issue_objects_proto_goTypes = nil
	file_api_v3_api_proto_issue_objects_proto_depIdxs = nil
}
