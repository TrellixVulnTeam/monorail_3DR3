// Copyright 2018 The LUCI Authors. All rights reserved.
// Use of this source code is governed under the Apache License, Version 2.0
// that can be found in the LICENSE file.

syntax = "proto3";

import "google/protobuf/timestamp.proto";
import "infra/appengine/crosskylabadmin/api/fleet/v1/common.proto";

package crosskylabadmin.fleet;

option go_package = "fleet";


// Inventory service helps manage ChromeOS Dut Pools.
service Inventory {
  // ///////////////////////////////////////////////////////////////////////////
  // DUT addition / update RPCs

  // Deploy a DUT.
  //
  // This RPC must be used to deploy a DUT that does not already exist in the
  // inventory. See RedeployDutStart for redeploying an existing DUT.
  //
  // This RPC does not wait for the DUT deployment to finish. Clients may use
  // GetDutDeploymentStatus to track progress.
  //
  // Request options allow control over the exact DUT preparation steps
  // executed, but automated repair is always attempted as part of the
  // deployment process.
  rpc DeployDut(DeployDutRequest) returns (DeployDutResponse);

  // Redeploy a DUT.
  //
  // This RPC must be used to deploy a DUT that does not already exist in the
  // inventory. See RedeployDutStart for redeploying an existing DUT.
  //
  // This RPC does not wait for the DUT deployment to finish. Clients may use
  // GetDutDeploymentStatus to track progress.
  //
  // Request options allow control over the exact DUT preparation steps
  // executed, but automated repair is always attempted as part of the
  // deployment process.
  rpc RedeployDut(RedeployDutRequest) returns (RedeployDutResponse);

  // Get the status of a DUT deployment initiated by DeployDut or RedeployDut.
  rpc GetDeploymentStatus(GetDeploymentStatusRequest) returns
      (GetDeploymentStatusResponse);

  // Delete DUTs from inventory.
  rpc DeleteDuts(DeleteDutsRequest) returns (DeleteDutsResponse);

  // ///////////////////////////////////////////////////////////////////////////
  // DUT pool balancing RPCs

  // BalancePools is the RPC used by balance pool efforts issued from
  // automatic balance pool cron job or users (skylab ensure-pool-healthy).
  // The above 2 RPCs will be deprecated.
  rpc BalancePools(BalancePoolsRequest) returns (BalancePoolsResponse);

  // ResizePool changes the size of the target DUT pool.
  //
  // ResizePool borrows or returns extra DUTs from the spare pool.
  //
  // ResizePool does not consider DUT health. Clients should usually call
  // EnsurePoolHealthy following a ResizePool operation.
  //
  // ResizePool never makes partial changes. In case of an error, no inventory
  // changes are made.
  rpc ResizePool(ResizePoolRequest) returns (ResizePoolResponse);

  // ///////////////////////////////////////////////////////////////////////////
  // Server database manipulation RPCs

  // RemoveDutsFromDrones removes the given duts from drones.
  rpc RemoveDutsFromDrones(RemoveDutsFromDronesRequest) returns (RemoveDutsFromDronesResponse);

  // AssignDutsToDrones assigns the given duts to drones.
  rpc AssignDutsToDrones(AssignDutsToDronesRequest) returns (AssignDutsToDronesResponse);

  // ///////////////////////////////////////////////////////////////////////////
  // Inventory ReadOnly RPCs

  // ListServers lists the servers in the current environment.
  rpc ListServers(ListServersRequest) returns (ListServersResponse);

  // GetDutInfo returns inventory information about a single DUT.
  //
  // This RPC returns possibly cached data about a single DUT. The cache is
  // updated asynchronously and guaranteed to be a relatively fresh snapshot of
  // the inventory data.
  rpc GetDutInfo(GetDutInfoRequest) returns (GetDutInfoResponse);

  // GetDroneConfig returns the inventory configuration for a drone.
  //
  // This RPC returns possibly cached data.
  rpc GetDroneConfig(GetDroneConfigRequest) returns (GetDroneConfigResponse);

  // ListRemovedDuts lists removed DUTs (DUTs not assigned to any drone).
  rpc ListRemovedDuts(ListRemovedDutsRequest) returns (ListRemovedDutsResponse);

  // ///////////////////////////////////////////////////////////////////////////
  // RPCs used internally by the infrastructure. Not for end-user tools.

  // PushInventoryToQueen is called by a cron job.
  rpc PushInventoryToQueen(PushInventoryToQueenRequest) returns (PushInventoryToQueenResponse);

  // UpdateDutLabels sets the SchedulableLabels of a DUT.
  //
  // This API should only be used by the Skylab infrastructure
  // internally.  It is used by repair tasks to update DUT labels.
  rpc UpdateDutLabels(UpdateDutLabelsRequest) returns (UpdateDutLabelsResponse);

  rpc BatchUpdateDuts(BatchUpdateDutsRequest) returns (BatchUpdateDutsResponse);

  // UpdateCachedInventory updates the cached inventory data.
  //
  // Cached inventory data is used to serve read-only inventory RPCs.
  // Cached inventory data is not used for inventory modification RPCs.
  rpc UpdateCachedInventory(UpdateCachedInventoryRequest)
      returns (UpdateCachedInventoryResponse);

  // Update device config to inventory and local datastore.
  //
  // Updating device config in inventory will be forbidden via repair jobs.
  // Instead, this cron job will sync up-to-date device config to inventory.
  //
  // It also caches device config to local datastore, which is used for filtering
  // out device config in future DUT label updating.
  rpc UpdateDeviceConfig(UpdateDeviceConfigRequest) returns (UpdateDeviceConfigResponse);

  // GetStableVersion reads the stable version for a particular DUT from datastore
  //
  // There is intentionally no RPC for overwtiting the stable version with arbitrary content.
  rpc GetStableVersion(GetStableVersionRequest) returns (GetStableVersionResponse);

  // DumpStableVersionToDatastore reads the stable version from the LUCI config file
  // and writes it to datastore.
  rpc DumpStableVersionToDatastore(DumpStableVersionToDatastoreRequest) returns (DumpStableVersionToDatastoreResponse);

  // Report inventory metrics.
  rpc ReportInventory(ReportInventoryRequest) returns (ReportInventoryResponse);

  // Backfill (part of) manufacturing config.
  rpc UpdateManufacturingConfig(UpdateManufacturingConfigRequest) returns (UpdateManufacturingConfigResponse);
}

message UpdateManufacturingConfigRequest {
}

message UpdateManufacturingConfigResponse {
  string change_url = 1;
}

message ReportInventoryRequest {
  // Skip reporting inventory metrics after we migrate to inventory v2.
  bool skip_inventory_metrics = 1;
}
message ReportInventoryResponse {}

message PushInventoryToQueenRequest {}
message PushInventoryToQueenResponse {}

message UpdateDeviceConfigRequest {
}

message UpdateDeviceConfigResponse {
}

message DeployDutRequest {
  // new_specs are the device specs this deployment effort should set.
  //
  // This should be a serialized inventory.CommonDeviceSpecs protobuf.
  //
  // Note that deploy will use new_specs to initialize the device specs for the
  // DUT, but the specs (in particular labels) may be updated further as a
  // result of the deployment process itself.
  //
  // new_specs must satisfy following sanity conditions:
  // - inventory.CommonDeviceSpecs.Id must be unset.
  repeated bytes new_specs = 1;

  // The deployment actions to take.
  //
  // Automated repair is always attempted at the end of deployment actions.
  DutDeploymentActions actions = 2;

  DutDeploymentOptions options = 3;
}

message DeployDutResponse {
  // Opaque ID to be used for future GetDeploymentStatus requests.
  string deployment_id = 1;
}

message RedeployDutRequest {
  // old_specs are the old device specs for a DUT already in the inventory that
  // the client wants to re-deploy.
  //
  // This should be a serialized inventory.CommonDeviceSpecs protobuf.
  //
  // old_specs must satisfy following sanity conditions:
  // - inventory.CommonDeviceSpecs.Id must be set. It will be used to identify
  //   the dut to deploy.
  bytes old_specs = 1;

  // new_specs are the device specs this redeployment effort should set.
  //
  // This should be a serialized inventory.CommonDeviceSpecs protobuf.
  //
  // Note that deploy will use new_specs to initialize the device specs for the
  // DUT, but the specs (in particular labels) may be updated further as a
  // result of the deployment process itself.
  //
  // new_specs must satisfy following sanity conditions:
  // - inventory.CommonDeviceSpecs.Id must be set and be identical to the one in
  //   old_specs.
  bytes new_specs = 2;

  DutDeploymentActions actions = 3;

  DutDeploymentOptions options = 4;
}

message RedeployDutResponse {
  // Opaque ID to be used for future GetDeploymentStatus requests.
  string deployment_id = 1;
}

message GetDeploymentStatusRequest {
  // An opaque ID returned by earlier deployment RPCs.
  string deployment_id = 1;
}

message GetDeploymentStatusResponse{
  enum Status {
    DUT_DEPLOYMENT_STATUS_INVALID = 0;

    DUT_DEPLOYMENT_STATUS_IN_PROGRESS = 1;

    DUT_DEPLOYMENT_STATUS_SUCCEEDED = 2;

    DUT_DEPLOYMENT_STATUS_FAILED = 3;
  }
  Status status = 2;

  // URL for the inventory change for this DUT deployment, if any.
  //
  // This change only includes any explicit inventory changes made for
  // deployment. Itj does not include any inventory changes that occur as a
  // consequence of the automated repair attempt at the end of deployment.
  string change_url = 3;

  // The Skylab task created for the DUT deployment.
  string task_url = 4;

  // An explanatory message for the deployment status.
  string message = 5;
}

message DeleteDutsRequest {
  // inventory.CommonDeviceSpecs.Hostname for the DUT to delete.
  repeated string hostnames = 1;
}

message DeleteDutsResponse {
  // URL for the inventory change that removed the requested DUTs.
  string change_url = 1;

  // ids lists the inventory IDs of the DUTs deleted.
  repeated string ids = 2;
}

message DutDeploymentActions {
  // Stage the requested Chrome OS image on the USB attached to servo and DUT.
  bool stage_image_to_usb = 1;

  // Install DUT firmware from the image staged on USB.
  bool install_firmware = 2;

  // Install ChromeOS test image from the image staged on USB.
  bool install_test_image = 3;

  // Skip deployment task.
  bool skip_deployment = 4;

  // Setup labstation for deployment.
  bool setup_labstation = 5;

  // Run pre-deploy verification.
  bool run_pre_deploy_verification = 6;
}

message DutDeploymentOptions {
  // Assign a valid servo port if none is provided in the included device specs.
  bool assign_servo_port_if_missing = 1;
}

message EnsurePoolHealthyRequest {
  option deprecated = true;
  // dut_selectors filters the set of DUTs considered by EnsurePoolHealthy.
  //
  // All pool changes occurs within this selected set of DUTs.
  // It is an error to omit dut_selector because that would allow
  // unconstrained DUT reallocation between pools, disregarding all other
  // labels.
  DutSelector dut_selector = 1;

  // target_pool is the pool that should contain healthy DUTs.
  string target_pool = 2;

  // spare_pool is the pool from which healthy DUTs will be swapped into
  // target_pool.
  string spare_pool = 3;

  // max_unhealthy_duts is the maximum number of DUTs that may be unhealthy in
  // the target pool before any action is taken.
  //
  // max_unhealthy_duts is meaningful only when it has a positive value (> 0).
  //
  // If the total number of unhealthy DUTs is above this threshold,
  // EnsurePoolHealthy does not change DUT pools and returns a
  // NOT_ENOUGH_HEALTHY_SPARES failure.
  int32 max_unhealthy_duts = 4;

  message Options {
    // If dryrun is true, no inventory changes are made. Proposed changes are
    // returned.
    bool dryrun = 1;
  }
  Options options = 5;
}

message EnsurePoolHealthyResponse {
  enum Failure {
    FAILURE_INVALID = 0;

    // Target pool had more than max_unhealthy_duts unhealthy duts before any
    // action was taken.
    TOO_MANY_UNHEALTHY_DUTS = 1;

    // Spare pool did not have enough healthy DUTs to make sure all DUTs in
    // target pool are healthy. In this failure mode, the available healthy
    // spare DUTs do get transferred to the target pool.
    NOT_ENOUGH_HEALTHY_SPARES = 2;
  }

  // Failures encountered during pool balancing.
  //
  // All the remaining fields of the response are still valid in the presence of
  // failures.
  repeated Failure failures = 1;

  // target_pool_status summarizes the target pool after the required
  // inventory changes are executed.
  //
  // Within the pool, only DUTs selected via dut_selector are summarized.
  PoolStatus target_pool_status = 2;

  // spare_pool_status summarizes the spare pool after the required
  // inventory changes are executed.
  //
  // Within the pool, only DUTs selected via dut_selector are summarized.
  PoolStatus spare_pool_status = 3;

  // url is an opaque URL for this inventory change.
  //
  // It is intended to be the gerrit CL corresponding to the change, or the
  // gitiles path for a committed changelist for the change.
  //
  // url is empty in dryrun mode.
  string url = 4;

  // changes correspond to the proposed or executed pool changes to ensure
  // inventory in response to various API methods calls.
  repeated PoolChange changes = 5;
}

message EnsurePoolHealthyForAllModelsRequest {
  option deprecated = true;
  // target_pool is the pool that should contain healthy DUTs.
  string target_pool = 1;

  // spare_pool is the pool from which healthy DUTs will be swapped into
  // target_pool.
  string spare_pool = 2;

  // max_unhealthy_duts is the maximum number of DUTs that may be unhealthy in
  // the target pool before any action is taken.
  //
  // max_unhealthy_duts is meaningful only when it has a positive value (> 0).
  //
  // If the total number of unhealthy DUTs is above this threshold,
  // EnsurePoolHealthy does not change DUT pools and returns a
  // NOT_ENOUGH_HEALTHY_SPARES failure.
  int32 max_unhealthy_duts = 3;
}

message EnsurePoolHealthyForAllModelsResponse {
  option deprecated = true;
  // model_result maps a model to the EnsurePoolHealthyResponse for that model.
  map<string, EnsurePoolHealthyResponse> model_result = 1;
}

message BalancePoolsRequest {
  // dut_selectors filters the set of DUTs considered by EnsurePoolHealthy.
  //
  // It can be empty, but it would allow DUT reallocation between pools
  // for all models.
  DutSelector dut_selector = 1;

  // target_pool is the pool that should contain healthy DUTs.
  string target_pool = 2;

  // spare_pool is the pool from which healthy DUTs will be swapped into
  // target_pool.
  string spare_pool = 3;

  // max_unhealthy_duts is the maximum number of DUTs that may be unhealthy in
  // the target pool before any action is taken.
  //
  // max_unhealthy_duts is meaningful only when it has a positive value (> 0).
  //
  // If the total number of unhealthy DUTs is above this threshold,
  // EnsurePoolHealthy does not change DUT pools and returns a
  // NOT_ENOUGH_HEALTHY_SPARES failure.
  int32 max_unhealthy_duts = 4;

  message Options {
    // If dryrun is true, no inventory changes are made. Proposed changes are
    // returned.
    bool dryrun = 1;
  }
  Options options = 5;
}

message BalancePoolsResponse {
  // model_result maps a model to the EnsurePoolHealthyResponse for that model.
  map<string, EnsurePoolHealthyResponse> model_result = 1;

  // generated_change_url is an opaque URL for this inventory change.
  //
  // It is intended to be the gerrit CL corresponding to the change, or the
  // gitiles path for a committed changelist for the change. Example CL:
  // https://crrev.com/i/1814710
  //
  // generated_change_url is empty in dryrun mode.
  string generated_change_url = 2;
}

message ResizePoolRequest {
  // dut_selectors filters the set of DUTs considered by ResizePool.
  //
  // All pool changes occurs within this selected set of DUTs.
  // It is an error to omit dut_selector because that would allow
  // unconstrained DUT reallocation between pools, disregarding all other
  // labels.
  DutSelector dut_selector = 1;

  // target_pool is the pool that should contain healthy DUTs.
  string target_pool = 2;

  // target_pool_size is the requested size for the target_pool.
  int32 target_pool_size = 3;

  // spare_pool is the pool to borrow needed DUTs from and return extra DUTs to.
  string spare_pool = 4;
}

message ResizePoolResponse {
  // url is an opaque URL for this inventory change.
  //
  // It is intended to be the gerrit CL corresponding to the change, or the
  // gitiles path for a committed changelist for the change.
  string url = 1;

  // changes correspond to the proposed or executed pool changes to inventory in
  // response to the ResizePool RPC.
  repeated PoolChange changes = 2;
}

// NEXT TAG: 4
message DutSelector {
  string hostname = 2;

  // ID assigned to the DUT in the inventory.
  string id = 3;

  string model = 1;
}

message PoolStatus {
  // size is the number of DUTs in this pool.
  int32 size = 1;

  // healthy_count is the number of healthy DUTs in this pool.
  int32 healthy_count = 2;
}

// PoolChange is a single change of DUT pools in the inventory.
message PoolChange {
  // dut_id is the inventory ID of the DUT whose pool was modified.
  string dut_id = 1;

  // old_pool is the pool the DUT was removed from.
  string old_pool = 2;

  // new_pool is the pool the DUT was moved to.
  string new_pool = 3;
}

message RemoveDutsFromDronesRequest {
  // NEXT TAG: 5
  message Item {
    // dut_id is the id of a DUT to be removed.
    //
    // Exactly one of dut_id or hostname must be provided.
    string dut_id = 1;

    // dut_hostname is the id of a DUT to be removed.
    //
    // Exactly one of dut_id or dut_hostname must be provided.
    string dut_hostname = 3;

    // drone_hostname is the drone to remove the dut from.
    //
    // If specified, the DUT must currently be assigned to the
    // specified drone.
    //
    // This is ignored if the DUT is assigned to a queen drone.
    string drone_hostname = 2;

    // removal_reason is the reason for removal.
    //
    // This is a serialized inventory.RemovalReason protobuf.
    bytes removal_reason = 4;
  }

  // removals is the set of Duts to remove.
  repeated Item removals = 1;
}

message RemoveDutsFromDronesResponse {
  message Item {
    // dut_id is the id of a dut that was removed.
    string dut_id = 1;

    // drone_hostname is the hostname of the drone that it the Dut was removed
    // from.
    string drone_hostname = 2;
  }

  // removed is the set of Duts that were removed.
  repeated Item removed = 1;

  // url is an opaque URL for this inventory change.
  //
  // It is intended to be the gerrit CL corresponding to the change, or the
  // gitiles path for a committed changelist for the change.
  string url = 2;
}

message AssignDutsToDronesRequest {
  // NEXT TAG: 4
  message Item {
    // dut_id is the id of a DUT to assign to a drone.
    //
    // Exactly one of dut_id or hostname must be provided.
    string dut_id = 1;

    // dut_hostname is the hostname of the DUT to assign to the drone.
    //
    // Exactly one of dut_id or hostname must be provided.
    string dut_hostname = 3;

    // drone_hostname is deprecated and does nothing.
    string drone_hostname = 2 [deprecated=true];
  }

  // assignments is the set of Duts to assign.
  repeated Item assignments = 1;
}

message AssignDutsToDronesResponse {
  message Item {
    // dut_id is the id of a dut that was assigned to a drone.
    string dut_id = 1;

    // drone_hostname is the drone the dut was assigned to.
    string drone_hostname = 2;
  }

  // assigned is the set of Duts that were removed.
  repeated Item assigned = 1;

  // url is an opaque URL for this inventory change.
  //
  // It is intended to be the gerrit CL corresponding to the change, or the
  // gitiles path for a committed changelist for the change.
  string url = 2;
}

message ListServersRequest {
  message Filter {
    // Role of servers to list; if absent, list servers of all roles.
    ServerRole role = 1;
  }

  Filter filter = 1;
}

message ListServersResponse {
  repeated Server servers = 1;
}

message GetDutInfoRequest {
  // id of the DUT to get info for.
  //
  // One of id or hostname is required.
  string id = 1;

  // hostname of the DUT to get info for.
  //
  // One of id or hostname is required.
  string hostname = 2;

  // Indicates if the request must be routed to v1. Otherwise the routing will
  // be determined by traffic control algorithm.
  // TODO(guocb) Remove this after inventory v2 migration.
  bool must_from_v1 = 3;
}

message GetDutInfoResponse {
  // spec is the device spec for the requested DUT.
  //
  // This is a serialized inventory.DeviceUnderTest protobuf.
  bytes spec = 1;

  // Timestamp of the latest update of the cached specs in this response.
  //
  // Returned specs are guaranteed to be up-to-date with the source of truth as
  // of this timestamp.
  google.protobuf.Timestamp updated = 2;
}

message GetDroneConfigRequest {
  // hostname of the drone, fully qualified.
  string hostname = 1;
}

message GetDroneConfigResponse {
  message Dut {
    // id of the DUT.
    string id = 1;
    // hostname of the DUT, unqualified.
    string hostname = 2;
  }
  // duts assigned to the drone.
  repeated Dut duts = 1;
}

message ListRemovedDutsRequest {}

message ListRemovedDutsResponse {
  message Dut {
    // id of the DUT.
    string id = 1;
    // hostname of the DUT.
    string hostname = 2;
    // bug is a link to a bug explaining why the DUT is removed.
    string bug = 3;
    // comment is a short comment explaining why the DUT is removed.
    string comment = 4;
    // expire_time indicates when the removal bug should be revisited
    // so the DUT is not forgotten.
    google.protobuf.Timestamp expire_time = 5;
    // model of the DUT.
    string model = 6;
  }
  // duts that are removed.
  repeated Dut duts = 1;
}

message UpdateDutLabelsRequest {
  string dut_id = 1;
  // labels are the labels for the DUT that the client changed.  This
  // should be a serialized protobuf of inventory.SchedulableLabels.
  // Any labels that shouldn't be updated are ignored.
  bytes labels = 2;
  // reason is some string to provide context for the update.  This
  // should contain a URL to the task that triggered the change.  This
  // should not be capitalized since it will get formatted with other
  // information.
  string reason = 3;
  // old_labels are the old labels for the DUT before this update. Same
  // format with labels.
  bytes old_labels = 4;
}

message UpdateDutLabelsResponse {
  // url is a URL associated with the label update.
  //
  // It is usually a Gerrit or Gitiles URL.
  string url = 1;
}

message BatchUpdateDutsRequest {
  repeated string hostnames = 1 [deprecated=true];
  string pool = 2 [deprecated=true];
  repeated DutProperty dut_properties = 3;
}

message DutProperty {
  string hostname = 1;
  string pool = 2;

  message Rpm {
    string powerunit_hostname = 1;
    string powerunit_outlet = 2;
  }
  Rpm rpm = 3;
}

message BatchUpdateDutsResponse {
  // A Gerrit URL with the label update.
  string url = 1;
}

message UpdateCachedInventoryRequest {}
message UpdateCachedInventoryResponse {}

// next tag: 4
message GetStableVersionRequest {
    // TODO(gregorynisbet): remove support for looking up
    // stable version information by buildTarget + model
    string buildTarget = 1;
    string model = 2;
    // NOTE: {hostname} and {buildTarget, model} are alternatives
    string hostname = 3;
}

// next tag: 5
message GetStableVersionResponse {
    string crosVersion = 1;
    string firmwareVersion = 2;
    string faftVersion = 3;
    string servoCrosVersion = 4;
}

message DumpStableVersionToDatastoreRequest {}
message DumpStableVersionToDatastoreResponse {}
