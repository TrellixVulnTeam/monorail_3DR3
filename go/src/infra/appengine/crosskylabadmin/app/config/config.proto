// Copyright 2018 The LUCI Authors. All rights reserved.
// Use of this source code is governed under the Apache License, Version 2.0
// that can be found in the LICENSE file.

syntax = "proto3";

import "google/protobuf/duration.proto";

package crosskylabadmin.config;

option go_package = "config";

// Note: docstrings use generated go style variable names.

// Config is the configuration data served by luci-config for this app.
message Config {
  // AccessGroup is the luci-auth group controlling access to admin app APIs.
  string access_group = 1;

  // Swarming contains information about the Swarming instance that hosts the
  // bots managed by this app.
  Swarming swarming = 2;

  // Tasker contains configuration data specific to the Tasker API endpoints.
  Tasker tasker = 3;

  // Cron contains the configuration data specific to cron jobs on this app.
  Cron cron = 4;

  // Inventory contains configuration information about skylab inventory
  // repo.
  Inventory inventory = 5;

  // endpoint contains configuration of specific API endpoints.
  Endpoint endpoint = 6;

  // RPCcontrol controls rpc traffic.
  RPCControl rpc_control = 7;

  // StableVersionConfig determines the location of stable version related information
  StableVersionConfig stable_version_config = 8;

  // InventoryProvider contains configuration of inventory provider, e.g.
  // inventory v2 service.
  InventoryProvider inventory_provider = 9;
}

// Swarming contains information about the Swarming instance that hosts the bots
// managed by this app.
message Swarming {
  // Host is the swarming instance hosting skylab bots.
  string host = 1;

  // BotPool is the swarming pool containing skylab bots.
  string bot_pool = 2;

  // FleetAdminTaskTag identifies all tasks created by the fleet admin app.
  string fleet_admin_task_tag = 3;

  // LuciProjectTag is the swarming tag that associates the task with a
  // luci project, allowing milo to work with the swarming UI.
  string luci_project_tag = 4;
}

// Tasker contains configuration data specific to the Tasker API endpoints.
message Tasker {
  // BackgroundTaskExecutionTimeoutSecs is the execution timeout (in
  // seconds) for background tasks created by tasker.
  int64 background_task_execution_timeout_secs = 1;

  // BackgroundTaskExpirationSecs is the expiration time (in seconds) for
  // background tasks created by tasker.
  int64 background_task_expiration_secs = 2;

  // LogdogHost is the Logdog host to use for logging from the created tasks.
  string logdog_host = 3;

  // AdminTaskServiceAccount is the name of the service account to use for admin
  // tasks.
  string admin_task_service_account = 4;
}

// Cron contains the configuration data specific to cron jobs on this app.
message Cron {
  // FleetAdminTaskPriority is the swarming task priority of created tasks.
  //
  // This must be numerically smaller (i.e. more important) than Skylab's test
  // task priority range [49-255] and numerically larger than the minimum
  // allowed Swarming priority (20) for non administrator users.
  int64 fleet_admin_task_priority = 1;

  // EnsureTasksCount is the number of background tasks maintained against
  // each bot.
  int32 ensure_tasks_count = 2;

  // RepairIdleDuration is the duration for which a bot in the fleet must have
  // been idle for a repair task to be created against it.
  google.protobuf.Duration repair_idle_duration = 3;

  // RepairAttemptDelayDuration is the time between successive attempts at
  // repairing repair failed bots in the fleet.
  google.protobuf.Duration repair_attempt_delay_duration = 4;

  // Configuration of automatic pool balancing to keep critical pools healthy.
  PoolBalancer pool_balancer = 5;
}

// next tag: 11
message RPCControl {
  // Configuration of if disabling some rpc calls. It's used in experimental stage.
  // Once an RPC call is verified to be working/useless, it will be added/deleted.
  bool disable_ensure_background_tasks = 1;
  bool disable_ensure_critical_pools_healthy = 2;
  bool disable_push_bots_for_admin_tasks = 3;
  bool disable_refresh_bots = 4;
  bool disable_refresh_inventory = 5;
  bool disable_trigger_repair_on_idle = 6;
  bool disable_trigger_repair_on_repair_failed = 7;
  bool disable_push_labstations_for_repair = 8;
  bool disable_dump_stable_version_to_datastore = 9;
  bool disable_push_duts_for_admin_audit = 10;
}

// Skylab inventory is stored in a git project. A Gitiles server as well as
// Gerrit review server are used by this app to view and update the inventory
// data.
message Inventory {
  // Gitiles server hosting inventory project.
  // e.g. chromium.googlesource.com
  string gitiles_host = 1;

  // Gerrit code review server hosting inventory project.
  // e.g. chromium-review.googlesource.com
  string gerrit_host = 2;

  // Git project containing the inventory data.
  string project = 3;

  // Git branch from the inventory project to be used.
  string branch = 4;

  string data_path = 5 [deprecated=true];

  // Inventory environment managed by this instance of the app.
  // e.g. ENVIRONMENT_STAGING
  string environment = 6;

  // Path to the infrastructure inventory data file within the git project.
  // e.g. data/skylab/server_db.textpb
  string infrastructure_data_path = 7;

  // Path to the lab inventory data file within the git project.
  // e.g. data/skylab/lab.textpb
  string lab_data_path = 8;

  // dut_info_cache_validty is the amount of time cached inventory information
  // about a DUT is valid after being refreshed.
  //
  // This duration should be long enough to
  // (1) smooth over any refresh failures due to backing gitiles flake or quota
  //     issues.
  // (2) Allow a human to interfere and fix corrupt inventory data about (some)
  //     DUTs.
  //
  // A DUT will continue to live in the cache (and hence be served via various
  // RPCs) for dut_info_cache_validity after it has been deleted from the
  // inventory.
  google.protobuf.Duration dut_info_cache_validity = 9;

  // update_limit_per_minute is used to rate limit some inventory updates.
  int32 update_limit_per_minute = 10;

  // Queen service to push inventory to.
  string queen_service = 11;

  // Git project containing the device config.
  string device_config_project = 12;

  // Git branch from the device config project to be used.
  string device_config_branch = 13;

  // The device config file path.
  // e.g. deviceconfig/generated/device_configs.cfg
  string device_config_path = 14;

  // If using multi files for inventory. See crbug.com/1008442 for details.
  bool multifile = 15;

  // Git project containing the manufacturing config.
  string manufacturing_config_project = 16;

  // Git branch from the manufacturing config project to be used.
  string manufacturing_config_branch = 17;

  // The device config file path.
  // e.g. manufacturingconfig/generated/manufacturing_configs.cfg
  string manufacturing_config_path = 18;
}

message PoolBalancer {
  // Names of the pools to keep healthy automatically via pool balancing.
  repeated string target_pools = 1;

  // Name of the pool to use as the spare pool for pool balancing.
  string spare_pool = 2;

  // Maximum number of unhealthy DUTs per model that can be balanced away from
  // a single target pool.
  int32 max_unhealthy_duts = 3;
}

message Endpoint {
  DeployDut deploy_dut = 1;
}

message DeployDut {
  // Amount of time the deploy Skylab task can be PENDING.
  //
  // This should be long enough for the newly updated inventory information to
  // propagate to the Swarming bots.
  google.protobuf.Duration task_expiration_timeout = 1;

  // Amount of time the deploy Skylab task is allowed to run.
  //
  // This should be enough for possibly installing firmware and test image on
  // the DUT.
  google.protobuf.Duration task_execution_timeout = 2;

  // Priority of the deploy Skylab task.
  //
  // This should be the same as, or higher priority (i.e., numerically lower)
  // than other admin tasks.
  int64 task_priority = 3;
}

message StableVersionConfig {
  // The Gerrit Server for the stable version data file's repo
  // example: "chrome-internal-review.googlesource.com"
  string gerrit_host = 1;
  // The Gitiles Server for the stable version data file's repo
  // example: "chrome-internal.googlesource.com"
  string gitiles_host = 2;
  // The project name for the stable version data file's repo
  // example: "chromeos/infra/config"
  string project = 3;
  // The branch that the stable version data file is on
  // example: "master"
  string branch = 4;
  // The path, relative to the repo root, of the stable version data file
  // example: "lab_platform/stable_version_data/stable_versions.cfg"
  string stable_version_data_path = 5;
}

message InventoryProvider{
  // The inventory service hostname, e.g. "cros-lab-inventory.appspot.com".
  string host = 1;

  // TODO (guocb) Remove `traffic_ratio` `read_traffic_ratio` and
  // `write_traffic_ratio` after migration.
  uint32 traffic_ratio = 2 [deprecated=true];

  // The ratio (a number in [0, 100]) of reading traffic FAN OUT to inventory
  // service. Just for migrating purpose.
  uint32 read_traffic_ratio = 3;

  // The ratio (a number in [0, 100]) of reading traffic DUPLICATED to
  // inventory service. Just for migrating purpose.
  uint32 write_traffic_ratio = 4;

  // The device uuids for migration testing.
  repeated string testing_device_uuids = 5;

  // The device names for migration testing.
  repeated string testing_device_names = 6;

  // The flag to control if we write to inventory v1.
  bool inventory_v2_only = 7;
}
