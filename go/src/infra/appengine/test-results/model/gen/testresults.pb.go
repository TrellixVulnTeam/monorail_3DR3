// Code generated by protoc-gen-go. DO NOT EDIT.
// source: infra/appengine/test-results/model/gen/testresults.proto

package gen

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// ResultType represents the result of a test, either actual or expected.
type ResultType int32

const (
	// SKIP means the test was not run.
	ResultType_SKIP ResultType = 0
	// PASS means the test ran as expected.
	ResultType_PASS ResultType = 1
	// FAIL means the test did not run as expected.
	ResultType_FAIL ResultType = 2
	// CRASH means the test runner crashed during the test.
	ResultType_CRASH ResultType = 3
	// TIMEOUT means the test hung (did not complete) and was aborted.
	ResultType_TIMEOUT ResultType = 4
	// MISSING is layout test specific. The test completed but we could not find
	// an expected baseline to compare against.
	ResultType_MISSING ResultType = 5
	// LEAK is layout test specific. Memory leaks were detected during the test execution.
	ResultType_LEAK ResultType = 6
	// SLOW is layout test specific. The test is expected to take longer than normal to run.
	ResultType_SLOW ResultType = 7
	// TEXT is layout test specific, deprecated. The test is expected to produce
	// a text-only failure (the image, if present, will match). Normally you will
	// see "FAIL" instead.
	ResultType_TEXT ResultType = 8
	// AUDIO is layout test specific, deprecated. The test is expected to produce
	// audio output that doesn't match the expected result. Normally you will see
	// "FAIL" instead.
	ResultType_AUDIO ResultType = 9
	// IMAGE is layout test specific. The test produces image (and possibly text
	// output). The image output doesn't match what we'd expect, but the text output,
	// if present, does.
	ResultType_IMAGE ResultType = 10
	// IMAGE_TEXT is layout test specific, deprecated. The test produces image
	// and text output, both of which fail to match what we expect. Normally you
	// will see "FAIL" instead.
	ResultType_IMAGE_TEXT ResultType = 11
	// REBASELINE is layout test specific. The expected test result is out of date
	// and will be ignored (any result other than a crash or timeout will be
	// considered as passing). This test result should only ever show up on local
	// test runs, not on bots (it is forbidden to check in a TestExpectations file
	// with this expectation). This should never show up as an "actual" result.
	ResultType_REBASELINE ResultType = 12
	// NEEDSREBASELINE is layout test specific. The expected test result is out
	// of date and will be ignored (as above); the auto-rebaseline-bot will look
	// for tests of this type and automatically update them. This should never
	// show up as an "actual" result.
	ResultType_NEEDSREBASELINE ResultType = 13
	// NEEDSMANUALREBASELINE is layout test specific. The expected test result
	// is out of date and will be ignored (as above). This result may be checked
	// in to the TestExpectations file, but the auto-rebasline-bot will ignore
	// these entries. This should never show up as an "actual" result.
	ResultType_NEEDSMANUALREBASELINE ResultType = 14
	// UNKNOWN is an unrecognized or unknown test result type.
	ResultType_UNKNOWN ResultType = 15
	// WONTFIX is for tests that are not expected to ever pass. For example,
	// platform-specific features running on a platform that doesn't support
	// them.
	ResultType_WONTFIX ResultType = 16
)

var ResultType_name = map[int32]string{
	0:  "SKIP",
	1:  "PASS",
	2:  "FAIL",
	3:  "CRASH",
	4:  "TIMEOUT",
	5:  "MISSING",
	6:  "LEAK",
	7:  "SLOW",
	8:  "TEXT",
	9:  "AUDIO",
	10: "IMAGE",
	11: "IMAGE_TEXT",
	12: "REBASELINE",
	13: "NEEDSREBASELINE",
	14: "NEEDSMANUALREBASELINE",
	15: "UNKNOWN",
	16: "WONTFIX",
}

var ResultType_value = map[string]int32{
	"SKIP":                  0,
	"PASS":                  1,
	"FAIL":                  2,
	"CRASH":                 3,
	"TIMEOUT":               4,
	"MISSING":               5,
	"LEAK":                  6,
	"SLOW":                  7,
	"TEXT":                  8,
	"AUDIO":                 9,
	"IMAGE":                 10,
	"IMAGE_TEXT":            11,
	"REBASELINE":            12,
	"NEEDSREBASELINE":       13,
	"NEEDSMANUALREBASELINE": 14,
	"UNKNOWN":               15,
	"WONTFIX":               16,
}

func (x ResultType) String() string {
	return proto.EnumName(ResultType_name, int32(x))
}

func (ResultType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_fc141212ee46a8ad, []int{0}
}

// TestResults encapsulates the results of a run of a set of tests.
type TestResults struct {
	// Interrupted is true if the test run was interrupted and terminated early
	// (either via the runner bailing out or the user hitting ctrl-C, etc.)
	// If true, this indicates that not all of the tests in the suite were run
	// and the results are at best incomplete and possibly totally invalid.
	Interrupted bool `protobuf:"varint,1,opt,name=interrupted,proto3" json:"interrupted,omitempty"`
	// NumFailuresByType is a summary of the totals of each result type.
	// If a test was run more than once, only the first invocation's result is
	// included in the totals. Each key is one of the result types listed below.
	// A missing result type is the same as being present and set to zero (0).
	NumFailuresByType []*TestResults_FailuresByType `protobuf:"bytes,2,rep,name=num_failures_by_type,json=numFailuresByType,proto3" json:"num_failures_by_type,omitempty"`
	// PathDelimiter is the separator string to use in between components of a
	// tests name; normally "." for GTest- and Python-based tests and "/" for
	// layout tests; if not present, you should default to "/" for backwards-compatibility.
	PathDelimiter string `protobuf:"bytes,3,opt,name=path_delimiter,json=pathDelimiter,proto3" json:"path_delimiter,omitempty"`
	// SecondsSinceEpoch is the start time of the test run expressed as a
	// floating-point offset in seconds from the UNIX epoch.
	SecondsSinceEpoch float32 `protobuf:"fixed32,4,opt,name=seconds_since_epoch,json=secondsSinceEpoch,proto3" json:"seconds_since_epoch,omitempty"`
	// TestResults is the set of actual test results. Each directory or module
	// component in the test name is a node in the trie, and the leaf contains
	// the dict of per-test fields as described below.
	//
	// In the original JSON, this is a trie. Here, just flatten out as path strings.
	// They *should* compress just fine in transit/at rest, but we should verify
	// with measurements in the wild.
	Tests map[string]*TestRun `protobuf:"bytes,5,rep,name=Tests,proto3" json:"Tests,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// BuildId is the build_id in chrome-infra-events:raw_events.completed_builds_legacy
	BuildId              string   `protobuf:"bytes,6,opt,name=build_id,json=buildId,proto3" json:"build_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TestResults) Reset()         { *m = TestResults{} }
func (m *TestResults) String() string { return proto.CompactTextString(m) }
func (*TestResults) ProtoMessage()    {}
func (*TestResults) Descriptor() ([]byte, []int) {
	return fileDescriptor_fc141212ee46a8ad, []int{0}
}

func (m *TestResults) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TestResults.Unmarshal(m, b)
}
func (m *TestResults) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TestResults.Marshal(b, m, deterministic)
}
func (m *TestResults) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TestResults.Merge(m, src)
}
func (m *TestResults) XXX_Size() int {
	return xxx_messageInfo_TestResults.Size(m)
}
func (m *TestResults) XXX_DiscardUnknown() {
	xxx_messageInfo_TestResults.DiscardUnknown(m)
}

var xxx_messageInfo_TestResults proto.InternalMessageInfo

func (m *TestResults) GetInterrupted() bool {
	if m != nil {
		return m.Interrupted
	}
	return false
}

func (m *TestResults) GetNumFailuresByType() []*TestResults_FailuresByType {
	if m != nil {
		return m.NumFailuresByType
	}
	return nil
}

func (m *TestResults) GetPathDelimiter() string {
	if m != nil {
		return m.PathDelimiter
	}
	return ""
}

func (m *TestResults) GetSecondsSinceEpoch() float32 {
	if m != nil {
		return m.SecondsSinceEpoch
	}
	return 0
}

func (m *TestResults) GetTests() map[string]*TestRun {
	if m != nil {
		return m.Tests
	}
	return nil
}

func (m *TestResults) GetBuildId() string {
	if m != nil {
		return m.BuildId
	}
	return ""
}

// FailuresByType is a workaround for the lack of support in proto3 for
// enum types as keys in maps.
type TestResults_FailuresByType struct {
	Type                 ResultType `protobuf:"varint,1,opt,name=type,proto3,enum=testresults.events.ResultType" json:"type,omitempty"`
	Count                int64      `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *TestResults_FailuresByType) Reset()         { *m = TestResults_FailuresByType{} }
func (m *TestResults_FailuresByType) String() string { return proto.CompactTextString(m) }
func (*TestResults_FailuresByType) ProtoMessage()    {}
func (*TestResults_FailuresByType) Descriptor() ([]byte, []int) {
	return fileDescriptor_fc141212ee46a8ad, []int{0, 0}
}

func (m *TestResults_FailuresByType) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TestResults_FailuresByType.Unmarshal(m, b)
}
func (m *TestResults_FailuresByType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TestResults_FailuresByType.Marshal(b, m, deterministic)
}
func (m *TestResults_FailuresByType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TestResults_FailuresByType.Merge(m, src)
}
func (m *TestResults_FailuresByType) XXX_Size() int {
	return xxx_messageInfo_TestResults_FailuresByType.Size(m)
}
func (m *TestResults_FailuresByType) XXX_DiscardUnknown() {
	xxx_messageInfo_TestResults_FailuresByType.DiscardUnknown(m)
}

var xxx_messageInfo_TestResults_FailuresByType proto.InternalMessageInfo

func (m *TestResults_FailuresByType) GetType() ResultType {
	if m != nil {
		return m.Type
	}
	return ResultType_SKIP
}

func (m *TestResults_FailuresByType) GetCount() int64 {
	if m != nil {
		return m.Count
	}
	return 0
}

// TestRun represents the output results of one test run.
type TestRun struct {
	// Actual is an ordered list of the results the test actually produced.
	// {"FAIL, "PASS"} means that a test was run twice, failed the first time,
	// and then passed when it was retried. If a test produces multiple
	// different results, then it was actually flaky during the run.
	Actual []ResultType `protobuf:"varint,1,rep,packed,name=actual,proto3,enum=testresults.events.ResultType" json:"actual,omitempty"`
	// Expected is an unordered list of the result types expected for the test,
	// e.g. {"FAIL", "PASS"} means that a test is expected to either pass or fail.
	// A test that contains multiple values is expected to be flaky.
	Expected []ResultType `protobuf:"varint,2,rep,packed,name=expected,proto3,enum=testresults.events.ResultType" json:"expected,omitempty"`
	// Bugs is a list of URLs to bug database entries associated with each test.
	Bugs []string `protobuf:"bytes,3,rep,name=bugs,proto3" json:"bugs,omitempty"`
	// IsUnexpected indicates that the failure was unexpected (a regression).
	// If false, the failure was expected and will be ignored.
	IsUnexpected bool `protobuf:"varint,4,opt,name=is_unexpected,json=isUnexpected,proto3" json:"is_unexpected,omitempty"`
	// Time is the time it took in seconds to execute the first invocation of the test.
	Time float32 `protobuf:"fixed32,5,opt,name=time,proto3" json:"time,omitempty"`
	// Times are the times in seconds of each invocation of the test.
	Times []float32 `protobuf:"fixed32,6,rep,packed,name=times,proto3" json:"times,omitempty"`
	// HasRepaintOverlay indicates that the test output contains the data needed
	// to draw repaint overlays to help explain the results (only used in layout tests).
	HasRepaintOverlay bool `protobuf:"varint,7,opt,name=has_repaint_overlay,json=hasRepaintOverlay,proto3" json:"has_repaint_overlay,omitempty"`
	// IsMissingAudio indicates that the test was supposed to have an audio
	// baseline to compare against, and we didn't find one.
	IsMissingAudio bool `protobuf:"varint,8,opt,name=is_missing_audio,json=isMissingAudio,proto3" json:"is_missing_audio,omitempty"`
	// IsMissingTest indicates that the test was supposed to have a text baseline
	// to compare against, and we didn't find one.
	IsMissingText bool `protobuf:"varint,9,opt,name=is_missing_text,json=isMissingText,proto3" json:"is_missing_text,omitempty"`
	// IsMissingVideo indicates that the test was supposed to have an image
	// baseline to compare against and we didn't find one.
	IsMissingVideo bool `protobuf:"varint,10,opt,name=is_missing_video,json=isMissingVideo,proto3" json:"is_missing_video,omitempty"`
	// IsTestHarnessTest indicates that the layout test was written using the
	// w3c's test harness and we don't necessarily have any baselines to compare against.
	IsTestharnessTest bool `protobuf:"varint,11,opt,name=is_testharness_test,json=isTestharnessTest,proto3" json:"is_testharness_test,omitempty"`
	// ReftestType may be one of "==" or "!=" to indicate that the test is a
	// "reference test" and the results were expected to match the reference or
	// not match the reference, respectively (only used in layout tests).
	ReftestType string `protobuf:"bytes,12,opt,name=reftest_type,json=reftestType,proto3" json:"reftest_type,omitempty"`
	// Name is the name of the test or test suite.
	Name string `protobuf:"bytes,13,opt,name=name,proto3" json:"name,omitempty"`
	// Artifacts are extra test output files.
	Artifacts            []*Artifact `protobuf:"bytes,14,rep,name=artifacts,proto3" json:"artifacts,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *TestRun) Reset()         { *m = TestRun{} }
func (m *TestRun) String() string { return proto.CompactTextString(m) }
func (*TestRun) ProtoMessage()    {}
func (*TestRun) Descriptor() ([]byte, []int) {
	return fileDescriptor_fc141212ee46a8ad, []int{1}
}

func (m *TestRun) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TestRun.Unmarshal(m, b)
}
func (m *TestRun) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TestRun.Marshal(b, m, deterministic)
}
func (m *TestRun) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TestRun.Merge(m, src)
}
func (m *TestRun) XXX_Size() int {
	return xxx_messageInfo_TestRun.Size(m)
}
func (m *TestRun) XXX_DiscardUnknown() {
	xxx_messageInfo_TestRun.DiscardUnknown(m)
}

var xxx_messageInfo_TestRun proto.InternalMessageInfo

func (m *TestRun) GetActual() []ResultType {
	if m != nil {
		return m.Actual
	}
	return nil
}

func (m *TestRun) GetExpected() []ResultType {
	if m != nil {
		return m.Expected
	}
	return nil
}

func (m *TestRun) GetBugs() []string {
	if m != nil {
		return m.Bugs
	}
	return nil
}

func (m *TestRun) GetIsUnexpected() bool {
	if m != nil {
		return m.IsUnexpected
	}
	return false
}

func (m *TestRun) GetTime() float32 {
	if m != nil {
		return m.Time
	}
	return 0
}

func (m *TestRun) GetTimes() []float32 {
	if m != nil {
		return m.Times
	}
	return nil
}

func (m *TestRun) GetHasRepaintOverlay() bool {
	if m != nil {
		return m.HasRepaintOverlay
	}
	return false
}

func (m *TestRun) GetIsMissingAudio() bool {
	if m != nil {
		return m.IsMissingAudio
	}
	return false
}

func (m *TestRun) GetIsMissingText() bool {
	if m != nil {
		return m.IsMissingText
	}
	return false
}

func (m *TestRun) GetIsMissingVideo() bool {
	if m != nil {
		return m.IsMissingVideo
	}
	return false
}

func (m *TestRun) GetIsTestharnessTest() bool {
	if m != nil {
		return m.IsTestharnessTest
	}
	return false
}

func (m *TestRun) GetReftestType() string {
	if m != nil {
		return m.ReftestType
	}
	return ""
}

func (m *TestRun) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *TestRun) GetArtifacts() []*Artifact {
	if m != nil {
		return m.Artifacts
	}
	return nil
}

// Artifact represents an extra test output file.
type Artifact struct {
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Values               []string `protobuf:"bytes,2,rep,name=values,proto3" json:"values,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Artifact) Reset()         { *m = Artifact{} }
func (m *Artifact) String() string { return proto.CompactTextString(m) }
func (*Artifact) ProtoMessage()    {}
func (*Artifact) Descriptor() ([]byte, []int) {
	return fileDescriptor_fc141212ee46a8ad, []int{2}
}

func (m *Artifact) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Artifact.Unmarshal(m, b)
}
func (m *Artifact) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Artifact.Marshal(b, m, deterministic)
}
func (m *Artifact) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Artifact.Merge(m, src)
}
func (m *Artifact) XXX_Size() int {
	return xxx_messageInfo_Artifact.Size(m)
}
func (m *Artifact) XXX_DiscardUnknown() {
	xxx_messageInfo_Artifact.DiscardUnknown(m)
}

var xxx_messageInfo_Artifact proto.InternalMessageInfo

func (m *Artifact) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Artifact) GetValues() []string {
	if m != nil {
		return m.Values
	}
	return nil
}

// TestResultEvent is suitable for representing a row in a BigQuery table. Note
// that while TestResults looks like a more obvious choice, the repeated
// TestRun messages in .tests will often exceed the row size limit for BQ.
// This message flattens TestRun.tests out into one row per test, which should
// more easily fit within the BQ row size limit.
type TestResultEvent struct {
	// Path is the full joined path of the test.
	Path string `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"`
	// TestType is derived from step name, by stripping anything but the first
	// word (before the first space), but preserving '(with patch)' suffix if it
	// was present in the original step name.
	TestType string `protobuf:"bytes,2,opt,name=test_type,json=testType,proto3" json:"test_type,omitempty"`
	// StepName is the name of the step that was running the tests. Test type
	// above is a normalized version of this name.
	StepName string `protobuf:"bytes,3,opt,name=step_name,json=stepName,proto3" json:"step_name,omitempty"`
	// Interrupted is true if the test run was interrupted and terminated early
	// (either via the runner bailing out or the user hitting ctrl-C, etc.) If
	// true, this indicates that not all of the tests in the suite were run and
	// the results are at best incomplete and possibly totally invalid.
	Interrupted bool `protobuf:"varint,4,opt,name=interrupted,proto3" json:"interrupted,omitempty"`
	// StartTime is The start time of the test run expressed as a number of
	// microseconds from the UNIX epoch.
	StartTime *timestamp.Timestamp `protobuf:"bytes,5,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	// Run is the result of the test run.
	Run *TestRun `protobuf:"bytes,6,opt,name=run,proto3" json:"run,omitempty"`
	// BuildId is the build_id in chrome-infra-events:raw_events.completed_builds_legacy
	BuildId string `protobuf:"bytes,8,opt,name=build_id,json=buildId,proto3" json:"build_id,omitempty"`
	// BuildbotInfo identifies where the test run ran.
	BuildbotInfo *BuildbotInfo `protobuf:"bytes,9,opt,name=buildbot_info,json=buildbotInfo,proto3" json:"buildbot_info,omitempty"`
	// ChromuimRevision is the revision of the current Chromium checkout, if relevant, e.g. “356123”.
	ChromiumRevision     string           `protobuf:"bytes,10,opt,name=chromium_revision,json=chromiumRevision,proto3" json:"chromium_revision,omitempty"`
	BuildbucketInfo      *BuildbucketInfo `protobuf:"bytes,11,opt,name=buildbucket_info,json=buildbucketInfo,proto3" json:"buildbucket_info,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *TestResultEvent) Reset()         { *m = TestResultEvent{} }
func (m *TestResultEvent) String() string { return proto.CompactTextString(m) }
func (*TestResultEvent) ProtoMessage()    {}
func (*TestResultEvent) Descriptor() ([]byte, []int) {
	return fileDescriptor_fc141212ee46a8ad, []int{3}
}

func (m *TestResultEvent) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TestResultEvent.Unmarshal(m, b)
}
func (m *TestResultEvent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TestResultEvent.Marshal(b, m, deterministic)
}
func (m *TestResultEvent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TestResultEvent.Merge(m, src)
}
func (m *TestResultEvent) XXX_Size() int {
	return xxx_messageInfo_TestResultEvent.Size(m)
}
func (m *TestResultEvent) XXX_DiscardUnknown() {
	xxx_messageInfo_TestResultEvent.DiscardUnknown(m)
}

var xxx_messageInfo_TestResultEvent proto.InternalMessageInfo

func (m *TestResultEvent) GetPath() string {
	if m != nil {
		return m.Path
	}
	return ""
}

func (m *TestResultEvent) GetTestType() string {
	if m != nil {
		return m.TestType
	}
	return ""
}

func (m *TestResultEvent) GetStepName() string {
	if m != nil {
		return m.StepName
	}
	return ""
}

func (m *TestResultEvent) GetInterrupted() bool {
	if m != nil {
		return m.Interrupted
	}
	return false
}

func (m *TestResultEvent) GetStartTime() *timestamp.Timestamp {
	if m != nil {
		return m.StartTime
	}
	return nil
}

func (m *TestResultEvent) GetRun() *TestRun {
	if m != nil {
		return m.Run
	}
	return nil
}

func (m *TestResultEvent) GetBuildId() string {
	if m != nil {
		return m.BuildId
	}
	return ""
}

func (m *TestResultEvent) GetBuildbotInfo() *BuildbotInfo {
	if m != nil {
		return m.BuildbotInfo
	}
	return nil
}

func (m *TestResultEvent) GetChromiumRevision() string {
	if m != nil {
		return m.ChromiumRevision
	}
	return ""
}

func (m *TestResultEvent) GetBuildbucketInfo() *BuildbucketInfo {
	if m != nil {
		return m.BuildbucketInfo
	}
	return nil
}

// BuildbucketInfo identifies a buildbucket build.
type BuildbucketInfo struct {
	// Project is the buildbucket project name.
	Project string `protobuf:"bytes,1,opt,name=project,proto3" json:"project,omitempty"`
	// Bucket is the buildbucket bucket name.
	Bucket string `protobuf:"bytes,2,opt,name=bucket,proto3" json:"bucket,omitempty"`
	// Builder is the buildbucket builder name.
	Builder string `protobuf:"bytes,3,opt,name=builder,proto3" json:"builder,omitempty"`
	// BuildID is the buildbucket build ID.
	BuildId              int64    `protobuf:"varint,4,opt,name=build_id,json=buildId,proto3" json:"build_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BuildbucketInfo) Reset()         { *m = BuildbucketInfo{} }
func (m *BuildbucketInfo) String() string { return proto.CompactTextString(m) }
func (*BuildbucketInfo) ProtoMessage()    {}
func (*BuildbucketInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_fc141212ee46a8ad, []int{4}
}

func (m *BuildbucketInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BuildbucketInfo.Unmarshal(m, b)
}
func (m *BuildbucketInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BuildbucketInfo.Marshal(b, m, deterministic)
}
func (m *BuildbucketInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BuildbucketInfo.Merge(m, src)
}
func (m *BuildbucketInfo) XXX_Size() int {
	return xxx_messageInfo_BuildbucketInfo.Size(m)
}
func (m *BuildbucketInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_BuildbucketInfo.DiscardUnknown(m)
}

var xxx_messageInfo_BuildbucketInfo proto.InternalMessageInfo

func (m *BuildbucketInfo) GetProject() string {
	if m != nil {
		return m.Project
	}
	return ""
}

func (m *BuildbucketInfo) GetBucket() string {
	if m != nil {
		return m.Bucket
	}
	return ""
}

func (m *BuildbucketInfo) GetBuilder() string {
	if m != nil {
		return m.Builder
	}
	return ""
}

func (m *BuildbucketInfo) GetBuildId() int64 {
	if m != nil {
		return m.BuildId
	}
	return 0
}

// BuildbotInfo identifies a buildbot build.
type BuildbotInfo struct {
	// MasterName is the master name.
	MasterName string `protobuf:"bytes,1,opt,name=master_name,json=masterName,proto3" json:"master_name,omitempty"`
	// BuilderName is the builder name.
	BuilderName string `protobuf:"bytes,2,opt,name=builder_name,json=builderName,proto3" json:"builder_name,omitempty"`
	// BuildNumber is the build number.
	BuildNumber          int64    `protobuf:"varint,3,opt,name=build_number,json=buildNumber,proto3" json:"build_number,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BuildbotInfo) Reset()         { *m = BuildbotInfo{} }
func (m *BuildbotInfo) String() string { return proto.CompactTextString(m) }
func (*BuildbotInfo) ProtoMessage()    {}
func (*BuildbotInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_fc141212ee46a8ad, []int{5}
}

func (m *BuildbotInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BuildbotInfo.Unmarshal(m, b)
}
func (m *BuildbotInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BuildbotInfo.Marshal(b, m, deterministic)
}
func (m *BuildbotInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BuildbotInfo.Merge(m, src)
}
func (m *BuildbotInfo) XXX_Size() int {
	return xxx_messageInfo_BuildbotInfo.Size(m)
}
func (m *BuildbotInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_BuildbotInfo.DiscardUnknown(m)
}

var xxx_messageInfo_BuildbotInfo proto.InternalMessageInfo

func (m *BuildbotInfo) GetMasterName() string {
	if m != nil {
		return m.MasterName
	}
	return ""
}

func (m *BuildbotInfo) GetBuilderName() string {
	if m != nil {
		return m.BuilderName
	}
	return ""
}

func (m *BuildbotInfo) GetBuildNumber() int64 {
	if m != nil {
		return m.BuildNumber
	}
	return 0
}

func init() {
	proto.RegisterEnum("testresults.events.ResultType", ResultType_name, ResultType_value)
	proto.RegisterType((*TestResults)(nil), "testresults.events.TestResults")
	proto.RegisterMapType((map[string]*TestRun)(nil), "testresults.events.TestResults.TestsEntry")
	proto.RegisterType((*TestResults_FailuresByType)(nil), "testresults.events.TestResults.FailuresByType")
	proto.RegisterType((*TestRun)(nil), "testresults.events.TestRun")
	proto.RegisterType((*Artifact)(nil), "testresults.events.Artifact")
	proto.RegisterType((*TestResultEvent)(nil), "testresults.events.TestResultEvent")
	proto.RegisterType((*BuildbucketInfo)(nil), "testresults.events.BuildbucketInfo")
	proto.RegisterType((*BuildbotInfo)(nil), "testresults.events.BuildbotInfo")
}

func init() {
	proto.RegisterFile("infra/appengine/test-results/model/gen/testresults.proto", fileDescriptor_fc141212ee46a8ad)
}

var fileDescriptor_fc141212ee46a8ad = []byte{
	// 1061 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x54, 0xdb, 0x6e, 0xdb, 0x46,
	0x10, 0xad, 0x44, 0xdd, 0x38, 0xd4, 0x85, 0xde, 0xa4, 0x05, 0x63, 0x17, 0x8d, 0xa2, 0xa0, 0x85,
	0x90, 0x22, 0x12, 0xaa, 0x02, 0x41, 0xea, 0xa7, 0xca, 0x35, 0x9d, 0x0a, 0xb6, 0xa5, 0x80, 0x92,
	0xea, 0x20, 0x2f, 0x04, 0x25, 0xad, 0xa4, 0x6d, 0xc4, 0x25, 0xc1, 0x5d, 0x1a, 0xd6, 0x57, 0xf5,
	0x3f, 0xfa, 0x2f, 0x7d, 0xee, 0x6b, 0xb0, 0x43, 0xea, 0xe6, 0x38, 0x48, 0xde, 0x66, 0xce, 0x9c,
	0xb9, 0x70, 0x78, 0x76, 0xe0, 0x35, 0xe3, 0xf3, 0xc8, 0x6b, 0x7b, 0x61, 0x48, 0xf9, 0x82, 0x71,
	0xda, 0x96, 0x54, 0xc8, 0x97, 0x11, 0x15, 0xf1, 0x4a, 0x8a, 0xb6, 0x1f, 0xcc, 0xe8, 0xaa, 0xbd,
	0xa0, 0x1c, 0xe1, 0x14, 0x6d, 0x85, 0x51, 0x20, 0x03, 0x42, 0xf6, 0x21, 0x7a, 0x4b, 0xb9, 0x14,
	0xc7, 0x4f, 0x17, 0x41, 0xb0, 0x58, 0xd1, 0x36, 0x32, 0x26, 0xf1, 0xbc, 0x2d, 0x99, 0x4f, 0x85,
	0xf4, 0xfc, 0x30, 0x49, 0x6a, 0xfc, 0xaf, 0x81, 0x31, 0xa2, 0x42, 0x3a, 0x49, 0x1e, 0xa9, 0x83,
	0xc1, 0xb8, 0xa4, 0x51, 0x14, 0x87, 0x92, 0xce, 0xac, 0x4c, 0x3d, 0xd3, 0x2c, 0x39, 0xfb, 0x10,
	0x71, 0xe1, 0x31, 0x8f, 0x7d, 0x77, 0xee, 0xb1, 0x55, 0x1c, 0x51, 0xe1, 0x4e, 0xd6, 0xae, 0x5c,
	0x87, 0xd4, 0xca, 0xd6, 0xb5, 0xa6, 0xd1, 0x69, 0xb5, 0x3e, 0x9d, 0xa2, 0xb5, 0xd7, 0xa0, 0x75,
	0x91, 0xe6, 0x9d, 0xad, 0x47, 0xeb, 0x90, 0x3a, 0x47, 0x3c, 0xf6, 0x0f, 0x21, 0xf2, 0x23, 0x54,
	0x43, 0x4f, 0x2e, 0xdd, 0x19, 0x5d, 0x31, 0x9f, 0x49, 0x1a, 0x59, 0x5a, 0x3d, 0xd3, 0xd4, 0x9d,
	0x8a, 0x42, 0xcf, 0x37, 0x20, 0x69, 0xc1, 0x23, 0x41, 0xa7, 0x01, 0x9f, 0x09, 0x57, 0x30, 0x3e,
	0xa5, 0x2e, 0x0d, 0x83, 0xe9, 0xd2, 0xca, 0xd5, 0x33, 0xcd, 0xac, 0x73, 0x94, 0x86, 0x86, 0x2a,
	0x62, 0xab, 0x00, 0xf9, 0x1d, 0xf2, 0x6a, 0x0e, 0x61, 0xe5, 0x71, 0xd0, 0x17, 0x5f, 0x1a, 0x14,
	0xc9, 0x36, 0x97, 0xd1, 0xda, 0x49, 0x12, 0xc9, 0x13, 0x28, 0x4d, 0x62, 0xb6, 0x9a, 0xb9, 0x6c,
	0x66, 0x15, 0x70, 0xa4, 0x22, 0xfa, 0xbd, 0xd9, 0xf1, 0x7b, 0xa8, 0xde, 0xfb, 0x8a, 0x0e, 0xe4,
	0x70, 0x2d, 0x6a, 0x83, 0xd5, 0xce, 0x0f, 0x0f, 0x75, 0x4b, 0x3a, 0xe1, 0x1a, 0x90, 0x4b, 0x1e,
	0x43, 0x7e, 0x1a, 0xc4, 0x5c, 0x5a, 0xd9, 0x7a, 0xa6, 0xa9, 0x39, 0x89, 0x73, 0x3c, 0x06, 0xd8,
	0xcd, 0x42, 0x4c, 0xd0, 0x3e, 0xd0, 0x35, 0x96, 0xd5, 0x1d, 0x65, 0x92, 0x5f, 0x20, 0x7f, 0xeb,
	0xad, 0x62, 0x8a, 0x59, 0x46, 0xe7, 0xe4, 0xb3, 0x1f, 0x16, 0x73, 0x27, 0x61, 0x9e, 0x66, 0x5f,
	0x67, 0x1a, 0xff, 0xe4, 0xa0, 0x98, 0xc2, 0xe4, 0x15, 0x14, 0xbc, 0xa9, 0x8c, 0xbd, 0x95, 0x95,
	0xa9, 0x6b, 0x5f, 0x31, 0x6e, 0xca, 0x26, 0xa7, 0x50, 0xa2, 0x77, 0x21, 0x9d, 0x2a, 0xa9, 0x64,
	0xbf, 0x2a, 0x73, 0xcb, 0x27, 0x04, 0x72, 0x93, 0x78, 0x21, 0x2c, 0xad, 0xae, 0x35, 0x75, 0x07,
	0x6d, 0xf2, 0x1c, 0x2a, 0x4c, 0xb8, 0x31, 0xdf, 0x16, 0xcd, 0xa1, 0xfe, 0xca, 0x4c, 0x8c, 0xf9,
	0x7e, 0xa2, 0x52, 0xb1, 0x95, 0xc7, 0x3f, 0x8d, 0xb6, 0xda, 0x1c, 0x2a, 0xdb, 0x2a, 0xd4, 0xb5,
	0x66, 0xd6, 0x49, 0x1c, 0x25, 0x91, 0xa5, 0x27, 0xdc, 0x88, 0x86, 0x1e, 0xe3, 0xd2, 0x0d, 0x6e,
	0x69, 0xb4, 0xf2, 0xd6, 0x56, 0x11, 0x8b, 0x1e, 0x2d, 0x3d, 0xe1, 0x24, 0x91, 0x41, 0x12, 0x20,
	0x4d, 0x30, 0x99, 0x70, 0x7d, 0x26, 0x04, 0xe3, 0x0b, 0xd7, 0x8b, 0x67, 0x2c, 0xb0, 0x4a, 0x48,
	0xae, 0x32, 0x71, 0x9d, 0xc0, 0x5d, 0x85, 0x92, 0x9f, 0xa0, 0xb6, 0xc7, 0x94, 0xf4, 0x4e, 0x5a,
	0x3a, 0x12, 0x2b, 0x5b, 0xe2, 0x88, 0xde, 0xc9, 0x7b, 0x15, 0x6f, 0xd9, 0x8c, 0x06, 0x16, 0xdc,
	0xab, 0xf8, 0x97, 0x42, 0xd5, 0xac, 0x4c, 0xb8, 0x6a, 0x79, 0x4b, 0x2f, 0xe2, 0x54, 0x24, 0xb6,
	0x65, 0x24, 0xb3, 0x32, 0x31, 0xda, 0x45, 0x94, 0x49, 0x9e, 0x41, 0x39, 0xa2, 0x73, 0xc5, 0x49,
	0x9e, 0x5f, 0x19, 0x05, 0x61, 0xa4, 0x18, 0x4a, 0x90, 0x40, 0x8e, 0x7b, 0x3e, 0xb5, 0x2a, 0x18,
	0x42, 0x9b, 0x9c, 0x82, 0xee, 0x45, 0x92, 0xcd, 0xbd, 0xa9, 0x14, 0x56, 0x15, 0x5f, 0xc2, 0xf7,
	0x0f, 0xfd, 0xb2, 0x6e, 0x4a, 0x72, 0x76, 0xf4, 0xc6, 0x2b, 0x28, 0x6d, 0xe0, 0x6d, 0xed, 0xcc,
	0x5e, 0xed, 0xef, 0xa0, 0x80, 0xf2, 0x12, 0xa8, 0x05, 0xdd, 0x49, 0xbd, 0xc6, 0xbf, 0x1a, 0xd4,
	0x76, 0x2f, 0xcb, 0x56, 0x0d, 0x54, 0xbe, 0x7a, 0xce, 0x9b, 0x7c, 0x65, 0x93, 0x13, 0xd0, 0x77,
	0xdf, 0x93, 0xc5, 0x40, 0x69, 0xfb, 0x31, 0x27, 0xa0, 0x0b, 0x49, 0x43, 0x17, 0xbb, 0x26, 0x07,
	0xa1, 0xa4, 0x80, 0xbe, 0xea, 0x7c, 0xef, 0x6a, 0xe5, 0x3e, 0xbd, 0x5a, 0xbf, 0x01, 0x08, 0xe9,
	0x45, 0xd2, 0xdd, 0x4a, 0xc7, 0xe8, 0x1c, 0xb7, 0x92, 0xeb, 0xd8, 0xda, 0x5c, 0xc7, 0xd6, 0x68,
	0x73, 0x1d, 0x1d, 0x1d, 0xd9, 0xca, 0x27, 0x2f, 0x41, 0x8b, 0x62, 0x8e, 0x2f, 0xfe, 0x0b, 0xaf,
	0x4b, 0xf1, 0x0e, 0xae, 0x44, 0xe9, 0xe0, 0x4a, 0x10, 0x1b, 0x2a, 0x68, 0x4e, 0x02, 0xe9, 0x32,
	0x3e, 0x0f, 0x50, 0x33, 0x46, 0xa7, 0xfe, 0x50, 0xcd, 0xb3, 0x94, 0xd8, 0xe3, 0xf3, 0xc0, 0x29,
	0x4f, 0xf6, 0x3c, 0xf2, 0x33, 0x1c, 0x4d, 0x97, 0x51, 0xe0, 0xb3, 0xd8, 0x77, 0x23, 0x7a, 0xcb,
	0x04, 0x0b, 0x38, 0xaa, 0x4a, 0x77, 0xcc, 0x4d, 0xc0, 0x49, 0x71, 0xd2, 0x07, 0x33, 0x49, 0x8e,
	0xa7, 0x1f, 0x68, 0xda, 0xd6, 0xc0, 0xb6, 0xcf, 0x3f, 0xdf, 0x16, 0xb9, 0xd8, 0xb9, 0x36, 0x39,
	0x04, 0x1a, 0x77, 0x50, 0xbb, 0xc7, 0x21, 0x16, 0x14, 0xc3, 0x28, 0xf8, 0x9b, 0x4e, 0x65, 0xfa,
	0x3b, 0x37, 0xae, 0x52, 0x44, 0xc2, 0x4b, 0x7f, 0x67, 0xea, 0xa9, 0x0c, 0xac, 0xbb, 0xbd, 0xed,
	0x1b, 0xf7, 0x60, 0x7b, 0x39, 0xbc, 0x82, 0x9b, 0xed, 0x35, 0x62, 0x28, 0xef, 0x2f, 0x85, 0x3c,
	0x05, 0xc3, 0xf7, 0x84, 0xa4, 0x91, 0xbb, 0xa7, 0x44, 0x48, 0x20, 0x54, 0xc5, 0x33, 0x28, 0xa7,
	0x65, 0x13, 0x46, 0x32, 0x83, 0x91, 0x62, 0x07, 0x14, 0x97, 0xc7, 0xfe, 0x24, 0x9d, 0x46, 0x4b,
	0x29, 0x7d, 0x84, 0x5e, 0xfc, 0x97, 0x01, 0xd8, 0x1d, 0x30, 0x52, 0x82, 0xdc, 0xf0, 0xb2, 0xf7,
	0xd6, 0xfc, 0x46, 0x59, 0x6f, 0xbb, 0xc3, 0xa1, 0x99, 0x51, 0xd6, 0x45, 0xb7, 0x77, 0x65, 0x66,
	0x89, 0x0e, 0xf9, 0x3f, 0x9c, 0xee, 0xf0, 0x4f, 0x53, 0x23, 0x06, 0x14, 0x47, 0xbd, 0x6b, 0x7b,
	0x30, 0x1e, 0x99, 0x39, 0xe5, 0x5c, 0xf7, 0x86, 0xc3, 0x5e, 0xff, 0x8d, 0x99, 0x57, 0xf4, 0x2b,
	0xbb, 0x7b, 0x69, 0x16, 0xb0, 0xd8, 0xd5, 0xe0, 0xc6, 0x2c, 0x2a, 0x6b, 0x64, 0xbf, 0x1b, 0x99,
	0x25, 0x55, 0xa2, 0x3b, 0x3e, 0xef, 0x0d, 0x4c, 0x5d, 0x99, 0xbd, 0xeb, 0xee, 0x1b, 0xdb, 0x04,
	0x52, 0x05, 0x40, 0xd3, 0x45, 0x96, 0xa1, 0x7c, 0xc7, 0x3e, 0xeb, 0x0e, 0xed, 0xab, 0x5e, 0xdf,
	0x36, 0xcb, 0xe4, 0x11, 0xd4, 0xfa, 0xb6, 0x7d, 0x3e, 0xdc, 0x03, 0x2b, 0xe4, 0x09, 0x7c, 0x8b,
	0xe0, 0x75, 0xb7, 0x3f, 0xee, 0x5e, 0xed, 0x85, 0xaa, 0x6a, 0xa0, 0x71, 0xff, 0xb2, 0x3f, 0xb8,
	0xe9, 0x9b, 0x35, 0xe5, 0xdc, 0x0c, 0xfa, 0xa3, 0x8b, 0xde, 0x3b, 0xd3, 0x3c, 0xcb, 0xbf, 0xd7,
	0x16, 0x94, 0x4f, 0x0a, 0xf8, 0x28, 0x7e, 0xfd, 0x18, 0x00, 0x00, 0xff, 0xff, 0x1d, 0xc0, 0xf4,
	0x01, 0x90, 0x08, 0x00, 0x00,
}
