// Code generated by protoc-gen-go. DO NOT EDIT.
// source: infra/appengine/cros/lab_inventory/api/v1/service.proto

package api

import prpc "go.chromium.org/luci/grpc/prpc"

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	device "go.chromium.org/chromiumos/infra/proto/go/device"
	lab "go.chromium.org/chromiumos/infra/proto/go/lab"
	manufacturing "go.chromium.org/chromiumos/infra/proto/go/manufacturing"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protos "infra/libs/fleet/protos"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type DeviceConfigsExistsRequest struct {
	// device_configs to check
	ConfigIds            []*device.ConfigId `protobuf:"bytes,1,rep,name=configIds,proto3" json:"configIds,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *DeviceConfigsExistsRequest) Reset()         { *m = DeviceConfigsExistsRequest{} }
func (m *DeviceConfigsExistsRequest) String() string { return proto.CompactTextString(m) }
func (*DeviceConfigsExistsRequest) ProtoMessage()    {}
func (*DeviceConfigsExistsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_014c8d2ea65f9050, []int{0}
}

func (m *DeviceConfigsExistsRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DeviceConfigsExistsRequest.Unmarshal(m, b)
}
func (m *DeviceConfigsExistsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DeviceConfigsExistsRequest.Marshal(b, m, deterministic)
}
func (m *DeviceConfigsExistsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeviceConfigsExistsRequest.Merge(m, src)
}
func (m *DeviceConfigsExistsRequest) XXX_Size() int {
	return xxx_messageInfo_DeviceConfigsExistsRequest.Size(m)
}
func (m *DeviceConfigsExistsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DeviceConfigsExistsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DeviceConfigsExistsRequest proto.InternalMessageInfo

func (m *DeviceConfigsExistsRequest) GetConfigIds() []*device.ConfigId {
	if m != nil {
		return m.ConfigIds
	}
	return nil
}

type DeviceConfigsExistsResponse struct {
	// Exists Map with true/false for the requested configIds
	// https://developers.google.com/protocol-buffers/docs/proto3#scalar
	// There is no int(Only int32 and others) scalar type for proto.
	// int32 maps to int32 in golang.
	// To iterate over map exists with int values(int i) - use exists[int32(i)]
	Exists               map[int32]bool `protobuf:"bytes,1,rep,name=exists,proto3" json:"exists,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *DeviceConfigsExistsResponse) Reset()         { *m = DeviceConfigsExistsResponse{} }
func (m *DeviceConfigsExistsResponse) String() string { return proto.CompactTextString(m) }
func (*DeviceConfigsExistsResponse) ProtoMessage()    {}
func (*DeviceConfigsExistsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_014c8d2ea65f9050, []int{1}
}

func (m *DeviceConfigsExistsResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DeviceConfigsExistsResponse.Unmarshal(m, b)
}
func (m *DeviceConfigsExistsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DeviceConfigsExistsResponse.Marshal(b, m, deterministic)
}
func (m *DeviceConfigsExistsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeviceConfigsExistsResponse.Merge(m, src)
}
func (m *DeviceConfigsExistsResponse) XXX_Size() int {
	return xxx_messageInfo_DeviceConfigsExistsResponse.Size(m)
}
func (m *DeviceConfigsExistsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_DeviceConfigsExistsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_DeviceConfigsExistsResponse proto.InternalMessageInfo

func (m *DeviceConfigsExistsResponse) GetExists() map[int32]bool {
	if m != nil {
		return m.Exists
	}
	return nil
}

type DeviceOpResult struct {
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Hostname             string   `protobuf:"bytes,2,opt,name=hostname,proto3" json:"hostname,omitempty"`
	ErrorMsg             string   `protobuf:"bytes,3,opt,name=error_msg,json=errorMsg,proto3" json:"error_msg,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DeviceOpResult) Reset()         { *m = DeviceOpResult{} }
func (m *DeviceOpResult) String() string { return proto.CompactTextString(m) }
func (*DeviceOpResult) ProtoMessage()    {}
func (*DeviceOpResult) Descriptor() ([]byte, []int) {
	return fileDescriptor_014c8d2ea65f9050, []int{2}
}

func (m *DeviceOpResult) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DeviceOpResult.Unmarshal(m, b)
}
func (m *DeviceOpResult) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DeviceOpResult.Marshal(b, m, deterministic)
}
func (m *DeviceOpResult) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeviceOpResult.Merge(m, src)
}
func (m *DeviceOpResult) XXX_Size() int {
	return xxx_messageInfo_DeviceOpResult.Size(m)
}
func (m *DeviceOpResult) XXX_DiscardUnknown() {
	xxx_messageInfo_DeviceOpResult.DiscardUnknown(m)
}

var xxx_messageInfo_DeviceOpResult proto.InternalMessageInfo

func (m *DeviceOpResult) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *DeviceOpResult) GetHostname() string {
	if m != nil {
		return m.Hostname
	}
	return ""
}

func (m *DeviceOpResult) GetErrorMsg() string {
	if m != nil {
		return m.ErrorMsg
	}
	return ""
}

type DeviceID struct {
	// Types that are valid to be assigned to Id:
	//	*DeviceID_Hostname
	//	*DeviceID_ChromeosDeviceId
	Id                   isDeviceID_Id `protobuf_oneof:"id"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *DeviceID) Reset()         { *m = DeviceID{} }
func (m *DeviceID) String() string { return proto.CompactTextString(m) }
func (*DeviceID) ProtoMessage()    {}
func (*DeviceID) Descriptor() ([]byte, []int) {
	return fileDescriptor_014c8d2ea65f9050, []int{3}
}

func (m *DeviceID) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DeviceID.Unmarshal(m, b)
}
func (m *DeviceID) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DeviceID.Marshal(b, m, deterministic)
}
func (m *DeviceID) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeviceID.Merge(m, src)
}
func (m *DeviceID) XXX_Size() int {
	return xxx_messageInfo_DeviceID.Size(m)
}
func (m *DeviceID) XXX_DiscardUnknown() {
	xxx_messageInfo_DeviceID.DiscardUnknown(m)
}

var xxx_messageInfo_DeviceID proto.InternalMessageInfo

type isDeviceID_Id interface {
	isDeviceID_Id()
}

type DeviceID_Hostname struct {
	Hostname string `protobuf:"bytes,1,opt,name=hostname,proto3,oneof"`
}

type DeviceID_ChromeosDeviceId struct {
	ChromeosDeviceId string `protobuf:"bytes,2,opt,name=chromeos_device_id,json=chromeosDeviceId,proto3,oneof"`
}

func (*DeviceID_Hostname) isDeviceID_Id() {}

func (*DeviceID_ChromeosDeviceId) isDeviceID_Id() {}

func (m *DeviceID) GetId() isDeviceID_Id {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *DeviceID) GetHostname() string {
	if x, ok := m.GetId().(*DeviceID_Hostname); ok {
		return x.Hostname
	}
	return ""
}

func (m *DeviceID) GetChromeosDeviceId() string {
	if x, ok := m.GetId().(*DeviceID_ChromeosDeviceId); ok {
		return x.ChromeosDeviceId
	}
	return ""
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*DeviceID) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*DeviceID_Hostname)(nil),
		(*DeviceID_ChromeosDeviceId)(nil),
	}
}

type AddCrosDevicesRequest struct {
	Devices              []*lab.ChromeOSDevice `protobuf:"bytes,1,rep,name=devices,proto3" json:"devices,omitempty"`
	PickServoPort        bool                  `protobuf:"varint,2,opt,name=pick_servo_port,json=pickServoPort,proto3" json:"pick_servo_port,omitempty"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *AddCrosDevicesRequest) Reset()         { *m = AddCrosDevicesRequest{} }
func (m *AddCrosDevicesRequest) String() string { return proto.CompactTextString(m) }
func (*AddCrosDevicesRequest) ProtoMessage()    {}
func (*AddCrosDevicesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_014c8d2ea65f9050, []int{4}
}

func (m *AddCrosDevicesRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AddCrosDevicesRequest.Unmarshal(m, b)
}
func (m *AddCrosDevicesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AddCrosDevicesRequest.Marshal(b, m, deterministic)
}
func (m *AddCrosDevicesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AddCrosDevicesRequest.Merge(m, src)
}
func (m *AddCrosDevicesRequest) XXX_Size() int {
	return xxx_messageInfo_AddCrosDevicesRequest.Size(m)
}
func (m *AddCrosDevicesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_AddCrosDevicesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_AddCrosDevicesRequest proto.InternalMessageInfo

func (m *AddCrosDevicesRequest) GetDevices() []*lab.ChromeOSDevice {
	if m != nil {
		return m.Devices
	}
	return nil
}

func (m *AddCrosDevicesRequest) GetPickServoPort() bool {
	if m != nil {
		return m.PickServoPort
	}
	return false
}

type AddCrosDevicesResponse struct {
	PassedDevices        []*DeviceOpResult `protobuf:"bytes,1,rep,name=passed_devices,json=passedDevices,proto3" json:"passed_devices,omitempty"`
	FailedDevices        []*DeviceOpResult `protobuf:"bytes,2,rep,name=failed_devices,json=failedDevices,proto3" json:"failed_devices,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *AddCrosDevicesResponse) Reset()         { *m = AddCrosDevicesResponse{} }
func (m *AddCrosDevicesResponse) String() string { return proto.CompactTextString(m) }
func (*AddCrosDevicesResponse) ProtoMessage()    {}
func (*AddCrosDevicesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_014c8d2ea65f9050, []int{5}
}

func (m *AddCrosDevicesResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AddCrosDevicesResponse.Unmarshal(m, b)
}
func (m *AddCrosDevicesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AddCrosDevicesResponse.Marshal(b, m, deterministic)
}
func (m *AddCrosDevicesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AddCrosDevicesResponse.Merge(m, src)
}
func (m *AddCrosDevicesResponse) XXX_Size() int {
	return xxx_messageInfo_AddCrosDevicesResponse.Size(m)
}
func (m *AddCrosDevicesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_AddCrosDevicesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_AddCrosDevicesResponse proto.InternalMessageInfo

func (m *AddCrosDevicesResponse) GetPassedDevices() []*DeviceOpResult {
	if m != nil {
		return m.PassedDevices
	}
	return nil
}

func (m *AddCrosDevicesResponse) GetFailedDevices() []*DeviceOpResult {
	if m != nil {
		return m.FailedDevices
	}
	return nil
}

type GetCrosDevicesRequest struct {
	Ids                  []*DeviceID `protobuf:"bytes,1,rep,name=ids,proto3" json:"ids,omitempty"`
	Models               []string    `protobuf:"bytes,2,rep,name=models,proto3" json:"models,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *GetCrosDevicesRequest) Reset()         { *m = GetCrosDevicesRequest{} }
func (m *GetCrosDevicesRequest) String() string { return proto.CompactTextString(m) }
func (*GetCrosDevicesRequest) ProtoMessage()    {}
func (*GetCrosDevicesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_014c8d2ea65f9050, []int{6}
}

func (m *GetCrosDevicesRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetCrosDevicesRequest.Unmarshal(m, b)
}
func (m *GetCrosDevicesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetCrosDevicesRequest.Marshal(b, m, deterministic)
}
func (m *GetCrosDevicesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetCrosDevicesRequest.Merge(m, src)
}
func (m *GetCrosDevicesRequest) XXX_Size() int {
	return xxx_messageInfo_GetCrosDevicesRequest.Size(m)
}
func (m *GetCrosDevicesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetCrosDevicesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetCrosDevicesRequest proto.InternalMessageInfo

func (m *GetCrosDevicesRequest) GetIds() []*DeviceID {
	if m != nil {
		return m.Ids
	}
	return nil
}

func (m *GetCrosDevicesRequest) GetModels() []string {
	if m != nil {
		return m.Models
	}
	return nil
}

type HwidData struct {
	Sku                  string   `protobuf:"bytes,1,opt,name=sku,proto3" json:"sku,omitempty"`
	Variant              string   `protobuf:"bytes,2,opt,name=variant,proto3" json:"variant,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *HwidData) Reset()         { *m = HwidData{} }
func (m *HwidData) String() string { return proto.CompactTextString(m) }
func (*HwidData) ProtoMessage()    {}
func (*HwidData) Descriptor() ([]byte, []int) {
	return fileDescriptor_014c8d2ea65f9050, []int{7}
}

func (m *HwidData) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_HwidData.Unmarshal(m, b)
}
func (m *HwidData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_HwidData.Marshal(b, m, deterministic)
}
func (m *HwidData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HwidData.Merge(m, src)
}
func (m *HwidData) XXX_Size() int {
	return xxx_messageInfo_HwidData.Size(m)
}
func (m *HwidData) XXX_DiscardUnknown() {
	xxx_messageInfo_HwidData.DiscardUnknown(m)
}

var xxx_messageInfo_HwidData proto.InternalMessageInfo

func (m *HwidData) GetSku() string {
	if m != nil {
		return m.Sku
	}
	return ""
}

func (m *HwidData) GetVariant() string {
	if m != nil {
		return m.Variant
	}
	return ""
}

type ExtendedDeviceData struct {
	LabConfig            *lab.ChromeOSDevice   `protobuf:"bytes,1,opt,name=lab_config,json=labConfig,proto3" json:"lab_config,omitempty"`
	DeviceConfig         *device.Config        `protobuf:"bytes,2,opt,name=device_config,json=deviceConfig,proto3" json:"device_config,omitempty"`
	ManufacturingConfig  *manufacturing.Config `protobuf:"bytes,3,opt,name=manufacturing_config,json=manufacturingConfig,proto3" json:"manufacturing_config,omitempty"`
	HwidData             *HwidData             `protobuf:"bytes,4,opt,name=hwid_data,json=hwidData,proto3" json:"hwid_data,omitempty"`
	DutState             *lab.DutState         `protobuf:"bytes,5,opt,name=dut_state,json=dutState,proto3" json:"dut_state,omitempty"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *ExtendedDeviceData) Reset()         { *m = ExtendedDeviceData{} }
func (m *ExtendedDeviceData) String() string { return proto.CompactTextString(m) }
func (*ExtendedDeviceData) ProtoMessage()    {}
func (*ExtendedDeviceData) Descriptor() ([]byte, []int) {
	return fileDescriptor_014c8d2ea65f9050, []int{8}
}

func (m *ExtendedDeviceData) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ExtendedDeviceData.Unmarshal(m, b)
}
func (m *ExtendedDeviceData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ExtendedDeviceData.Marshal(b, m, deterministic)
}
func (m *ExtendedDeviceData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ExtendedDeviceData.Merge(m, src)
}
func (m *ExtendedDeviceData) XXX_Size() int {
	return xxx_messageInfo_ExtendedDeviceData.Size(m)
}
func (m *ExtendedDeviceData) XXX_DiscardUnknown() {
	xxx_messageInfo_ExtendedDeviceData.DiscardUnknown(m)
}

var xxx_messageInfo_ExtendedDeviceData proto.InternalMessageInfo

func (m *ExtendedDeviceData) GetLabConfig() *lab.ChromeOSDevice {
	if m != nil {
		return m.LabConfig
	}
	return nil
}

func (m *ExtendedDeviceData) GetDeviceConfig() *device.Config {
	if m != nil {
		return m.DeviceConfig
	}
	return nil
}

func (m *ExtendedDeviceData) GetManufacturingConfig() *manufacturing.Config {
	if m != nil {
		return m.ManufacturingConfig
	}
	return nil
}

func (m *ExtendedDeviceData) GetHwidData() *HwidData {
	if m != nil {
		return m.HwidData
	}
	return nil
}

func (m *ExtendedDeviceData) GetDutState() *lab.DutState {
	if m != nil {
		return m.DutState
	}
	return nil
}

type GetCrosDevicesResponse struct {
	Data                 []*ExtendedDeviceData `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
	FailedDevices        []*DeviceOpResult     `protobuf:"bytes,2,rep,name=failed_devices,json=failedDevices,proto3" json:"failed_devices,omitempty"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *GetCrosDevicesResponse) Reset()         { *m = GetCrosDevicesResponse{} }
func (m *GetCrosDevicesResponse) String() string { return proto.CompactTextString(m) }
func (*GetCrosDevicesResponse) ProtoMessage()    {}
func (*GetCrosDevicesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_014c8d2ea65f9050, []int{9}
}

func (m *GetCrosDevicesResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetCrosDevicesResponse.Unmarshal(m, b)
}
func (m *GetCrosDevicesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetCrosDevicesResponse.Marshal(b, m, deterministic)
}
func (m *GetCrosDevicesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetCrosDevicesResponse.Merge(m, src)
}
func (m *GetCrosDevicesResponse) XXX_Size() int {
	return xxx_messageInfo_GetCrosDevicesResponse.Size(m)
}
func (m *GetCrosDevicesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetCrosDevicesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetCrosDevicesResponse proto.InternalMessageInfo

func (m *GetCrosDevicesResponse) GetData() []*ExtendedDeviceData {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *GetCrosDevicesResponse) GetFailedDevices() []*DeviceOpResult {
	if m != nil {
		return m.FailedDevices
	}
	return nil
}

type UpdateDutsStatusRequest struct {
	States []*lab.DutState `protobuf:"bytes,1,rep,name=states,proto3" json:"states,omitempty"`
	Reason string          `protobuf:"bytes,2,opt,name=reason,proto3" json:"reason,omitempty"`
	// Currently there's no way to get such info before deployment. So temporarily set them
	// in the request via DutMeta to backfill hwID and serial number.
	// TODO: find a better way for these infos.
	DutMetas             []*DutMeta `protobuf:"bytes,3,rep,name=dut_metas,json=dutMetas,proto3" json:"dut_metas,omitempty"`
	LabMetas             []*LabMeta `protobuf:"bytes,4,rep,name=lab_metas,json=labMetas,proto3" json:"lab_metas,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *UpdateDutsStatusRequest) Reset()         { *m = UpdateDutsStatusRequest{} }
func (m *UpdateDutsStatusRequest) String() string { return proto.CompactTextString(m) }
func (*UpdateDutsStatusRequest) ProtoMessage()    {}
func (*UpdateDutsStatusRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_014c8d2ea65f9050, []int{10}
}

func (m *UpdateDutsStatusRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UpdateDutsStatusRequest.Unmarshal(m, b)
}
func (m *UpdateDutsStatusRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UpdateDutsStatusRequest.Marshal(b, m, deterministic)
}
func (m *UpdateDutsStatusRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateDutsStatusRequest.Merge(m, src)
}
func (m *UpdateDutsStatusRequest) XXX_Size() int {
	return xxx_messageInfo_UpdateDutsStatusRequest.Size(m)
}
func (m *UpdateDutsStatusRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateDutsStatusRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateDutsStatusRequest proto.InternalMessageInfo

func (m *UpdateDutsStatusRequest) GetStates() []*lab.DutState {
	if m != nil {
		return m.States
	}
	return nil
}

func (m *UpdateDutsStatusRequest) GetReason() string {
	if m != nil {
		return m.Reason
	}
	return ""
}

func (m *UpdateDutsStatusRequest) GetDutMetas() []*DutMeta {
	if m != nil {
		return m.DutMetas
	}
	return nil
}

func (m *UpdateDutsStatusRequest) GetLabMetas() []*LabMeta {
	if m != nil {
		return m.LabMetas
	}
	return nil
}

type DutMeta struct {
	ChromeosDeviceId     string   `protobuf:"bytes,1,opt,name=chromeos_device_id,json=chromeosDeviceId,proto3" json:"chromeos_device_id,omitempty"`
	SerialNumber         string   `protobuf:"bytes,2,opt,name=serial_number,json=serialNumber,proto3" json:"serial_number,omitempty"`
	HwID                 string   `protobuf:"bytes,3,opt,name=hwID,proto3" json:"hwID,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DutMeta) Reset()         { *m = DutMeta{} }
func (m *DutMeta) String() string { return proto.CompactTextString(m) }
func (*DutMeta) ProtoMessage()    {}
func (*DutMeta) Descriptor() ([]byte, []int) {
	return fileDescriptor_014c8d2ea65f9050, []int{11}
}

func (m *DutMeta) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DutMeta.Unmarshal(m, b)
}
func (m *DutMeta) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DutMeta.Marshal(b, m, deterministic)
}
func (m *DutMeta) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DutMeta.Merge(m, src)
}
func (m *DutMeta) XXX_Size() int {
	return xxx_messageInfo_DutMeta.Size(m)
}
func (m *DutMeta) XXX_DiscardUnknown() {
	xxx_messageInfo_DutMeta.DiscardUnknown(m)
}

var xxx_messageInfo_DutMeta proto.InternalMessageInfo

func (m *DutMeta) GetChromeosDeviceId() string {
	if m != nil {
		return m.ChromeosDeviceId
	}
	return ""
}

func (m *DutMeta) GetSerialNumber() string {
	if m != nil {
		return m.SerialNumber
	}
	return ""
}

func (m *DutMeta) GetHwID() string {
	if m != nil {
		return m.HwID
	}
	return ""
}

type LabMeta struct {
	ChromeosDeviceId     string   `protobuf:"bytes,1,opt,name=chromeos_device_id,json=chromeosDeviceId,proto3" json:"chromeos_device_id,omitempty"`
	ServoType            string   `protobuf:"bytes,2,opt,name=servo_type,json=servoType,proto3" json:"servo_type,omitempty"`
	SmartUsbhub          bool     `protobuf:"varint,3,opt,name=smart_usbhub,json=smartUsbhub,proto3" json:"smart_usbhub,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *LabMeta) Reset()         { *m = LabMeta{} }
func (m *LabMeta) String() string { return proto.CompactTextString(m) }
func (*LabMeta) ProtoMessage()    {}
func (*LabMeta) Descriptor() ([]byte, []int) {
	return fileDescriptor_014c8d2ea65f9050, []int{12}
}

func (m *LabMeta) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LabMeta.Unmarshal(m, b)
}
func (m *LabMeta) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LabMeta.Marshal(b, m, deterministic)
}
func (m *LabMeta) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LabMeta.Merge(m, src)
}
func (m *LabMeta) XXX_Size() int {
	return xxx_messageInfo_LabMeta.Size(m)
}
func (m *LabMeta) XXX_DiscardUnknown() {
	xxx_messageInfo_LabMeta.DiscardUnknown(m)
}

var xxx_messageInfo_LabMeta proto.InternalMessageInfo

func (m *LabMeta) GetChromeosDeviceId() string {
	if m != nil {
		return m.ChromeosDeviceId
	}
	return ""
}

func (m *LabMeta) GetServoType() string {
	if m != nil {
		return m.ServoType
	}
	return ""
}

func (m *LabMeta) GetSmartUsbhub() bool {
	if m != nil {
		return m.SmartUsbhub
	}
	return false
}

type UpdateDutsStatusResponse struct {
	UpdatedDevices       []*DeviceOpResult `protobuf:"bytes,1,rep,name=updated_devices,json=updatedDevices,proto3" json:"updated_devices,omitempty"`
	FailedDevices        []*DeviceOpResult `protobuf:"bytes,2,rep,name=failed_devices,json=failedDevices,proto3" json:"failed_devices,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *UpdateDutsStatusResponse) Reset()         { *m = UpdateDutsStatusResponse{} }
func (m *UpdateDutsStatusResponse) String() string { return proto.CompactTextString(m) }
func (*UpdateDutsStatusResponse) ProtoMessage()    {}
func (*UpdateDutsStatusResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_014c8d2ea65f9050, []int{13}
}

func (m *UpdateDutsStatusResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UpdateDutsStatusResponse.Unmarshal(m, b)
}
func (m *UpdateDutsStatusResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UpdateDutsStatusResponse.Marshal(b, m, deterministic)
}
func (m *UpdateDutsStatusResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateDutsStatusResponse.Merge(m, src)
}
func (m *UpdateDutsStatusResponse) XXX_Size() int {
	return xxx_messageInfo_UpdateDutsStatusResponse.Size(m)
}
func (m *UpdateDutsStatusResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateDutsStatusResponse.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateDutsStatusResponse proto.InternalMessageInfo

func (m *UpdateDutsStatusResponse) GetUpdatedDevices() []*DeviceOpResult {
	if m != nil {
		return m.UpdatedDevices
	}
	return nil
}

func (m *UpdateDutsStatusResponse) GetFailedDevices() []*DeviceOpResult {
	if m != nil {
		return m.FailedDevices
	}
	return nil
}

type UpdateCrosDevicesSetupRequest struct {
	Devices              []*lab.ChromeOSDevice `protobuf:"bytes,1,rep,name=devices,proto3" json:"devices,omitempty"`
	Reason               string                `protobuf:"bytes,2,opt,name=reason,proto3" json:"reason,omitempty"`
	PickServoPort        bool                  `protobuf:"varint,3,opt,name=pick_servo_port,json=pickServoPort,proto3" json:"pick_servo_port,omitempty"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *UpdateCrosDevicesSetupRequest) Reset()         { *m = UpdateCrosDevicesSetupRequest{} }
func (m *UpdateCrosDevicesSetupRequest) String() string { return proto.CompactTextString(m) }
func (*UpdateCrosDevicesSetupRequest) ProtoMessage()    {}
func (*UpdateCrosDevicesSetupRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_014c8d2ea65f9050, []int{14}
}

func (m *UpdateCrosDevicesSetupRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UpdateCrosDevicesSetupRequest.Unmarshal(m, b)
}
func (m *UpdateCrosDevicesSetupRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UpdateCrosDevicesSetupRequest.Marshal(b, m, deterministic)
}
func (m *UpdateCrosDevicesSetupRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateCrosDevicesSetupRequest.Merge(m, src)
}
func (m *UpdateCrosDevicesSetupRequest) XXX_Size() int {
	return xxx_messageInfo_UpdateCrosDevicesSetupRequest.Size(m)
}
func (m *UpdateCrosDevicesSetupRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateCrosDevicesSetupRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateCrosDevicesSetupRequest proto.InternalMessageInfo

func (m *UpdateCrosDevicesSetupRequest) GetDevices() []*lab.ChromeOSDevice {
	if m != nil {
		return m.Devices
	}
	return nil
}

func (m *UpdateCrosDevicesSetupRequest) GetReason() string {
	if m != nil {
		return m.Reason
	}
	return ""
}

func (m *UpdateCrosDevicesSetupRequest) GetPickServoPort() bool {
	if m != nil {
		return m.PickServoPort
	}
	return false
}

type UpdateCrosDevicesSetupResponse struct {
	UpdatedDevices       []*DeviceOpResult `protobuf:"bytes,1,rep,name=updated_devices,json=updatedDevices,proto3" json:"updated_devices,omitempty"`
	FailedDevices        []*DeviceOpResult `protobuf:"bytes,2,rep,name=failed_devices,json=failedDevices,proto3" json:"failed_devices,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *UpdateCrosDevicesSetupResponse) Reset()         { *m = UpdateCrosDevicesSetupResponse{} }
func (m *UpdateCrosDevicesSetupResponse) String() string { return proto.CompactTextString(m) }
func (*UpdateCrosDevicesSetupResponse) ProtoMessage()    {}
func (*UpdateCrosDevicesSetupResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_014c8d2ea65f9050, []int{15}
}

func (m *UpdateCrosDevicesSetupResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UpdateCrosDevicesSetupResponse.Unmarshal(m, b)
}
func (m *UpdateCrosDevicesSetupResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UpdateCrosDevicesSetupResponse.Marshal(b, m, deterministic)
}
func (m *UpdateCrosDevicesSetupResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateCrosDevicesSetupResponse.Merge(m, src)
}
func (m *UpdateCrosDevicesSetupResponse) XXX_Size() int {
	return xxx_messageInfo_UpdateCrosDevicesSetupResponse.Size(m)
}
func (m *UpdateCrosDevicesSetupResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateCrosDevicesSetupResponse.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateCrosDevicesSetupResponse proto.InternalMessageInfo

func (m *UpdateCrosDevicesSetupResponse) GetUpdatedDevices() []*DeviceOpResult {
	if m != nil {
		return m.UpdatedDevices
	}
	return nil
}

func (m *UpdateCrosDevicesSetupResponse) GetFailedDevices() []*DeviceOpResult {
	if m != nil {
		return m.FailedDevices
	}
	return nil
}

type DeleteCrosDevicesRequest struct {
	Ids                  []*DeviceID                      `protobuf:"bytes,1,rep,name=ids,proto3" json:"ids,omitempty"`
	Reason               *DeleteCrosDevicesRequest_Reason `protobuf:"bytes,2,opt,name=reason,proto3" json:"reason,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                         `json:"-"`
	XXX_unrecognized     []byte                           `json:"-"`
	XXX_sizecache        int32                            `json:"-"`
}

func (m *DeleteCrosDevicesRequest) Reset()         { *m = DeleteCrosDevicesRequest{} }
func (m *DeleteCrosDevicesRequest) String() string { return proto.CompactTextString(m) }
func (*DeleteCrosDevicesRequest) ProtoMessage()    {}
func (*DeleteCrosDevicesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_014c8d2ea65f9050, []int{16}
}

func (m *DeleteCrosDevicesRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DeleteCrosDevicesRequest.Unmarshal(m, b)
}
func (m *DeleteCrosDevicesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DeleteCrosDevicesRequest.Marshal(b, m, deterministic)
}
func (m *DeleteCrosDevicesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteCrosDevicesRequest.Merge(m, src)
}
func (m *DeleteCrosDevicesRequest) XXX_Size() int {
	return xxx_messageInfo_DeleteCrosDevicesRequest.Size(m)
}
func (m *DeleteCrosDevicesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteCrosDevicesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteCrosDevicesRequest proto.InternalMessageInfo

func (m *DeleteCrosDevicesRequest) GetIds() []*DeviceID {
	if m != nil {
		return m.Ids
	}
	return nil
}

func (m *DeleteCrosDevicesRequest) GetReason() *DeleteCrosDevicesRequest_Reason {
	if m != nil {
		return m.Reason
	}
	return nil
}

type DeleteCrosDevicesRequest_Reason struct {
	Bug                  string   `protobuf:"bytes,1,opt,name=bug,proto3" json:"bug,omitempty"`
	Comment              string   `protobuf:"bytes,2,opt,name=comment,proto3" json:"comment,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DeleteCrosDevicesRequest_Reason) Reset()         { *m = DeleteCrosDevicesRequest_Reason{} }
func (m *DeleteCrosDevicesRequest_Reason) String() string { return proto.CompactTextString(m) }
func (*DeleteCrosDevicesRequest_Reason) ProtoMessage()    {}
func (*DeleteCrosDevicesRequest_Reason) Descriptor() ([]byte, []int) {
	return fileDescriptor_014c8d2ea65f9050, []int{16, 0}
}

func (m *DeleteCrosDevicesRequest_Reason) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DeleteCrosDevicesRequest_Reason.Unmarshal(m, b)
}
func (m *DeleteCrosDevicesRequest_Reason) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DeleteCrosDevicesRequest_Reason.Marshal(b, m, deterministic)
}
func (m *DeleteCrosDevicesRequest_Reason) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteCrosDevicesRequest_Reason.Merge(m, src)
}
func (m *DeleteCrosDevicesRequest_Reason) XXX_Size() int {
	return xxx_messageInfo_DeleteCrosDevicesRequest_Reason.Size(m)
}
func (m *DeleteCrosDevicesRequest_Reason) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteCrosDevicesRequest_Reason.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteCrosDevicesRequest_Reason proto.InternalMessageInfo

func (m *DeleteCrosDevicesRequest_Reason) GetBug() string {
	if m != nil {
		return m.Bug
	}
	return ""
}

func (m *DeleteCrosDevicesRequest_Reason) GetComment() string {
	if m != nil {
		return m.Comment
	}
	return ""
}

type DeleteCrosDevicesResponse struct {
	RemovedDevices []*DeviceOpResult `protobuf:"bytes,1,rep,name=removed_devices,json=removedDevices,proto3" json:"removed_devices,omitempty"`
	// Devices cannot be removed for any reason.
	FailedDevices        []*DeviceOpResult `protobuf:"bytes,2,rep,name=failed_devices,json=failedDevices,proto3" json:"failed_devices,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *DeleteCrosDevicesResponse) Reset()         { *m = DeleteCrosDevicesResponse{} }
func (m *DeleteCrosDevicesResponse) String() string { return proto.CompactTextString(m) }
func (*DeleteCrosDevicesResponse) ProtoMessage()    {}
func (*DeleteCrosDevicesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_014c8d2ea65f9050, []int{17}
}

func (m *DeleteCrosDevicesResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DeleteCrosDevicesResponse.Unmarshal(m, b)
}
func (m *DeleteCrosDevicesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DeleteCrosDevicesResponse.Marshal(b, m, deterministic)
}
func (m *DeleteCrosDevicesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteCrosDevicesResponse.Merge(m, src)
}
func (m *DeleteCrosDevicesResponse) XXX_Size() int {
	return xxx_messageInfo_DeleteCrosDevicesResponse.Size(m)
}
func (m *DeleteCrosDevicesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteCrosDevicesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteCrosDevicesResponse proto.InternalMessageInfo

func (m *DeleteCrosDevicesResponse) GetRemovedDevices() []*DeviceOpResult {
	if m != nil {
		return m.RemovedDevices
	}
	return nil
}

func (m *DeleteCrosDevicesResponse) GetFailedDevices() []*DeviceOpResult {
	if m != nil {
		return m.FailedDevices
	}
	return nil
}

type DeviceProperty struct {
	Hostname             string              `protobuf:"bytes,1,opt,name=hostname,proto3" json:"hostname,omitempty"`
	Pool                 string              `protobuf:"bytes,2,opt,name=pool,proto3" json:"pool,omitempty"`
	Rpm                  *DeviceProperty_Rpm `protobuf:"bytes,3,opt,name=rpm,proto3" json:"rpm,omitempty"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *DeviceProperty) Reset()         { *m = DeviceProperty{} }
func (m *DeviceProperty) String() string { return proto.CompactTextString(m) }
func (*DeviceProperty) ProtoMessage()    {}
func (*DeviceProperty) Descriptor() ([]byte, []int) {
	return fileDescriptor_014c8d2ea65f9050, []int{18}
}

func (m *DeviceProperty) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DeviceProperty.Unmarshal(m, b)
}
func (m *DeviceProperty) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DeviceProperty.Marshal(b, m, deterministic)
}
func (m *DeviceProperty) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeviceProperty.Merge(m, src)
}
func (m *DeviceProperty) XXX_Size() int {
	return xxx_messageInfo_DeviceProperty.Size(m)
}
func (m *DeviceProperty) XXX_DiscardUnknown() {
	xxx_messageInfo_DeviceProperty.DiscardUnknown(m)
}

var xxx_messageInfo_DeviceProperty proto.InternalMessageInfo

func (m *DeviceProperty) GetHostname() string {
	if m != nil {
		return m.Hostname
	}
	return ""
}

func (m *DeviceProperty) GetPool() string {
	if m != nil {
		return m.Pool
	}
	return ""
}

func (m *DeviceProperty) GetRpm() *DeviceProperty_Rpm {
	if m != nil {
		return m.Rpm
	}
	return nil
}

type DeviceProperty_Rpm struct {
	PowerunitName        string   `protobuf:"bytes,1,opt,name=powerunit_name,json=powerunitName,proto3" json:"powerunit_name,omitempty"`
	PowerunitOutlet      string   `protobuf:"bytes,2,opt,name=powerunit_outlet,json=powerunitOutlet,proto3" json:"powerunit_outlet,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DeviceProperty_Rpm) Reset()         { *m = DeviceProperty_Rpm{} }
func (m *DeviceProperty_Rpm) String() string { return proto.CompactTextString(m) }
func (*DeviceProperty_Rpm) ProtoMessage()    {}
func (*DeviceProperty_Rpm) Descriptor() ([]byte, []int) {
	return fileDescriptor_014c8d2ea65f9050, []int{18, 0}
}

func (m *DeviceProperty_Rpm) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DeviceProperty_Rpm.Unmarshal(m, b)
}
func (m *DeviceProperty_Rpm) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DeviceProperty_Rpm.Marshal(b, m, deterministic)
}
func (m *DeviceProperty_Rpm) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeviceProperty_Rpm.Merge(m, src)
}
func (m *DeviceProperty_Rpm) XXX_Size() int {
	return xxx_messageInfo_DeviceProperty_Rpm.Size(m)
}
func (m *DeviceProperty_Rpm) XXX_DiscardUnknown() {
	xxx_messageInfo_DeviceProperty_Rpm.DiscardUnknown(m)
}

var xxx_messageInfo_DeviceProperty_Rpm proto.InternalMessageInfo

func (m *DeviceProperty_Rpm) GetPowerunitName() string {
	if m != nil {
		return m.PowerunitName
	}
	return ""
}

func (m *DeviceProperty_Rpm) GetPowerunitOutlet() string {
	if m != nil {
		return m.PowerunitOutlet
	}
	return ""
}

type BatchUpdateDevicesRequest struct {
	DeviceProperties     []*DeviceProperty `protobuf:"bytes,1,rep,name=device_properties,json=deviceProperties,proto3" json:"device_properties,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *BatchUpdateDevicesRequest) Reset()         { *m = BatchUpdateDevicesRequest{} }
func (m *BatchUpdateDevicesRequest) String() string { return proto.CompactTextString(m) }
func (*BatchUpdateDevicesRequest) ProtoMessage()    {}
func (*BatchUpdateDevicesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_014c8d2ea65f9050, []int{19}
}

func (m *BatchUpdateDevicesRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BatchUpdateDevicesRequest.Unmarshal(m, b)
}
func (m *BatchUpdateDevicesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BatchUpdateDevicesRequest.Marshal(b, m, deterministic)
}
func (m *BatchUpdateDevicesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BatchUpdateDevicesRequest.Merge(m, src)
}
func (m *BatchUpdateDevicesRequest) XXX_Size() int {
	return xxx_messageInfo_BatchUpdateDevicesRequest.Size(m)
}
func (m *BatchUpdateDevicesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_BatchUpdateDevicesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_BatchUpdateDevicesRequest proto.InternalMessageInfo

func (m *BatchUpdateDevicesRequest) GetDeviceProperties() []*DeviceProperty {
	if m != nil {
		return m.DeviceProperties
	}
	return nil
}

type BatchUpdateDevicesResponse struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BatchUpdateDevicesResponse) Reset()         { *m = BatchUpdateDevicesResponse{} }
func (m *BatchUpdateDevicesResponse) String() string { return proto.CompactTextString(m) }
func (*BatchUpdateDevicesResponse) ProtoMessage()    {}
func (*BatchUpdateDevicesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_014c8d2ea65f9050, []int{20}
}

func (m *BatchUpdateDevicesResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BatchUpdateDevicesResponse.Unmarshal(m, b)
}
func (m *BatchUpdateDevicesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BatchUpdateDevicesResponse.Marshal(b, m, deterministic)
}
func (m *BatchUpdateDevicesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BatchUpdateDevicesResponse.Merge(m, src)
}
func (m *BatchUpdateDevicesResponse) XXX_Size() int {
	return xxx_messageInfo_BatchUpdateDevicesResponse.Size(m)
}
func (m *BatchUpdateDevicesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_BatchUpdateDevicesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_BatchUpdateDevicesResponse proto.InternalMessageInfo

type AssetResult struct {
	Asset                *protos.ChopsAsset `protobuf:"bytes,1,opt,name=asset,proto3" json:"asset,omitempty"`
	ErrorMsg             string             `protobuf:"bytes,2,opt,name=error_msg,json=errorMsg,proto3" json:"error_msg,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *AssetResult) Reset()         { *m = AssetResult{} }
func (m *AssetResult) String() string { return proto.CompactTextString(m) }
func (*AssetResult) ProtoMessage()    {}
func (*AssetResult) Descriptor() ([]byte, []int) {
	return fileDescriptor_014c8d2ea65f9050, []int{21}
}

func (m *AssetResult) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AssetResult.Unmarshal(m, b)
}
func (m *AssetResult) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AssetResult.Marshal(b, m, deterministic)
}
func (m *AssetResult) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AssetResult.Merge(m, src)
}
func (m *AssetResult) XXX_Size() int {
	return xxx_messageInfo_AssetResult.Size(m)
}
func (m *AssetResult) XXX_DiscardUnknown() {
	xxx_messageInfo_AssetResult.DiscardUnknown(m)
}

var xxx_messageInfo_AssetResult proto.InternalMessageInfo

func (m *AssetResult) GetAsset() *protos.ChopsAsset {
	if m != nil {
		return m.Asset
	}
	return nil
}

func (m *AssetResult) GetErrorMsg() string {
	if m != nil {
		return m.ErrorMsg
	}
	return ""
}

type AssetList struct {
	Asset                []*protos.ChopsAsset `protobuf:"bytes,1,rep,name=asset,proto3" json:"asset,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *AssetList) Reset()         { *m = AssetList{} }
func (m *AssetList) String() string { return proto.CompactTextString(m) }
func (*AssetList) ProtoMessage()    {}
func (*AssetList) Descriptor() ([]byte, []int) {
	return fileDescriptor_014c8d2ea65f9050, []int{22}
}

func (m *AssetList) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AssetList.Unmarshal(m, b)
}
func (m *AssetList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AssetList.Marshal(b, m, deterministic)
}
func (m *AssetList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AssetList.Merge(m, src)
}
func (m *AssetList) XXX_Size() int {
	return xxx_messageInfo_AssetList.Size(m)
}
func (m *AssetList) XXX_DiscardUnknown() {
	xxx_messageInfo_AssetList.DiscardUnknown(m)
}

var xxx_messageInfo_AssetList proto.InternalMessageInfo

func (m *AssetList) GetAsset() []*protos.ChopsAsset {
	if m != nil {
		return m.Asset
	}
	return nil
}

type AssetResponse struct {
	Passed               []*AssetResult `protobuf:"bytes,1,rep,name=passed,proto3" json:"passed,omitempty"`
	Failed               []*AssetResult `protobuf:"bytes,2,rep,name=failed,proto3" json:"failed,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *AssetResponse) Reset()         { *m = AssetResponse{} }
func (m *AssetResponse) String() string { return proto.CompactTextString(m) }
func (*AssetResponse) ProtoMessage()    {}
func (*AssetResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_014c8d2ea65f9050, []int{23}
}

func (m *AssetResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AssetResponse.Unmarshal(m, b)
}
func (m *AssetResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AssetResponse.Marshal(b, m, deterministic)
}
func (m *AssetResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AssetResponse.Merge(m, src)
}
func (m *AssetResponse) XXX_Size() int {
	return xxx_messageInfo_AssetResponse.Size(m)
}
func (m *AssetResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_AssetResponse.DiscardUnknown(m)
}

var xxx_messageInfo_AssetResponse proto.InternalMessageInfo

func (m *AssetResponse) GetPassed() []*AssetResult {
	if m != nil {
		return m.Passed
	}
	return nil
}

func (m *AssetResponse) GetFailed() []*AssetResult {
	if m != nil {
		return m.Failed
	}
	return nil
}

type AssetIDList struct {
	Id                   []string `protobuf:"bytes,1,rep,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AssetIDList) Reset()         { *m = AssetIDList{} }
func (m *AssetIDList) String() string { return proto.CompactTextString(m) }
func (*AssetIDList) ProtoMessage()    {}
func (*AssetIDList) Descriptor() ([]byte, []int) {
	return fileDescriptor_014c8d2ea65f9050, []int{24}
}

func (m *AssetIDList) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AssetIDList.Unmarshal(m, b)
}
func (m *AssetIDList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AssetIDList.Marshal(b, m, deterministic)
}
func (m *AssetIDList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AssetIDList.Merge(m, src)
}
func (m *AssetIDList) XXX_Size() int {
	return xxx_messageInfo_AssetIDList.Size(m)
}
func (m *AssetIDList) XXX_DiscardUnknown() {
	xxx_messageInfo_AssetIDList.DiscardUnknown(m)
}

var xxx_messageInfo_AssetIDList proto.InternalMessageInfo

func (m *AssetIDList) GetId() []string {
	if m != nil {
		return m.Id
	}
	return nil
}

type AssetIDResult struct {
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	ErrorMsg             string   `protobuf:"bytes,2,opt,name=error_msg,json=errorMsg,proto3" json:"error_msg,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AssetIDResult) Reset()         { *m = AssetIDResult{} }
func (m *AssetIDResult) String() string { return proto.CompactTextString(m) }
func (*AssetIDResult) ProtoMessage()    {}
func (*AssetIDResult) Descriptor() ([]byte, []int) {
	return fileDescriptor_014c8d2ea65f9050, []int{25}
}

func (m *AssetIDResult) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AssetIDResult.Unmarshal(m, b)
}
func (m *AssetIDResult) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AssetIDResult.Marshal(b, m, deterministic)
}
func (m *AssetIDResult) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AssetIDResult.Merge(m, src)
}
func (m *AssetIDResult) XXX_Size() int {
	return xxx_messageInfo_AssetIDResult.Size(m)
}
func (m *AssetIDResult) XXX_DiscardUnknown() {
	xxx_messageInfo_AssetIDResult.DiscardUnknown(m)
}

var xxx_messageInfo_AssetIDResult proto.InternalMessageInfo

func (m *AssetIDResult) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *AssetIDResult) GetErrorMsg() string {
	if m != nil {
		return m.ErrorMsg
	}
	return ""
}

type AssetIDResponse struct {
	Passed               []*AssetIDResult `protobuf:"bytes,1,rep,name=passed,proto3" json:"passed,omitempty"`
	Failed               []*AssetIDResult `protobuf:"bytes,2,rep,name=failed,proto3" json:"failed,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *AssetIDResponse) Reset()         { *m = AssetIDResponse{} }
func (m *AssetIDResponse) String() string { return proto.CompactTextString(m) }
func (*AssetIDResponse) ProtoMessage()    {}
func (*AssetIDResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_014c8d2ea65f9050, []int{26}
}

func (m *AssetIDResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AssetIDResponse.Unmarshal(m, b)
}
func (m *AssetIDResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AssetIDResponse.Marshal(b, m, deterministic)
}
func (m *AssetIDResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AssetIDResponse.Merge(m, src)
}
func (m *AssetIDResponse) XXX_Size() int {
	return xxx_messageInfo_AssetIDResponse.Size(m)
}
func (m *AssetIDResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_AssetIDResponse.DiscardUnknown(m)
}

var xxx_messageInfo_AssetIDResponse proto.InternalMessageInfo

func (m *AssetIDResponse) GetPassed() []*AssetIDResult {
	if m != nil {
		return m.Passed
	}
	return nil
}

func (m *AssetIDResponse) GetFailed() []*AssetIDResult {
	if m != nil {
		return m.Failed
	}
	return nil
}

func init() {
	proto.RegisterType((*DeviceConfigsExistsRequest)(nil), "inventory.DeviceConfigsExistsRequest")
	proto.RegisterType((*DeviceConfigsExistsResponse)(nil), "inventory.DeviceConfigsExistsResponse")
	proto.RegisterMapType((map[int32]bool)(nil), "inventory.DeviceConfigsExistsResponse.ExistsEntry")
	proto.RegisterType((*DeviceOpResult)(nil), "inventory.DeviceOpResult")
	proto.RegisterType((*DeviceID)(nil), "inventory.DeviceID")
	proto.RegisterType((*AddCrosDevicesRequest)(nil), "inventory.AddCrosDevicesRequest")
	proto.RegisterType((*AddCrosDevicesResponse)(nil), "inventory.AddCrosDevicesResponse")
	proto.RegisterType((*GetCrosDevicesRequest)(nil), "inventory.GetCrosDevicesRequest")
	proto.RegisterType((*HwidData)(nil), "inventory.HwidData")
	proto.RegisterType((*ExtendedDeviceData)(nil), "inventory.ExtendedDeviceData")
	proto.RegisterType((*GetCrosDevicesResponse)(nil), "inventory.GetCrosDevicesResponse")
	proto.RegisterType((*UpdateDutsStatusRequest)(nil), "inventory.UpdateDutsStatusRequest")
	proto.RegisterType((*DutMeta)(nil), "inventory.DutMeta")
	proto.RegisterType((*LabMeta)(nil), "inventory.LabMeta")
	proto.RegisterType((*UpdateDutsStatusResponse)(nil), "inventory.UpdateDutsStatusResponse")
	proto.RegisterType((*UpdateCrosDevicesSetupRequest)(nil), "inventory.UpdateCrosDevicesSetupRequest")
	proto.RegisterType((*UpdateCrosDevicesSetupResponse)(nil), "inventory.UpdateCrosDevicesSetupResponse")
	proto.RegisterType((*DeleteCrosDevicesRequest)(nil), "inventory.DeleteCrosDevicesRequest")
	proto.RegisterType((*DeleteCrosDevicesRequest_Reason)(nil), "inventory.DeleteCrosDevicesRequest.Reason")
	proto.RegisterType((*DeleteCrosDevicesResponse)(nil), "inventory.DeleteCrosDevicesResponse")
	proto.RegisterType((*DeviceProperty)(nil), "inventory.DeviceProperty")
	proto.RegisterType((*DeviceProperty_Rpm)(nil), "inventory.DeviceProperty.Rpm")
	proto.RegisterType((*BatchUpdateDevicesRequest)(nil), "inventory.BatchUpdateDevicesRequest")
	proto.RegisterType((*BatchUpdateDevicesResponse)(nil), "inventory.BatchUpdateDevicesResponse")
	proto.RegisterType((*AssetResult)(nil), "inventory.AssetResult")
	proto.RegisterType((*AssetList)(nil), "inventory.AssetList")
	proto.RegisterType((*AssetResponse)(nil), "inventory.AssetResponse")
	proto.RegisterType((*AssetIDList)(nil), "inventory.AssetIDList")
	proto.RegisterType((*AssetIDResult)(nil), "inventory.AssetIDResult")
	proto.RegisterType((*AssetIDResponse)(nil), "inventory.AssetIDResponse")
}

func init() {
	proto.RegisterFile("infra/appengine/cros/lab_inventory/api/v1/service.proto", fileDescriptor_014c8d2ea65f9050)
}

var fileDescriptor_014c8d2ea65f9050 = []byte{
	// 1459 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xcc, 0x58, 0xeb, 0x72, 0xdb, 0xc4,
	0x17, 0xaf, 0xec, 0x5c, 0xac, 0x93, 0xd8, 0x49, 0xb7, 0xad, 0xff, 0xae, 0xda, 0xfc, 0x27, 0x55,
	0x48, 0x49, 0x3b, 0x20, 0xb5, 0x69, 0x87, 0x5b, 0xa1, 0x43, 0x13, 0x87, 0xc6, 0x4c, 0x6f, 0xa3,
	0x10, 0x18, 0x60, 0xa6, 0x9e, 0xb5, 0xb5, 0xb1, 0x35, 0xd5, 0x0d, 0xed, 0x2a, 0xa9, 0x1f, 0x02,
	0x9e, 0x80, 0x0f, 0x30, 0x03, 0x7c, 0xe4, 0x01, 0xe0, 0x0d, 0x78, 0x2a, 0x46, 0xbb, 0x2b, 0x5b,
	0xb2, 0x65, 0xa7, 0xe9, 0xe4, 0x03, 0xdf, 0x76, 0xcf, 0x9e, 0xdf, 0xef, 0x5c, 0xf6, 0xec, 0xd1,
	0xb1, 0xe1, 0x43, 0xc7, 0x3f, 0x8a, 0xb0, 0x89, 0xc3, 0x90, 0xf8, 0x3d, 0xc7, 0x27, 0x66, 0x37,
	0x0a, 0xa8, 0xe9, 0xe2, 0x4e, 0xdb, 0xf1, 0x8f, 0x89, 0xcf, 0x82, 0x68, 0x60, 0xe2, 0xd0, 0x31,
	0x8f, 0xef, 0x9a, 0x94, 0x44, 0xc7, 0x4e, 0x97, 0x18, 0x61, 0x14, 0xb0, 0x00, 0xa9, 0xc3, 0x73,
	0xed, 0x41, 0x2f, 0x30, 0xba, 0xfd, 0x28, 0xf0, 0x9c, 0xd8, 0x33, 0x82, 0xa8, 0x67, 0xa6, 0x9b,
	0x80, 0x9a, 0x82, 0x9e, 0x43, 0x4c, 0x1a, 0x75, 0x13, 0x66, 0xd3, 0x26, 0x23, 0x1e, 0xed, 0xe1,
	0x59, 0xc1, 0x31, 0x6b, 0x53, 0x86, 0xd9, 0xdb, 0xe0, 0x85, 0x61, 0xb3, 0x1b, 0xf8, 0x47, 0x4e,
	0x4f, 0xe2, 0xf7, 0xce, 0x80, 0xf7, 0xb0, 0x1f, 0x1f, 0xe1, 0x2e, 0x8b, 0x23, 0xc7, 0xef, 0xe5,
	0x69, 0xea, 0x39, 0xee, 0xb6, 0x63, 0x4b, 0xf9, 0x86, 0xe0, 0x70, 0x9d, 0x0e, 0x35, 0x8f, 0x5c,
	0x42, 0x98, 0xa0, 0xa3, 0x26, 0xa6, 0x94, 0x30, 0xa1, 0xa4, 0x3f, 0x01, 0xad, 0xc9, 0xe1, 0xbb,
	0x1c, 0x4d, 0xf7, 0x5e, 0x3b, 0x94, 0x51, 0x8b, 0xfc, 0x10, 0x13, 0xca, 0x90, 0x01, 0xaa, 0x60,
	0x6d, 0xd9, 0xb4, 0xa1, 0xac, 0x97, 0xb7, 0x96, 0xb6, 0x57, 0x0d, 0x99, 0xc3, 0x5d, 0x79, 0x60,
	0x8d, 0x54, 0xf4, 0xdf, 0x14, 0xb8, 0x56, 0x48, 0x47, 0xc3, 0xc0, 0xa7, 0x04, 0x7d, 0x09, 0x0b,
	0x84, 0x4b, 0x24, 0xd9, 0xb6, 0x31, 0xbc, 0x4a, 0x63, 0x06, 0xce, 0x10, 0xdb, 0x3d, 0x9f, 0x45,
	0x03, 0x4b, 0x32, 0x68, 0x1f, 0xc3, 0x52, 0x46, 0x8c, 0x56, 0xa1, 0xfc, 0x8a, 0x0c, 0x1a, 0xca,
	0xba, 0xb2, 0x35, 0x6f, 0x25, 0x4b, 0x74, 0x19, 0xe6, 0x8f, 0xb1, 0x1b, 0x93, 0x46, 0x69, 0x5d,
	0xd9, 0xaa, 0x58, 0x62, 0xf3, 0x49, 0xe9, 0x23, 0x45, 0xff, 0x16, 0x6a, 0xc2, 0xda, 0xf3, 0xd0,
	0x22, 0x34, 0x76, 0x19, 0xaa, 0x41, 0xc9, 0xb1, 0x39, 0x58, 0xb5, 0x4a, 0x8e, 0x8d, 0x34, 0xa8,
	0xf4, 0x03, 0xca, 0x7c, 0xec, 0x09, 0xb8, 0x6a, 0x0d, 0xf7, 0xe8, 0x1a, 0xa8, 0x24, 0x8a, 0x82,
	0xa8, 0xed, 0xd1, 0x5e, 0xa3, 0x2c, 0x0e, 0xb9, 0xe0, 0x29, 0xed, 0xe9, 0x2f, 0xa1, 0x22, 0xa8,
	0x5b, 0x4d, 0x74, 0x3d, 0x43, 0xc2, 0xa9, 0xf7, 0x2f, 0x64, 0x68, 0x0c, 0x40, 0xfc, 0xbe, 0x49,
	0x40, 0xdb, 0x22, 0xa5, 0x6d, 0xc7, 0x16, 0xc6, 0xf6, 0x2f, 0x58, 0xab, 0xe9, 0x99, 0x64, 0xb3,
	0x77, 0xe6, 0x12, 0x17, 0x75, 0x1f, 0xae, 0x3c, 0xb2, 0xed, 0xdd, 0x28, 0x3d, 0x18, 0x5e, 0xd5,
	0xfb, 0xb0, 0x28, 0x58, 0xd2, 0xdc, 0x5e, 0x32, 0x5c, 0xdc, 0x31, 0x76, 0x39, 0xcd, 0xf3, 0x03,
	0xa1, 0x6d, 0xa5, 0x3a, 0xe8, 0x26, 0xac, 0x84, 0x4e, 0xf7, 0x55, 0x3b, 0x79, 0x59, 0x41, 0x3b,
	0x0c, 0x22, 0x26, 0xd3, 0x54, 0x4d, 0xc4, 0x07, 0x89, 0xf4, 0x45, 0x10, 0x31, 0xfd, 0x67, 0x05,
	0xea, 0xe3, 0x06, 0xe5, 0x65, 0x7e, 0x0e, 0xb5, 0x30, 0x29, 0x25, 0xbb, 0x9d, 0x37, 0x7c, 0x75,
	0xe2, 0x52, 0xd3, 0x34, 0x5b, 0x55, 0x01, 0x90, 0x4c, 0x09, 0xc3, 0x11, 0x76, 0xdc, 0x0c, 0x43,
	0xe9, 0x54, 0x06, 0x01, 0x90, 0x0c, 0xfa, 0xd7, 0x70, 0xe5, 0x31, 0x61, 0x05, 0xe9, 0xd8, 0x84,
	0xb2, 0x63, 0x8f, 0x52, 0x31, 0xce, 0xd7, 0x6a, 0x5a, 0xc9, 0x39, 0xaa, 0xc3, 0x82, 0x17, 0xd8,
	0xc4, 0x15, 0x96, 0x55, 0x4b, 0xee, 0xf4, 0x0f, 0xa0, 0xb2, 0x7f, 0xe2, 0xd8, 0x4d, 0xcc, 0x70,
	0x52, 0x59, 0xf4, 0x55, 0x2c, 0x8b, 0x23, 0x59, 0xa2, 0x06, 0x2c, 0x1e, 0xe3, 0xc8, 0xc1, 0x3e,
	0x93, 0xc5, 0x91, 0x6e, 0xf5, 0xdf, 0x4b, 0x80, 0xf6, 0x5e, 0x33, 0xe2, 0xdb, 0xa9, 0x8f, 0x9c,
	0x62, 0x1b, 0x20, 0xe9, 0x6b, 0xe2, 0xa1, 0x70, 0xa6, 0x29, 0xf7, 0xa3, 0xba, 0xb8, 0x23, 0x9e,
	0x00, 0xba, 0x07, 0x55, 0x59, 0x16, 0x12, 0x56, 0xe2, 0xb0, 0x5a, 0xfe, 0xfd, 0x59, 0xcb, 0x76,
	0xe6, 0xdd, 0xa0, 0x7d, 0xb8, 0x9c, 0xeb, 0x14, 0x29, 0xb6, 0xcc, 0xb1, 0x57, 0x8c, 0xdc, 0x61,
	0x4a, 0x71, 0x29, 0x27, 0x95, 0x4c, 0x77, 0x40, 0xed, 0x9f, 0x38, 0x76, 0xdb, 0xc6, 0x0c, 0x37,
	0xe6, 0xa4, 0xc7, 0xa3, 0x34, 0xa6, 0xd9, 0xb1, 0x2a, 0xfd, 0x34, 0x4f, 0xb7, 0x41, 0x1d, 0x76,
	0xc8, 0xc6, 0x3c, 0x47, 0x54, 0x79, 0x8c, 0xcd, 0x98, 0x1d, 0x24, 0x42, 0xab, 0x62, 0xcb, 0x95,
	0xfe, 0xa3, 0x02, 0xf5, 0xf1, 0x8b, 0x93, 0x65, 0x75, 0x17, 0xe6, 0xb8, 0x4d, 0x71, 0x75, 0x6b,
	0x19, 0x9b, 0x93, 0x89, 0xb5, 0xb8, 0xea, 0x39, 0xd4, 0xd1, 0x5f, 0x0a, 0xfc, 0xef, 0x30, 0xb4,
	0x31, 0x23, 0xcd, 0x98, 0xd1, 0xc4, 0xc7, 0x38, 0x53, 0x4a, 0x0b, 0x3c, 0xa6, 0xb4, 0x9a, 0xc6,
	0x82, 0x92, 0x87, 0x49, 0x29, 0x45, 0x04, 0xd3, 0xc0, 0x97, 0x35, 0x21, 0x77, 0xc8, 0x14, 0x69,
	0xf1, 0x08, 0xc3, 0xb4, 0x51, 0xe6, 0x0c, 0x28, 0xeb, 0x57, 0xcc, 0x9e, 0x92, 0x24, 0x8f, 0xb6,
	0x58, 0xd0, 0x04, 0x90, 0x14, 0x8b, 0x00, 0xcc, 0x4d, 0x00, 0x9e, 0xe0, 0x8e, 0x00, 0xb8, 0x62,
	0x41, 0xf5, 0x10, 0x16, 0x25, 0x0b, 0x7a, 0xaf, 0xb0, 0xa9, 0x88, 0xd2, 0x9d, 0x68, 0x29, 0x68,
	0x03, 0xaa, 0x94, 0x44, 0x0e, 0x76, 0xdb, 0x7e, 0xec, 0x75, 0x48, 0x24, 0x3d, 0x5f, 0x16, 0xc2,
	0x67, 0x5c, 0x86, 0x10, 0xcc, 0xf5, 0x4f, 0x5a, 0x4d, 0xd9, 0xe9, 0xf8, 0x5a, 0x1f, 0xc0, 0xa2,
	0x74, 0xe3, 0x8c, 0x16, 0xd7, 0x00, 0x44, 0xc7, 0x61, 0x83, 0x30, 0xed, 0xac, 0x2a, 0x97, 0x7c,
	0x35, 0x08, 0x09, 0xba, 0x01, 0xcb, 0xd4, 0xc3, 0x11, 0x6b, 0xc7, 0xb4, 0xd3, 0x8f, 0x3b, 0xdc,
	0x66, 0xc5, 0x5a, 0xe2, 0xb2, 0x43, 0x2e, 0xd2, 0x7f, 0x51, 0xa0, 0x31, 0x79, 0x53, 0xb2, 0x76,
	0x76, 0x60, 0x25, 0xe6, 0x67, 0x67, 0xe8, 0x49, 0x35, 0x89, 0x38, 0xbf, 0xa6, 0xf4, 0x93, 0x02,
	0x6b, 0xc2, 0xc5, 0x4c, 0x7d, 0x1f, 0x10, 0x16, 0x87, 0x6f, 0xd9, 0xac, 0xa7, 0x95, 0x56, 0x41,
	0x13, 0x2f, 0x17, 0x35, 0xf1, 0x3f, 0x14, 0xf8, 0xff, 0x34, 0x87, 0xfe, 0x53, 0x99, 0xfb, 0x5b,
	0x81, 0x46, 0x93, 0xb8, 0x24, 0xe7, 0xe8, 0x19, 0x5b, 0xfa, 0x4e, 0x2e, 0x59, 0x4b, 0xdb, 0xb7,
	0x73, 0x9a, 0xc5, 0xdc, 0x86, 0xc5, 0x11, 0x69, 0x62, 0xb5, 0xfb, 0xb0, 0x20, 0x24, 0x49, 0xf3,
	0xef, 0xc4, 0xbd, 0xb4, 0xf9, 0x77, 0xe2, 0x5e, 0xd2, 0xfc, 0xbb, 0x81, 0xe7, 0x91, 0x51, 0xf3,
	0x97, 0x5b, 0xfd, 0x57, 0x05, 0xae, 0x16, 0x58, 0x18, 0x65, 0x38, 0x22, 0x5e, 0x70, 0x7c, 0xa6,
	0x0c, 0x4b, 0xc4, 0xf9, 0x65, 0xf8, 0x1f, 0x25, 0x9d, 0x7d, 0x5e, 0x44, 0x41, 0x48, 0x22, 0x36,
	0xc8, 0xcd, 0x3a, 0xca, 0xd8, 0xac, 0x83, 0x60, 0x2e, 0x0c, 0x02, 0x57, 0x46, 0xca, 0xd7, 0xc8,
	0x84, 0x72, 0x14, 0x7a, 0xf2, 0x93, 0xb2, 0x36, 0x61, 0x39, 0xe5, 0x35, 0xac, 0xd0, 0xb3, 0x12,
	0x4d, 0xed, 0x1b, 0x28, 0x5b, 0xa1, 0x87, 0x36, 0xa1, 0x16, 0x06, 0x27, 0x24, 0x8a, 0x7d, 0x87,
	0xb5, 0x33, 0xd6, 0xaa, 0x43, 0xe9, 0xb3, 0xc4, 0xe4, 0x2d, 0x58, 0x1d, 0xa9, 0x05, 0x31, 0x73,
	0x49, 0x9a, 0xe8, 0x95, 0xa1, 0xfc, 0x39, 0x17, 0xeb, 0x5d, 0xb8, 0xba, 0x83, 0x59, 0xb7, 0x2f,
	0xfb, 0x41, 0xbe, 0x5c, 0xbe, 0x80, 0x8b, 0xb2, 0x1f, 0x85, 0xc2, 0x23, 0x67, 0x46, 0xc6, 0x53,
	0xa7, 0xad, 0x55, 0x3b, 0xbb, 0x77, 0x08, 0xd5, 0xaf, 0x83, 0x56, 0x64, 0x44, 0xdc, 0xaa, 0x7e,
	0x00, 0x4b, 0x8f, 0x92, 0x71, 0x5a, 0xce, 0x91, 0xef, 0xc2, 0x3c, 0x9f, 0xae, 0xe5, 0x37, 0xfe,
	0xa2, 0xc1, 0x07, 0x6f, 0x63, 0xb7, 0x1f, 0x84, 0x54, 0xe8, 0x89, 0xf3, 0xfc, 0x10, 0x59, 0x1a,
	0x1b, 0x22, 0xef, 0x83, 0xca, 0x95, 0x9f, 0x38, 0x34, 0x47, 0x59, 0x9e, 0x45, 0xa9, 0x07, 0x50,
	0x4d, 0x5d, 0x11, 0x15, 0x67, 0xc0, 0x82, 0x98, 0xb7, 0x24, 0xb4, 0x9e, 0x09, 0x3b, 0xe3, 0xb4,
	0x25, 0xb5, 0x12, 0x7d, 0x51, 0x2c, 0xb2, 0xaa, 0xa6, 0xea, 0x0b, 0x2d, 0x7d, 0x4d, 0xc6, 0xde,
	0x6a, 0x72, 0x47, 0xd3, 0x19, 0xba, 0x2c, 0x66, 0x68, 0xfd, 0x53, 0xe9, 0x4f, 0xab, 0x39, 0x65,
	0xc8, 0x9e, 0x99, 0x83, 0x18, 0x56, 0x46, 0x68, 0x11, 0xcf, 0x9d, 0xb1, 0x78, 0x1a, 0xe3, 0xfe,
	0xa5, 0x96, 0x86, 0x11, 0xdd, 0x19, 0x8b, 0x68, 0x06, 0x42, 0xe8, 0x6d, 0xff, 0xb9, 0x08, 0x6a,
	0x2b, 0xd5, 0x41, 0x87, 0x50, 0xcb, 0x0f, 0xbf, 0x68, 0x3d, 0xcb, 0x50, 0x34, 0x88, 0x6b, 0x37,
	0x66, 0x68, 0xc8, 0x40, 0x0e, 0xa1, 0x96, 0x1f, 0x7e, 0x72, 0xb4, 0x85, 0x03, 0x6d, 0x8e, 0x76,
	0xca, 0xe4, 0xf4, 0x3d, 0xac, 0x8e, 0x7f, 0x19, 0x91, 0x9e, 0x81, 0x4d, 0x19, 0x70, 0xb4, 0x8d,
	0x99, 0x3a, 0x92, 0xdc, 0x83, 0x7a, 0xf1, 0x27, 0x04, 0x6d, 0x4d, 0xc0, 0xa7, 0x7c, 0xf6, 0xb4,
	0x5b, 0x6f, 0xa0, 0x29, 0xcd, 0xbd, 0x84, 0x8b, 0x13, 0xad, 0x14, 0x6d, 0xbc, 0x41, 0x2b, 0xd7,
	0xde, 0x99, 0xad, 0x24, 0xf9, 0x31, 0xa0, 0xc9, 0x57, 0x8d, 0xb2, 0xd8, 0xa9, 0x9d, 0x45, 0xdb,
	0x3c, 0x45, 0x4b, 0x9a, 0x78, 0x00, 0xea, 0x23, 0xdb, 0xe6, 0x65, 0x46, 0xd1, 0xe5, 0xf1, 0xca,
	0x4b, 0x9e, 0x8c, 0xd6, 0x28, 0x78, 0x61, 0x02, 0xfc, 0x19, 0xa8, 0x8f, 0x09, 0x93, 0xe0, 0xfa,
	0x64, 0xd9, 0x9e, 0x02, 0xdf, 0x81, 0x65, 0x11, 0xfb, 0x29, 0x0c, 0x5a, 0xe1, 0x83, 0x10, 0x1c,
	0x0f, 0x61, 0x59, 0x04, 0xf6, 0x96, 0x21, 0xd8, 0x70, 0xa9, 0xe0, 0x37, 0x3d, 0xda, 0x3c, 0xed,
	0x37, 0xbf, 0x48, 0xf2, 0xcd, 0x37, 0xfb, 0x6b, 0x60, 0x67, 0xfe, 0xbb, 0x32, 0x0e, 0x9d, 0xce,
	0x02, 0xff, 0x3b, 0xe3, 0xde, 0xbf, 0x01, 0x00, 0x00, 0xff, 0xff, 0xeb, 0x77, 0xb7, 0x86, 0x55,
	0x12, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// InventoryClient is the client API for Inventory service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type InventoryClient interface {
	// AddCrosDevices adds new Chrome OS devices to the inventory.
	AddCrosDevices(ctx context.Context, in *AddCrosDevicesRequest, opts ...grpc.CallOption) (*AddCrosDevicesResponse, error)
	// GetCrosDevices retrieves requested Chrome OS devices from the inventory.
	GetCrosDevices(ctx context.Context, in *GetCrosDevicesRequest, opts ...grpc.CallOption) (*GetCrosDevicesResponse, error)
	// UpdateDutsStatus updates selected Duts' status labels related to testing.
	UpdateDutsStatus(ctx context.Context, in *UpdateDutsStatusRequest, opts ...grpc.CallOption) (*UpdateDutsStatusResponse, error)
	// UpdateCrosDevicesSetup updates the selected Chrome OS devices setup data
	// in the inventory.
	UpdateCrosDevicesSetup(ctx context.Context, in *UpdateCrosDevicesSetupRequest, opts ...grpc.CallOption) (*UpdateCrosDevicesSetupResponse, error)
	// DeleteCrosDevices delete the selelcted devices from the inventory.
	DeleteCrosDevices(ctx context.Context, in *DeleteCrosDevicesRequest, opts ...grpc.CallOption) (*DeleteCrosDevicesResponse, error)
	// BatchUpdateDevices updates some specific device properties in batch.
	BatchUpdateDevices(ctx context.Context, in *BatchUpdateDevicesRequest, opts ...grpc.CallOption) (*BatchUpdateDevicesResponse, error)
	// Add asset information
	AddAssets(ctx context.Context, in *AssetList, opts ...grpc.CallOption) (*AssetResponse, error)
	// Get asset information
	GetAssets(ctx context.Context, in *AssetIDList, opts ...grpc.CallOption) (*AssetResponse, error)
	// Delete asset information
	DeleteAssets(ctx context.Context, in *AssetIDList, opts ...grpc.CallOption) (*AssetIDResponse, error)
	// Update asset information
	UpdateAssets(ctx context.Context, in *AssetList, opts ...grpc.CallOption) (*AssetResponse, error)
	// DeviceConfigsExists checks if the device_configs exists in the datastore
	DeviceConfigsExists(ctx context.Context, in *DeviceConfigsExistsRequest, opts ...grpc.CallOption) (*DeviceConfigsExistsResponse, error)
}
type inventoryPRPCClient struct {
	client *prpc.Client
}

func NewInventoryPRPCClient(client *prpc.Client) InventoryClient {
	return &inventoryPRPCClient{client}
}

func (c *inventoryPRPCClient) AddCrosDevices(ctx context.Context, in *AddCrosDevicesRequest, opts ...grpc.CallOption) (*AddCrosDevicesResponse, error) {
	out := new(AddCrosDevicesResponse)
	err := c.client.Call(ctx, "inventory.Inventory", "AddCrosDevices", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inventoryPRPCClient) GetCrosDevices(ctx context.Context, in *GetCrosDevicesRequest, opts ...grpc.CallOption) (*GetCrosDevicesResponse, error) {
	out := new(GetCrosDevicesResponse)
	err := c.client.Call(ctx, "inventory.Inventory", "GetCrosDevices", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inventoryPRPCClient) UpdateDutsStatus(ctx context.Context, in *UpdateDutsStatusRequest, opts ...grpc.CallOption) (*UpdateDutsStatusResponse, error) {
	out := new(UpdateDutsStatusResponse)
	err := c.client.Call(ctx, "inventory.Inventory", "UpdateDutsStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inventoryPRPCClient) UpdateCrosDevicesSetup(ctx context.Context, in *UpdateCrosDevicesSetupRequest, opts ...grpc.CallOption) (*UpdateCrosDevicesSetupResponse, error) {
	out := new(UpdateCrosDevicesSetupResponse)
	err := c.client.Call(ctx, "inventory.Inventory", "UpdateCrosDevicesSetup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inventoryPRPCClient) DeleteCrosDevices(ctx context.Context, in *DeleteCrosDevicesRequest, opts ...grpc.CallOption) (*DeleteCrosDevicesResponse, error) {
	out := new(DeleteCrosDevicesResponse)
	err := c.client.Call(ctx, "inventory.Inventory", "DeleteCrosDevices", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inventoryPRPCClient) BatchUpdateDevices(ctx context.Context, in *BatchUpdateDevicesRequest, opts ...grpc.CallOption) (*BatchUpdateDevicesResponse, error) {
	out := new(BatchUpdateDevicesResponse)
	err := c.client.Call(ctx, "inventory.Inventory", "BatchUpdateDevices", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inventoryPRPCClient) AddAssets(ctx context.Context, in *AssetList, opts ...grpc.CallOption) (*AssetResponse, error) {
	out := new(AssetResponse)
	err := c.client.Call(ctx, "inventory.Inventory", "AddAssets", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inventoryPRPCClient) GetAssets(ctx context.Context, in *AssetIDList, opts ...grpc.CallOption) (*AssetResponse, error) {
	out := new(AssetResponse)
	err := c.client.Call(ctx, "inventory.Inventory", "GetAssets", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inventoryPRPCClient) DeleteAssets(ctx context.Context, in *AssetIDList, opts ...grpc.CallOption) (*AssetIDResponse, error) {
	out := new(AssetIDResponse)
	err := c.client.Call(ctx, "inventory.Inventory", "DeleteAssets", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inventoryPRPCClient) UpdateAssets(ctx context.Context, in *AssetList, opts ...grpc.CallOption) (*AssetResponse, error) {
	out := new(AssetResponse)
	err := c.client.Call(ctx, "inventory.Inventory", "UpdateAssets", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inventoryPRPCClient) DeviceConfigsExists(ctx context.Context, in *DeviceConfigsExistsRequest, opts ...grpc.CallOption) (*DeviceConfigsExistsResponse, error) {
	out := new(DeviceConfigsExistsResponse)
	err := c.client.Call(ctx, "inventory.Inventory", "DeviceConfigsExists", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

type inventoryClient struct {
	cc grpc.ClientConnInterface
}

func NewInventoryClient(cc grpc.ClientConnInterface) InventoryClient {
	return &inventoryClient{cc}
}

func (c *inventoryClient) AddCrosDevices(ctx context.Context, in *AddCrosDevicesRequest, opts ...grpc.CallOption) (*AddCrosDevicesResponse, error) {
	out := new(AddCrosDevicesResponse)
	err := c.cc.Invoke(ctx, "/inventory.Inventory/AddCrosDevices", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inventoryClient) GetCrosDevices(ctx context.Context, in *GetCrosDevicesRequest, opts ...grpc.CallOption) (*GetCrosDevicesResponse, error) {
	out := new(GetCrosDevicesResponse)
	err := c.cc.Invoke(ctx, "/inventory.Inventory/GetCrosDevices", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inventoryClient) UpdateDutsStatus(ctx context.Context, in *UpdateDutsStatusRequest, opts ...grpc.CallOption) (*UpdateDutsStatusResponse, error) {
	out := new(UpdateDutsStatusResponse)
	err := c.cc.Invoke(ctx, "/inventory.Inventory/UpdateDutsStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inventoryClient) UpdateCrosDevicesSetup(ctx context.Context, in *UpdateCrosDevicesSetupRequest, opts ...grpc.CallOption) (*UpdateCrosDevicesSetupResponse, error) {
	out := new(UpdateCrosDevicesSetupResponse)
	err := c.cc.Invoke(ctx, "/inventory.Inventory/UpdateCrosDevicesSetup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inventoryClient) DeleteCrosDevices(ctx context.Context, in *DeleteCrosDevicesRequest, opts ...grpc.CallOption) (*DeleteCrosDevicesResponse, error) {
	out := new(DeleteCrosDevicesResponse)
	err := c.cc.Invoke(ctx, "/inventory.Inventory/DeleteCrosDevices", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inventoryClient) BatchUpdateDevices(ctx context.Context, in *BatchUpdateDevicesRequest, opts ...grpc.CallOption) (*BatchUpdateDevicesResponse, error) {
	out := new(BatchUpdateDevicesResponse)
	err := c.cc.Invoke(ctx, "/inventory.Inventory/BatchUpdateDevices", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inventoryClient) AddAssets(ctx context.Context, in *AssetList, opts ...grpc.CallOption) (*AssetResponse, error) {
	out := new(AssetResponse)
	err := c.cc.Invoke(ctx, "/inventory.Inventory/AddAssets", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inventoryClient) GetAssets(ctx context.Context, in *AssetIDList, opts ...grpc.CallOption) (*AssetResponse, error) {
	out := new(AssetResponse)
	err := c.cc.Invoke(ctx, "/inventory.Inventory/GetAssets", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inventoryClient) DeleteAssets(ctx context.Context, in *AssetIDList, opts ...grpc.CallOption) (*AssetIDResponse, error) {
	out := new(AssetIDResponse)
	err := c.cc.Invoke(ctx, "/inventory.Inventory/DeleteAssets", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inventoryClient) UpdateAssets(ctx context.Context, in *AssetList, opts ...grpc.CallOption) (*AssetResponse, error) {
	out := new(AssetResponse)
	err := c.cc.Invoke(ctx, "/inventory.Inventory/UpdateAssets", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inventoryClient) DeviceConfigsExists(ctx context.Context, in *DeviceConfigsExistsRequest, opts ...grpc.CallOption) (*DeviceConfigsExistsResponse, error) {
	out := new(DeviceConfigsExistsResponse)
	err := c.cc.Invoke(ctx, "/inventory.Inventory/DeviceConfigsExists", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// InventoryServer is the server API for Inventory service.
type InventoryServer interface {
	// AddCrosDevices adds new Chrome OS devices to the inventory.
	AddCrosDevices(context.Context, *AddCrosDevicesRequest) (*AddCrosDevicesResponse, error)
	// GetCrosDevices retrieves requested Chrome OS devices from the inventory.
	GetCrosDevices(context.Context, *GetCrosDevicesRequest) (*GetCrosDevicesResponse, error)
	// UpdateDutsStatus updates selected Duts' status labels related to testing.
	UpdateDutsStatus(context.Context, *UpdateDutsStatusRequest) (*UpdateDutsStatusResponse, error)
	// UpdateCrosDevicesSetup updates the selected Chrome OS devices setup data
	// in the inventory.
	UpdateCrosDevicesSetup(context.Context, *UpdateCrosDevicesSetupRequest) (*UpdateCrosDevicesSetupResponse, error)
	// DeleteCrosDevices delete the selelcted devices from the inventory.
	DeleteCrosDevices(context.Context, *DeleteCrosDevicesRequest) (*DeleteCrosDevicesResponse, error)
	// BatchUpdateDevices updates some specific device properties in batch.
	BatchUpdateDevices(context.Context, *BatchUpdateDevicesRequest) (*BatchUpdateDevicesResponse, error)
	// Add asset information
	AddAssets(context.Context, *AssetList) (*AssetResponse, error)
	// Get asset information
	GetAssets(context.Context, *AssetIDList) (*AssetResponse, error)
	// Delete asset information
	DeleteAssets(context.Context, *AssetIDList) (*AssetIDResponse, error)
	// Update asset information
	UpdateAssets(context.Context, *AssetList) (*AssetResponse, error)
	// DeviceConfigsExists checks if the device_configs exists in the datastore
	DeviceConfigsExists(context.Context, *DeviceConfigsExistsRequest) (*DeviceConfigsExistsResponse, error)
}

// UnimplementedInventoryServer can be embedded to have forward compatible implementations.
type UnimplementedInventoryServer struct {
}

func (*UnimplementedInventoryServer) AddCrosDevices(ctx context.Context, req *AddCrosDevicesRequest) (*AddCrosDevicesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddCrosDevices not implemented")
}
func (*UnimplementedInventoryServer) GetCrosDevices(ctx context.Context, req *GetCrosDevicesRequest) (*GetCrosDevicesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCrosDevices not implemented")
}
func (*UnimplementedInventoryServer) UpdateDutsStatus(ctx context.Context, req *UpdateDutsStatusRequest) (*UpdateDutsStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateDutsStatus not implemented")
}
func (*UnimplementedInventoryServer) UpdateCrosDevicesSetup(ctx context.Context, req *UpdateCrosDevicesSetupRequest) (*UpdateCrosDevicesSetupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCrosDevicesSetup not implemented")
}
func (*UnimplementedInventoryServer) DeleteCrosDevices(ctx context.Context, req *DeleteCrosDevicesRequest) (*DeleteCrosDevicesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCrosDevices not implemented")
}
func (*UnimplementedInventoryServer) BatchUpdateDevices(ctx context.Context, req *BatchUpdateDevicesRequest) (*BatchUpdateDevicesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchUpdateDevices not implemented")
}
func (*UnimplementedInventoryServer) AddAssets(ctx context.Context, req *AssetList) (*AssetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddAssets not implemented")
}
func (*UnimplementedInventoryServer) GetAssets(ctx context.Context, req *AssetIDList) (*AssetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAssets not implemented")
}
func (*UnimplementedInventoryServer) DeleteAssets(ctx context.Context, req *AssetIDList) (*AssetIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAssets not implemented")
}
func (*UnimplementedInventoryServer) UpdateAssets(ctx context.Context, req *AssetList) (*AssetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAssets not implemented")
}
func (*UnimplementedInventoryServer) DeviceConfigsExists(ctx context.Context, req *DeviceConfigsExistsRequest) (*DeviceConfigsExistsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeviceConfigsExists not implemented")
}

func RegisterInventoryServer(s prpc.Registrar, srv InventoryServer) {
	s.RegisterService(&_Inventory_serviceDesc, srv)
}

func _Inventory_AddCrosDevices_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddCrosDevicesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InventoryServer).AddCrosDevices(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/inventory.Inventory/AddCrosDevices",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InventoryServer).AddCrosDevices(ctx, req.(*AddCrosDevicesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Inventory_GetCrosDevices_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCrosDevicesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InventoryServer).GetCrosDevices(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/inventory.Inventory/GetCrosDevices",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InventoryServer).GetCrosDevices(ctx, req.(*GetCrosDevicesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Inventory_UpdateDutsStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateDutsStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InventoryServer).UpdateDutsStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/inventory.Inventory/UpdateDutsStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InventoryServer).UpdateDutsStatus(ctx, req.(*UpdateDutsStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Inventory_UpdateCrosDevicesSetup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCrosDevicesSetupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InventoryServer).UpdateCrosDevicesSetup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/inventory.Inventory/UpdateCrosDevicesSetup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InventoryServer).UpdateCrosDevicesSetup(ctx, req.(*UpdateCrosDevicesSetupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Inventory_DeleteCrosDevices_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteCrosDevicesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InventoryServer).DeleteCrosDevices(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/inventory.Inventory/DeleteCrosDevices",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InventoryServer).DeleteCrosDevices(ctx, req.(*DeleteCrosDevicesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Inventory_BatchUpdateDevices_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchUpdateDevicesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InventoryServer).BatchUpdateDevices(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/inventory.Inventory/BatchUpdateDevices",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InventoryServer).BatchUpdateDevices(ctx, req.(*BatchUpdateDevicesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Inventory_AddAssets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AssetList)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InventoryServer).AddAssets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/inventory.Inventory/AddAssets",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InventoryServer).AddAssets(ctx, req.(*AssetList))
	}
	return interceptor(ctx, in, info, handler)
}

func _Inventory_GetAssets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AssetIDList)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InventoryServer).GetAssets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/inventory.Inventory/GetAssets",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InventoryServer).GetAssets(ctx, req.(*AssetIDList))
	}
	return interceptor(ctx, in, info, handler)
}

func _Inventory_DeleteAssets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AssetIDList)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InventoryServer).DeleteAssets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/inventory.Inventory/DeleteAssets",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InventoryServer).DeleteAssets(ctx, req.(*AssetIDList))
	}
	return interceptor(ctx, in, info, handler)
}

func _Inventory_UpdateAssets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AssetList)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InventoryServer).UpdateAssets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/inventory.Inventory/UpdateAssets",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InventoryServer).UpdateAssets(ctx, req.(*AssetList))
	}
	return interceptor(ctx, in, info, handler)
}

func _Inventory_DeviceConfigsExists_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeviceConfigsExistsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InventoryServer).DeviceConfigsExists(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/inventory.Inventory/DeviceConfigsExists",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InventoryServer).DeviceConfigsExists(ctx, req.(*DeviceConfigsExistsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Inventory_serviceDesc = grpc.ServiceDesc{
	ServiceName: "inventory.Inventory",
	HandlerType: (*InventoryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddCrosDevices",
			Handler:    _Inventory_AddCrosDevices_Handler,
		},
		{
			MethodName: "GetCrosDevices",
			Handler:    _Inventory_GetCrosDevices_Handler,
		},
		{
			MethodName: "UpdateDutsStatus",
			Handler:    _Inventory_UpdateDutsStatus_Handler,
		},
		{
			MethodName: "UpdateCrosDevicesSetup",
			Handler:    _Inventory_UpdateCrosDevicesSetup_Handler,
		},
		{
			MethodName: "DeleteCrosDevices",
			Handler:    _Inventory_DeleteCrosDevices_Handler,
		},
		{
			MethodName: "BatchUpdateDevices",
			Handler:    _Inventory_BatchUpdateDevices_Handler,
		},
		{
			MethodName: "AddAssets",
			Handler:    _Inventory_AddAssets_Handler,
		},
		{
			MethodName: "GetAssets",
			Handler:    _Inventory_GetAssets_Handler,
		},
		{
			MethodName: "DeleteAssets",
			Handler:    _Inventory_DeleteAssets_Handler,
		},
		{
			MethodName: "UpdateAssets",
			Handler:    _Inventory_UpdateAssets_Handler,
		},
		{
			MethodName: "DeviceConfigsExists",
			Handler:    _Inventory_DeviceConfigsExists_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "infra/appengine/cros/lab_inventory/api/v1/service.proto",
}
