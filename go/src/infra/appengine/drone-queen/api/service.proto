// Copyright 2019 The LUCI Authors. All rights reserved.
// Use of this source code is governed under the Apache License, Version 2.0
// that can be found in the LICENSE file.

syntax = "proto3";

import "google/protobuf/timestamp.proto";

package drone_queen;

option go_package = "api";

service Drone {
  // ReportDrone is called by drones to report liveness and get DUT
  // assignments.
  //
  // See the README for details on the contract that the drone must
  // follow.
  rpc ReportDrone(ReportDroneRequest) returns (ReportDroneResponse);

  // ReleaseDuts is called by drones to release ownership of DUTs.
  rpc ReleaseDuts(ReleaseDutsRequest) returns (ReleaseDutsResponse);
}

service InventoryProvider {
  // DeclareDuts tells the service about all of the DUTs available to
  // assign to drones.
  rpc DeclareDuts(DeclareDutsRequest) returns (DeclareDutsResponse);
}

// Inspect service provides RPCs for interactive inspection/debugging.
// These RPCs have no backward compatibility or stability guarantees.
service Inspect {
  rpc ListDrones(ListDronesRequest) returns (ListDronesResponse);
  rpc ListDuts(ListDutsRequest) returns (ListDutsResponse);
}

message ReportDroneRequest {
  // drone_uuid is the UUID assigned to the drone.  New drones should
  // leave this empty; a new UUID will be assigned to the drone.
  string drone_uuid = 1;
  // load_indicators are used for load balancing.
  LoadIndicators load_indicators = 2;
  // drone_description is a human friendly description of the current drone.
  string drone_description = 3;
  message LoadIndicators {
    // dut_capacity is a simple load indicator that indicates how many
    // total DUTs the drone can support.
    uint32 dut_capacity = 1;
  }
}
message ReportDroneResponse {
  // status reports the status of the call.  It is important to check
  // this for errors.
  Status status = 1;
  enum Status {
    // UNKNOWN_ERROR should not be used normally.  It is the default
    // value if the status is missing or unknown.  For example, if the
    // service uses a new enum value that the client does not know
    // about yet, the client will use the default value.
    UNKNOWN_ERROR = 0;
    OK = 1;
    UNKNOWN_UUID = 2;
  }
  // drone_uuid is the UUID assigned to the drone.  If drone_uuid was
  // set in the request, this field will either have the same value or
  // be omitted.
  string drone_uuid = 2;
  // expiration_time is when the current assignment expires.
  google.protobuf.Timestamp expiration_time = 3;
  // assigned_duts are the DUTs assigned to the drone.
  repeated string assigned_duts = 4;
  // draining_duts are the DUTs that the drone should drain.  This is
  // always a subset of assigned_duts.
  repeated string draining_duts = 5;
}

message ReleaseDutsRequest {
  // drone_uuid is the UUID assigned to the drone.
  string drone_uuid = 1;
  // duts to release.  It is not an error if a DUT is not assigned to
  // the drone.
  repeated string duts = 2;
}
message ReleaseDutsResponse {}

message DeclareDutsRequest {
  // duts is all of the DUTs to be made available to drones.  DUTs
  // omitted from this list will be drained and deleted.
  repeated string duts = 1;
}
message DeclareDutsResponse {}

message ListDronesRequest {}
message ListDronesResponse {
  message Drone {
    string id = 1;
    google.protobuf.Timestamp expiration_time = 2;
    string drone_description = 3;
  }
  repeated Drone drones = 1;
}

message ListDutsRequest {}
message ListDutsResponse {
  message Dut {
    string id = 1;
    string assigned_drone = 2;
    bool draining = 3;
  }
  repeated Dut duts = 1;
}
