// Definitions for the RotaNG OncallInfo Service.
// This API can be used to query information about
// who's currently oncall or for an arbitrary time
// range.
syntax = "proto3";

package rotangapi;

import "google/protobuf/timestamp.proto";
import "google/protobuf/duration.proto";

// The OncallInfo service provides an API to get who's on-call
// information from RotaNG.
service OncallInfo {
  // Oncall can be used to get the current oncaller(s) for the
  // provided rotation.
  rpc Oncall(OncallRequest) returns (OncallResponse) {}
  // ListRotations lists all configured rotations.
  rpc ListRotations(ListRotationsRequest) returns (ListRotationsResponse) {}
  // Shifts returns ShiftEntries for a specific time range.
  // Leaving times empty returns all shifts.
  rpc Shifts(ShiftsRequest) returns (ShiftsResponse) {}
  // MigrationInfo returns ShiftEntries and members together with
  // relevant rotation configuration.
  rpc MigrationInfo(MigrationInfoRequest) returns(MigrationInfoResponse) {}
}


// OncallRequest contains the name of the rotation of interest.
message OncallRequest {
  // name is a required field containing the name of the rotation
  // of interest.
  string name = 1;
}

// OncallResponse contains the current on-callers for a rotation.
message OncallResponse {
  // shift contains the current shift entry for the specified rotation.
  ShiftEntry shift = 1;
  // tz_consider indicates if the rotation generator considers the TimeZone
  // of members when scheduling memmbers.
  // A rotation using a Generator considering timezones will generatate a shift
  // with one on-caller per TZ of their members.
  // Eg. if a rotation have members:
  //
  // Australia/Sydney:
  //  syd1@oncall.com
  //  syd2@oncall.com
  // EST
  //  est1@oncall.com
  //  est2@oncall.com
  // US/Pacific
  //  mtv1@oncall.com
  //  mtv2@oncall.com
  // UTC
  //  utc1@oncall.com
  //  utc2@oncall.com
  //
  // A rotation using a tz_consider generator would generate a shift with one
  // member from each TZ.
  //   syd1@oncall.com , est1@oncall.com , mtv1@oncall.com and utc1@oncall.com
  bool tz_consider = 2;
}

// ListRotationsRequest is used to get a list of all configured rotations.
message ListRotationsRequest {}

// ListRotationsResponse contains the configured rotations.
message ListRotationsResponse {
  repeated Rotation rotations = 1;
}

// ShiftsRequest defines shifts of interest to fetch.
message ShiftsRequest {
  // name is a required field containing the rotation name of interest.
  string name = 1;
  // start contains the beginning of the time range of interest.
  // Leaving this field empty will fetch shifts from the beginning of time.
  google.protobuf.Timestamp start = 2;
  // end contains the end of the time range of interest.
  // Leaving this field empty will fetch shift to the end of time.
  google.protobuf.Timestamp end = 3;
}

// ShiftsResponse contains the shifts requested by ShiftsRequest.
message ShiftsResponse {
  repeated ShiftEntry shifts = 1;
}

// MigrationsInfoRequest identifies the rotation information to fetch
// along with a timerange for shifts of interest.
message MigrationInfoRequest {
  // name is a required field containing the rotation name of interest.
  // Requester needs to be an owner of the requested rotation.
  string name = 1;
  // start contains the beginning of the time range of interest.
  // Leaving this field empty will fetch shifts from the beginning
  // of time.
  google.protobuf.Timestamp start = 2;
  // end contains the end of the time range of interest.
  // Leaving this field empty will fetch shifts to the end of time.
  google.protobuf.Timestamp end = 3;

}

// MigrationInfoResponse contain information needed for migrating a
// RotaNG rotation to another scheduler.
message MigrationInfoResponse {
  string name = 1;
  // The calendar currently configured for this rotation.
  string calendar = 2;

  // owners contain the email addresses of the rotation owners.
  repeated string owners = 3;

  // tz_consider indicates that this rotation is using a genarator
  // that is TZ aware.
  bool tz_consider = 4;

  // members lists all members of the rotation.
  repeated TZGroup members = 5;

  // shifts lists shifts in the requested range.
  repeated ShiftEntry shifts = 6;
}

// TZGroup represents a group of members in a particular business group.
message TZGroup {
  // business_group identifies the business group the members belong to.
  // If the rotation don't use a timezone aware generator there will
  // be a single group named "default".
  string business_group = 1;
  repeated OnCaller members = 2;
}

// Shift defines a shift configuration.
// RotaNG supports rotations with multiple shifts.
// Eg. follow-the-sun configurations:
// Shift:
//   SYD: 8hours
//   MTV: 8hours
//   EY:  8hours.
message ShiftConfiguration {
  string name = 1;
  google.protobuf.Duration duration = 2;
  repeated ShiftEntry entries = 3;
}

// ShiftEntry defines a single shift.
message ShiftEntry {
  // name is the Shift configuration this entry belongs to.
  string name = 1;
  // oncallers is the email addresses of the members on-call
  // for this shift.
  repeated OnCaller oncallers = 2;
  // start is the start of this shift.
  google.protobuf.Timestamp start = 3;
  // end is the end of the shift.
  google.protobuf.Timestamp end = 4;
  // comment contains an optional comment about this shift.
  // Eg. Information about a shift swap.
  string comment = 5;
  // event_id contains the Google Calendar Event ID of this shift.
  // Only enabled rotations will have event_id's.
  string event_id = 6;
}

// OnCaller contains one member on-call for a shift.
message OnCaller {
  string email = 1;
  string name = 2;
  string tz = 3;
}

// Rotation contains the Rotation information returned by the List
// RPC call.
message Rotation {
  // name contain the name of the rotation.
  string name = 1;
  // enabled signifies if the rotation is enabled.
  // A rotation needs to be enabled to create/modify Google calendar
  // events and sending e-mails.
  bool enabled = 2;
  // external signifies if this rotation is external.
  // An external rotation fetches shifts from a shared calendar.
  // Commonly used to get G3 oncall information in to RotaNG.
  bool external = 3;
}

// The RotationAdmin service provides an API to manage Rotation configurations.
service RotationAdmin {
  // CreateExternal creates a new external rotation.
  // An external rotation scrapes a calendar to populate it's shifts.
  rpc CreateExternal(CreateExternalRequest) returns (CreateExternalResponse) {}
  // DeleteExternal deletes an existing external rotation.
  rpc DeleteExternal(DeleteExternalRequest) returns (DeleteExternalResponse) {}
}

// CreateExternal request contain the information needed to create an external
// rotation.
message CreateExternalRequest {
  // name is a required field naming the new rotation.
  string name = 1;
  // calendar is a required field specifying the Google calendar ID
  // of the rotation calendar.
  // Service account `rota-ng@appspot.gserviceaccount.com` need to have permissions
  // to read events from the calendar.
  string calendar = 2;
  // owners_email is a required field containing a list of owners e-mail addresses.
  repeated string owners_emails = 3;
  // description is an optional field describing the rotation.
  string description = 4;
  // match is a required field matching the Summary of the event.
  // Eg. from the CCI-Trooper rotation.
  //
  // With summary of an event looks something like this.
  //
  //  `CCI-Trooper: primary, secondary`
  //
  // The match filed should be set to `CCI-Trooper:`
  string match = 5;
}

// CreateExternalResponse is the result of a CreateRequest.
message CreateExternalResponse {
}

message DeleteExternalRequest {
  string name = 1;
}

message DeleteExternalResponse {
}

// The MemberAdmin service provides an API to handle rotation members..
service MemberAdmin {
  // RotationMembers returns the members of a rotation together with when they were last OnCall and OOO information.
  // Owner permissions for the rotation is required.
  rpc RotationMembers(RotationMembersRequest) returns (RotationMembersResponse) {}
  // MakeAllMembersOwners makes all rotation members part of the rotation Owners.
  // In cases where the caller is an owner of a rotation but not a member the caller will be added
  // to the owners along with all the members.
  rpc MakeAllMembersOwners(MakeAllMembersOwnersRequest) returns (MakeAllMembersOwnersResponse) {}
}

message RotationMembersRequest {
  string name = 1;
}

message RotationMembersResponse {
  string rotation = 1;
  repeated MemberInfo members = 2;
}

message MemberInfo {
  OnCaller member = 2;
  repeated ShiftEntry oncall_shifts = 3;
  repeated OOO ooo = 4;
}

message OOO {
  google.protobuf.Timestamp start = 1;
  google.protobuf.Timestamp end = 2;
  string comment = 3;
}

message MakeAllMembersOwnersRequest {
  string name = 1;
}

message MakeAllMembersOwnersResponse {
}
