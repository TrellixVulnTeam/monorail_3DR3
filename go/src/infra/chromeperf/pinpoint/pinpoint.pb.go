// Code generated by protoc-gen-go. DO NOT EDIT.
// source: infra/chromeperf/pinpoint/pinpoint.proto

package pinpoint

import prpc "go.chromium.org/luci/grpc/prpc"

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Supported statistics for when performing statistical analysis/comparisons.
type TelemetryBenchmark_Statistic int32

const (
	// If unspecified, lets Pinpoint determine the default statistic to use
	// depending on the mode.
	TelemetryBenchmark_STATISTIC_UNSPECIFIED TelemetryBenchmark_Statistic = 0
	// Use all the sample values when performing statistical
	// analysis/comparisons.
	TelemetryBenchmark_NONE TelemetryBenchmark_Statistic = 1
	// All the following values select the appropriate statistic across
	// multiple attempts, and performs statistical analysis on these values,
	// instead of the raw sample values.
	TelemetryBenchmark_MIN     TelemetryBenchmark_Statistic = 2
	TelemetryBenchmark_MAX     TelemetryBenchmark_Statistic = 3
	TelemetryBenchmark_MEAN    TelemetryBenchmark_Statistic = 4
	TelemetryBenchmark_STD_DEV TelemetryBenchmark_Statistic = 5
	TelemetryBenchmark_MEDIAN  TelemetryBenchmark_Statistic = 6
	TelemetryBenchmark_PCT90   TelemetryBenchmark_Statistic = 7
	TelemetryBenchmark_PCT99   TelemetryBenchmark_Statistic = 8
)

var TelemetryBenchmark_Statistic_name = map[int32]string{
	0: "STATISTIC_UNSPECIFIED",
	1: "NONE",
	2: "MIN",
	3: "MAX",
	4: "MEAN",
	5: "STD_DEV",
	6: "MEDIAN",
	7: "PCT90",
	8: "PCT99",
}

var TelemetryBenchmark_Statistic_value = map[string]int32{
	"STATISTIC_UNSPECIFIED": 0,
	"NONE":                  1,
	"MIN":                   2,
	"MAX":                   3,
	"MEAN":                  4,
	"STD_DEV":               5,
	"MEDIAN":                6,
	"PCT90":                 7,
	"PCT99":                 8,
}

func (x TelemetryBenchmark_Statistic) String() string {
	return proto.EnumName(TelemetryBenchmark_Statistic_name, int32(x))
}

func (TelemetryBenchmark_Statistic) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_a838ff8109779ab1, []int{0, 0}
}

// The comparison mode used by Pinpoint in this job.
type JobSpec_ComparisonMode int32

const (
	// If unspecified, it's as if 'PERFORMANCE' was specified.
	JobSpec_COMPARISON_MODE_UNSPECIFIED JobSpec_ComparisonMode = 0
	// Performs statistical tests appropriate for performance measurements.
	JobSpec_PERFORMANCE JobSpec_ComparisonMode = 1
	// Performs statistical tests appropriate for functional success/failure
	// measurements. This is used in determining whether a benchmark has failed
	// or started to become flaky in a bisection or to try out whether a patch
	// will cause failures for specific benchmarks/stories in experiments.
	JobSpec_FUNCTIONAL JobSpec_ComparisonMode = 2
)

var JobSpec_ComparisonMode_name = map[int32]string{
	0: "COMPARISON_MODE_UNSPECIFIED",
	1: "PERFORMANCE",
	2: "FUNCTIONAL",
}

var JobSpec_ComparisonMode_value = map[string]int32{
	"COMPARISON_MODE_UNSPECIFIED": 0,
	"PERFORMANCE":                 1,
	"FUNCTIONAL":                  2,
}

func (x JobSpec_ComparisonMode) String() string {
	return proto.EnumName(JobSpec_ComparisonMode_name, int32(x))
}

func (JobSpec_ComparisonMode) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_a838ff8109779ab1, []int{8, 0}
}

type Job_State int32

const (
	Job_STATE_UNSPECIFIED Job_State = 0
	Job_PENDING           Job_State = 1
	Job_RUNNING           Job_State = 2
	Job_SUCCEEDED         Job_State = 3
	Job_FAILED            Job_State = 4
	Job_CANCELLED         Job_State = 5
)

var Job_State_name = map[int32]string{
	0: "STATE_UNSPECIFIED",
	1: "PENDING",
	2: "RUNNING",
	3: "SUCCEEDED",
	4: "FAILED",
	5: "CANCELLED",
}

var Job_State_value = map[string]int32{
	"STATE_UNSPECIFIED": 0,
	"PENDING":           1,
	"RUNNING":           2,
	"SUCCEEDED":         3,
	"FAILED":            4,
	"CANCELLED":         5,
}

func (x Job_State) String() string {
	return proto.EnumName(Job_State_name, int32(x))
}

func (Job_State) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_a838ff8109779ab1, []int{10, 0}
}

// Specifies the details for data generated by a Telemetry benchmark.
type TelemetryBenchmark struct {
	// The name of the benchmark.
	Benchmark string `protobuf:"bytes,1,opt,name=benchmark,proto3" json:"benchmark,omitempty"`
	// Types that are valid to be assigned to StorySelection:
	//	*TelemetryBenchmark_Story
	//	*TelemetryBenchmark_StoryTags
	StorySelection isTelemetryBenchmark_StorySelection `protobuf_oneof:"story_selection"`
	// The name of the measurement to extract. This refers to the name of the
	// histogram in a HistogramSet which we'll be making statistical analysis
	// decisions on.
	//
	// See
	// https://chromium.googlesource.com/catapult.git/+/HEAD/docs/how-to-write-metrics.md#histograms
	// and
	// https://chromium.googlesource.com/catapult/+/HEAD/docs/histogram-set-json-format.md
	// for details on what metric names can be and how to select those from
	// histograms produced by Telemetry benchmarks.
	Measurement string `protobuf:"bytes,4,opt,name=measurement,proto3" json:"measurement,omitempty"`
	// The optional grouping label, as described in
	// https://chromium.googlesource.com/catapult.git/+/HEAD/docs/how-to-write-metrics.md#reserved-names
	// (as `labels`, passed as a flag to Telemetry via the --results-label flag).
	GroupingLabel string `protobuf:"bytes,5,opt,name=grouping_label,json=groupingLabel,proto3" json:"grouping_label,omitempty"`
	// The statistic to extract. If unspecified defaults to "NONE", i.e. use all
	// the sample values instead of computing a statistic.
	Statistic TelemetryBenchmark_Statistic `protobuf:"varint,6,opt,name=statistic,proto3,enum=pinpoint.TelemetryBenchmark_Statistic" json:"statistic,omitempty"`
	// List of extra arguments passed to the Telemetry runner.
	ExtraArgs            []string `protobuf:"bytes,7,rep,name=extra_args,json=extraArgs,proto3" json:"extra_args,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TelemetryBenchmark) Reset()         { *m = TelemetryBenchmark{} }
func (m *TelemetryBenchmark) String() string { return proto.CompactTextString(m) }
func (*TelemetryBenchmark) ProtoMessage()    {}
func (*TelemetryBenchmark) Descriptor() ([]byte, []int) {
	return fileDescriptor_a838ff8109779ab1, []int{0}
}

func (m *TelemetryBenchmark) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TelemetryBenchmark.Unmarshal(m, b)
}
func (m *TelemetryBenchmark) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TelemetryBenchmark.Marshal(b, m, deterministic)
}
func (m *TelemetryBenchmark) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TelemetryBenchmark.Merge(m, src)
}
func (m *TelemetryBenchmark) XXX_Size() int {
	return xxx_messageInfo_TelemetryBenchmark.Size(m)
}
func (m *TelemetryBenchmark) XXX_DiscardUnknown() {
	xxx_messageInfo_TelemetryBenchmark.DiscardUnknown(m)
}

var xxx_messageInfo_TelemetryBenchmark proto.InternalMessageInfo

func (m *TelemetryBenchmark) GetBenchmark() string {
	if m != nil {
		return m.Benchmark
	}
	return ""
}

type isTelemetryBenchmark_StorySelection interface {
	isTelemetryBenchmark_StorySelection()
}

type TelemetryBenchmark_Story struct {
	Story string `protobuf:"bytes,2,opt,name=story,proto3,oneof"`
}

type TelemetryBenchmark_StoryTags struct {
	StoryTags *TelemetryBenchmark_StoryTagList `protobuf:"bytes,3,opt,name=story_tags,json=storyTags,proto3,oneof"`
}

func (*TelemetryBenchmark_Story) isTelemetryBenchmark_StorySelection() {}

func (*TelemetryBenchmark_StoryTags) isTelemetryBenchmark_StorySelection() {}

func (m *TelemetryBenchmark) GetStorySelection() isTelemetryBenchmark_StorySelection {
	if m != nil {
		return m.StorySelection
	}
	return nil
}

func (m *TelemetryBenchmark) GetStory() string {
	if x, ok := m.GetStorySelection().(*TelemetryBenchmark_Story); ok {
		return x.Story
	}
	return ""
}

func (m *TelemetryBenchmark) GetStoryTags() *TelemetryBenchmark_StoryTagList {
	if x, ok := m.GetStorySelection().(*TelemetryBenchmark_StoryTags); ok {
		return x.StoryTags
	}
	return nil
}

func (m *TelemetryBenchmark) GetMeasurement() string {
	if m != nil {
		return m.Measurement
	}
	return ""
}

func (m *TelemetryBenchmark) GetGroupingLabel() string {
	if m != nil {
		return m.GroupingLabel
	}
	return ""
}

func (m *TelemetryBenchmark) GetStatistic() TelemetryBenchmark_Statistic {
	if m != nil {
		return m.Statistic
	}
	return TelemetryBenchmark_STATISTIC_UNSPECIFIED
}

func (m *TelemetryBenchmark) GetExtraArgs() []string {
	if m != nil {
		return m.ExtraArgs
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*TelemetryBenchmark) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*TelemetryBenchmark_Story)(nil),
		(*TelemetryBenchmark_StoryTags)(nil),
	}
}

type TelemetryBenchmark_StoryTagList struct {
	// A list of story tags which specify stories that will be run. All stories
	// that match any of the specified tags will be collected (unioned) in the
	// run.
	StoryTags            []string `protobuf:"bytes,1,rep,name=story_tags,json=storyTags,proto3" json:"story_tags,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TelemetryBenchmark_StoryTagList) Reset()         { *m = TelemetryBenchmark_StoryTagList{} }
func (m *TelemetryBenchmark_StoryTagList) String() string { return proto.CompactTextString(m) }
func (*TelemetryBenchmark_StoryTagList) ProtoMessage()    {}
func (*TelemetryBenchmark_StoryTagList) Descriptor() ([]byte, []int) {
	return fileDescriptor_a838ff8109779ab1, []int{0, 0}
}

func (m *TelemetryBenchmark_StoryTagList) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TelemetryBenchmark_StoryTagList.Unmarshal(m, b)
}
func (m *TelemetryBenchmark_StoryTagList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TelemetryBenchmark_StoryTagList.Marshal(b, m, deterministic)
}
func (m *TelemetryBenchmark_StoryTagList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TelemetryBenchmark_StoryTagList.Merge(m, src)
}
func (m *TelemetryBenchmark_StoryTagList) XXX_Size() int {
	return xxx_messageInfo_TelemetryBenchmark_StoryTagList.Size(m)
}
func (m *TelemetryBenchmark_StoryTagList) XXX_DiscardUnknown() {
	xxx_messageInfo_TelemetryBenchmark_StoryTagList.DiscardUnknown(m)
}

var xxx_messageInfo_TelemetryBenchmark_StoryTagList proto.InternalMessageInfo

func (m *TelemetryBenchmark_StoryTagList) GetStoryTags() []string {
	if m != nil {
		return m.StoryTags
	}
	return nil
}

// Specify the details for data generated by a GTest benchmark.
type GTestBenchmark struct {
	// Name of the benchmark. This is provided to the GTest benchmark through the
	// '--gtest-benchmark-name' flag, to identify which benchmark in the `target`
	// (provided in the JobSpec) will be run.
	Benchmark string `protobuf:"bytes,1,opt,name=benchmark,proto3" json:"benchmark,omitempty"`
	// Name of the measurement that shows up as a chart in the Dashboard.
	Measurement string `protobuf:"bytes,2,opt,name=measurement,proto3" json:"measurement,omitempty"`
	// Name of the testcase in the benchmark, supplied as a filter to the GTest.
	Test                 string   `protobuf:"bytes,3,opt,name=test,proto3" json:"test,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GTestBenchmark) Reset()         { *m = GTestBenchmark{} }
func (m *GTestBenchmark) String() string { return proto.CompactTextString(m) }
func (*GTestBenchmark) ProtoMessage()    {}
func (*GTestBenchmark) Descriptor() ([]byte, []int) {
	return fileDescriptor_a838ff8109779ab1, []int{1}
}

func (m *GTestBenchmark) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GTestBenchmark.Unmarshal(m, b)
}
func (m *GTestBenchmark) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GTestBenchmark.Marshal(b, m, deterministic)
}
func (m *GTestBenchmark) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GTestBenchmark.Merge(m, src)
}
func (m *GTestBenchmark) XXX_Size() int {
	return xxx_messageInfo_GTestBenchmark.Size(m)
}
func (m *GTestBenchmark) XXX_DiscardUnknown() {
	xxx_messageInfo_GTestBenchmark.DiscardUnknown(m)
}

var xxx_messageInfo_GTestBenchmark proto.InternalMessageInfo

func (m *GTestBenchmark) GetBenchmark() string {
	if m != nil {
		return m.Benchmark
	}
	return ""
}

func (m *GTestBenchmark) GetMeasurement() string {
	if m != nil {
		return m.Measurement
	}
	return ""
}

func (m *GTestBenchmark) GetTest() string {
	if m != nil {
		return m.Test
	}
	return ""
}

// A commit in a Gitiles repostory.
type GitilesCommit struct {
	// The gitiles host to query for commits.
	Host string `protobuf:"bytes,1,opt,name=host,proto3" json:"host,omitempty"`
	// The gitiles project to query for commits.
	Project string `protobuf:"bytes,2,opt,name=project,proto3" json:"project,omitempty"`
	// The hash for the specific Git commit.
	GitHash              string   `protobuf:"bytes,3,opt,name=git_hash,json=gitHash,proto3" json:"git_hash,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GitilesCommit) Reset()         { *m = GitilesCommit{} }
func (m *GitilesCommit) String() string { return proto.CompactTextString(m) }
func (*GitilesCommit) ProtoMessage()    {}
func (*GitilesCommit) Descriptor() ([]byte, []int) {
	return fileDescriptor_a838ff8109779ab1, []int{2}
}

func (m *GitilesCommit) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GitilesCommit.Unmarshal(m, b)
}
func (m *GitilesCommit) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GitilesCommit.Marshal(b, m, deterministic)
}
func (m *GitilesCommit) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GitilesCommit.Merge(m, src)
}
func (m *GitilesCommit) XXX_Size() int {
	return xxx_messageInfo_GitilesCommit.Size(m)
}
func (m *GitilesCommit) XXX_DiscardUnknown() {
	xxx_messageInfo_GitilesCommit.DiscardUnknown(m)
}

var xxx_messageInfo_GitilesCommit proto.InternalMessageInfo

func (m *GitilesCommit) GetHost() string {
	if m != nil {
		return m.Host
	}
	return ""
}

func (m *GitilesCommit) GetProject() string {
	if m != nil {
		return m.Project
	}
	return ""
}

func (m *GitilesCommit) GetGitHash() string {
	if m != nil {
		return m.GitHash
	}
	return ""
}

// A Gerrit change review, to refer to patches to apply in builds.
type GerritChange struct {
	// Gerrit hostname.
	Host string `protobuf:"bytes,1,opt,name=host,proto3" json:"host,omitempty"`
	// Gerrit project in the host.
	Project string `protobuf:"bytes,2,opt,name=project,proto3" json:"project,omitempty"`
	// A change ID against the project in the host.
	Change int64 `protobuf:"varint,3,opt,name=change,proto3" json:"change,omitempty"`
	// A reference to the patch set. If unspecified this will always be the
	// latest.
	Patchset             int64    `protobuf:"varint,4,opt,name=patchset,proto3" json:"patchset,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GerritChange) Reset()         { *m = GerritChange{} }
func (m *GerritChange) String() string { return proto.CompactTextString(m) }
func (*GerritChange) ProtoMessage()    {}
func (*GerritChange) Descriptor() ([]byte, []int) {
	return fileDescriptor_a838ff8109779ab1, []int{3}
}

func (m *GerritChange) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GerritChange.Unmarshal(m, b)
}
func (m *GerritChange) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GerritChange.Marshal(b, m, deterministic)
}
func (m *GerritChange) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GerritChange.Merge(m, src)
}
func (m *GerritChange) XXX_Size() int {
	return xxx_messageInfo_GerritChange.Size(m)
}
func (m *GerritChange) XXX_DiscardUnknown() {
	xxx_messageInfo_GerritChange.DiscardUnknown(m)
}

var xxx_messageInfo_GerritChange proto.InternalMessageInfo

func (m *GerritChange) GetHost() string {
	if m != nil {
		return m.Host
	}
	return ""
}

func (m *GerritChange) GetProject() string {
	if m != nil {
		return m.Project
	}
	return ""
}

func (m *GerritChange) GetChange() int64 {
	if m != nil {
		return m.Change
	}
	return 0
}

func (m *GerritChange) GetPatchset() int64 {
	if m != nil {
		return m.Patchset
	}
	return 0
}

// A CommitRange consists of two git commit hashes from the same project that
// the end commit must be reachable from the start commit.
type GitilesCommitRange struct {
	// The gitiles host to query for commits.
	Host string `protobuf:"bytes,1,opt,name=host,proto3" json:"host,omitempty"`
	// The gitiles project to query for commits.
	Project string `protobuf:"bytes,2,opt,name=project,proto3" json:"project,omitempty"`
	// The start of the commit range.
	StartGitHash string `protobuf:"bytes,3,opt,name=start_git_hash,json=startGitHash,proto3" json:"start_git_hash,omitempty"`
	// The end of the commit range.
	EndGitHash           string   `protobuf:"bytes,4,opt,name=end_git_hash,json=endGitHash,proto3" json:"end_git_hash,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GitilesCommitRange) Reset()         { *m = GitilesCommitRange{} }
func (m *GitilesCommitRange) String() string { return proto.CompactTextString(m) }
func (*GitilesCommitRange) ProtoMessage()    {}
func (*GitilesCommitRange) Descriptor() ([]byte, []int) {
	return fileDescriptor_a838ff8109779ab1, []int{4}
}

func (m *GitilesCommitRange) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GitilesCommitRange.Unmarshal(m, b)
}
func (m *GitilesCommitRange) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GitilesCommitRange.Marshal(b, m, deterministic)
}
func (m *GitilesCommitRange) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GitilesCommitRange.Merge(m, src)
}
func (m *GitilesCommitRange) XXX_Size() int {
	return xxx_messageInfo_GitilesCommitRange.Size(m)
}
func (m *GitilesCommitRange) XXX_DiscardUnknown() {
	xxx_messageInfo_GitilesCommitRange.DiscardUnknown(m)
}

var xxx_messageInfo_GitilesCommitRange proto.InternalMessageInfo

func (m *GitilesCommitRange) GetHost() string {
	if m != nil {
		return m.Host
	}
	return ""
}

func (m *GitilesCommitRange) GetProject() string {
	if m != nil {
		return m.Project
	}
	return ""
}

func (m *GitilesCommitRange) GetStartGitHash() string {
	if m != nil {
		return m.StartGitHash
	}
	return ""
}

func (m *GitilesCommitRange) GetEndGitHash() string {
	if m != nil {
		return m.EndGitHash
	}
	return ""
}

// A Bisection specifies a range through which Pinpoint will perform
// builds/runs against to find potential culprits.
type Bisection struct {
	// A commit range through which the bisection will be performed.
	CommitRange *GitilesCommitRange `protobuf:"bytes,1,opt,name=commit_range,json=commitRange,proto3" json:"commit_range,omitempty"`
	// A patch to apply to all commits in the range before building. This is
	// useful if you want to apply a patch that fixes the build in a range where
	// the bisection might encounter broken builds.
	Patch                *GerritChange `protobuf:"bytes,3,opt,name=patch,proto3" json:"patch,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *Bisection) Reset()         { *m = Bisection{} }
func (m *Bisection) String() string { return proto.CompactTextString(m) }
func (*Bisection) ProtoMessage()    {}
func (*Bisection) Descriptor() ([]byte, []int) {
	return fileDescriptor_a838ff8109779ab1, []int{5}
}

func (m *Bisection) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Bisection.Unmarshal(m, b)
}
func (m *Bisection) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Bisection.Marshal(b, m, deterministic)
}
func (m *Bisection) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Bisection.Merge(m, src)
}
func (m *Bisection) XXX_Size() int {
	return xxx_messageInfo_Bisection.Size(m)
}
func (m *Bisection) XXX_DiscardUnknown() {
	xxx_messageInfo_Bisection.DiscardUnknown(m)
}

var xxx_messageInfo_Bisection proto.InternalMessageInfo

func (m *Bisection) GetCommitRange() *GitilesCommitRange {
	if m != nil {
		return m.CommitRange
	}
	return nil
}

func (m *Bisection) GetPatch() *GerritChange {
	if m != nil {
		return m.Patch
	}
	return nil
}

// An Experiment defines an A/B test between a base build (with an optional
// patch) and an experimental build. This is also referred to as a "tryjob" in
// Pinpoint.
type Experiment struct {
	// The commit and optional patch from which we'd perform the A/B Test.
	BaseCommit *GitilesCommit `protobuf:"bytes,1,opt,name=base_commit,json=baseCommit,proto3" json:"base_commit,omitempty"`
	BasePatch  *GerritChange  `protobuf:"bytes,2,opt,name=base_patch,json=basePatch,proto3" json:"base_patch,omitempty"`
	// The commit and required patch which we'll compare against the base and
	// optional patch. If the experiment_commit is empty, we use the base_commit
	// instead.
	ExperimentCommit     *GitilesCommit `protobuf:"bytes,3,opt,name=experiment_commit,json=experimentCommit,proto3" json:"experiment_commit,omitempty"`
	ExperimentPatch      *GerritChange  `protobuf:"bytes,4,opt,name=experiment_patch,json=experimentPatch,proto3" json:"experiment_patch,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *Experiment) Reset()         { *m = Experiment{} }
func (m *Experiment) String() string { return proto.CompactTextString(m) }
func (*Experiment) ProtoMessage()    {}
func (*Experiment) Descriptor() ([]byte, []int) {
	return fileDescriptor_a838ff8109779ab1, []int{6}
}

func (m *Experiment) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Experiment.Unmarshal(m, b)
}
func (m *Experiment) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Experiment.Marshal(b, m, deterministic)
}
func (m *Experiment) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Experiment.Merge(m, src)
}
func (m *Experiment) XXX_Size() int {
	return xxx_messageInfo_Experiment.Size(m)
}
func (m *Experiment) XXX_DiscardUnknown() {
	xxx_messageInfo_Experiment.DiscardUnknown(m)
}

var xxx_messageInfo_Experiment proto.InternalMessageInfo

func (m *Experiment) GetBaseCommit() *GitilesCommit {
	if m != nil {
		return m.BaseCommit
	}
	return nil
}

func (m *Experiment) GetBasePatch() *GerritChange {
	if m != nil {
		return m.BasePatch
	}
	return nil
}

func (m *Experiment) GetExperimentCommit() *GitilesCommit {
	if m != nil {
		return m.ExperimentCommit
	}
	return nil
}

func (m *Experiment) GetExperimentPatch() *GerritChange {
	if m != nil {
		return m.ExperimentPatch
	}
	return nil
}

type MonorailIssue struct {
	// Name of the Monorail project.
	Project string `protobuf:"bytes,1,opt,name=project,proto3" json:"project,omitempty"`
	// The Issue ID in the provided project.
	IssueId              int64    `protobuf:"varint,2,opt,name=issue_id,json=issueId,proto3" json:"issue_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MonorailIssue) Reset()         { *m = MonorailIssue{} }
func (m *MonorailIssue) String() string { return proto.CompactTextString(m) }
func (*MonorailIssue) ProtoMessage()    {}
func (*MonorailIssue) Descriptor() ([]byte, []int) {
	return fileDescriptor_a838ff8109779ab1, []int{7}
}

func (m *MonorailIssue) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MonorailIssue.Unmarshal(m, b)
}
func (m *MonorailIssue) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MonorailIssue.Marshal(b, m, deterministic)
}
func (m *MonorailIssue) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MonorailIssue.Merge(m, src)
}
func (m *MonorailIssue) XXX_Size() int {
	return xxx_messageInfo_MonorailIssue.Size(m)
}
func (m *MonorailIssue) XXX_DiscardUnknown() {
	xxx_messageInfo_MonorailIssue.DiscardUnknown(m)
}

var xxx_messageInfo_MonorailIssue proto.InternalMessageInfo

func (m *MonorailIssue) GetProject() string {
	if m != nil {
		return m.Project
	}
	return ""
}

func (m *MonorailIssue) GetIssueId() int64 {
	if m != nil {
		return m.IssueId
	}
	return 0
}

// A JobSpec defines inputs for Pinpoint to configure a job being created and
// managed by the service.
type JobSpec struct {
	// The comparison mode to perform. Defaults to 'PERFORMANCE' if unspecified.
	ComparisonMode JobSpec_ComparisonMode `protobuf:"varint,1,opt,name=comparison_mode,json=comparisonMode,proto3,enum=pinpoint.JobSpec_ComparisonMode" json:"comparison_mode,omitempty"`
	// A threshold value which determines how sensitive the comparison algorithm
	// should be. This is typically a multiple of the inter-quartile range for
	// the measurements, indicating how "tight" the bounds for differences must
	// be when considering statistical significance.
	//
	// If unspecified, the service will determine a default comparison magnitude
	// based on the empirically measured inter-quartile range.
	ComparisonMagnitude float64 `protobuf:"fixed64,2,opt,name=comparison_magnitude,json=comparisonMagnitude,proto3" json:"comparison_magnitude,omitempty"`
	// A named configuration, representing a "bot pool" in Pinpoint.
	//
	// These are managed through the administration console on the Chromeperf UI.
	//
	// TODO(dberris): Add a reference to the luci-config files when these have
	// been migrated.
	Config string `protobuf:"bytes,3,opt,name=config,proto3" json:"config,omitempty"`
	// The target representing a build target that will be built/run by Pinpoint.
	Target string `protobuf:"bytes,4,opt,name=target,proto3" json:"target,omitempty"`
	// Types that are valid to be assigned to JobKind:
	//	*JobSpec_Bisection
	//	*JobSpec_Experiment
	JobKind isJobSpec_JobKind `protobuf_oneof:"job_kind"`
	// Types that are valid to be assigned to Arguments:
	//	*JobSpec_TelemetryBenchmark
	//	*JobSpec_GtestBenchmark
	Arguments isJobSpec_Arguments `protobuf_oneof:"arguments"`
	// The associated Monorail issue.
	MonorailIssue        *MonorailIssue `protobuf:"bytes,9,opt,name=monorail_issue,json=monorailIssue,proto3" json:"monorail_issue,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *JobSpec) Reset()         { *m = JobSpec{} }
func (m *JobSpec) String() string { return proto.CompactTextString(m) }
func (*JobSpec) ProtoMessage()    {}
func (*JobSpec) Descriptor() ([]byte, []int) {
	return fileDescriptor_a838ff8109779ab1, []int{8}
}

func (m *JobSpec) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_JobSpec.Unmarshal(m, b)
}
func (m *JobSpec) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_JobSpec.Marshal(b, m, deterministic)
}
func (m *JobSpec) XXX_Merge(src proto.Message) {
	xxx_messageInfo_JobSpec.Merge(m, src)
}
func (m *JobSpec) XXX_Size() int {
	return xxx_messageInfo_JobSpec.Size(m)
}
func (m *JobSpec) XXX_DiscardUnknown() {
	xxx_messageInfo_JobSpec.DiscardUnknown(m)
}

var xxx_messageInfo_JobSpec proto.InternalMessageInfo

func (m *JobSpec) GetComparisonMode() JobSpec_ComparisonMode {
	if m != nil {
		return m.ComparisonMode
	}
	return JobSpec_COMPARISON_MODE_UNSPECIFIED
}

func (m *JobSpec) GetComparisonMagnitude() float64 {
	if m != nil {
		return m.ComparisonMagnitude
	}
	return 0
}

func (m *JobSpec) GetConfig() string {
	if m != nil {
		return m.Config
	}
	return ""
}

func (m *JobSpec) GetTarget() string {
	if m != nil {
		return m.Target
	}
	return ""
}

type isJobSpec_JobKind interface {
	isJobSpec_JobKind()
}

type JobSpec_Bisection struct {
	Bisection *Bisection `protobuf:"bytes,5,opt,name=bisection,proto3,oneof"`
}

type JobSpec_Experiment struct {
	Experiment *Experiment `protobuf:"bytes,6,opt,name=experiment,proto3,oneof"`
}

func (*JobSpec_Bisection) isJobSpec_JobKind() {}

func (*JobSpec_Experiment) isJobSpec_JobKind() {}

func (m *JobSpec) GetJobKind() isJobSpec_JobKind {
	if m != nil {
		return m.JobKind
	}
	return nil
}

func (m *JobSpec) GetBisection() *Bisection {
	if x, ok := m.GetJobKind().(*JobSpec_Bisection); ok {
		return x.Bisection
	}
	return nil
}

func (m *JobSpec) GetExperiment() *Experiment {
	if x, ok := m.GetJobKind().(*JobSpec_Experiment); ok {
		return x.Experiment
	}
	return nil
}

type isJobSpec_Arguments interface {
	isJobSpec_Arguments()
}

type JobSpec_TelemetryBenchmark struct {
	TelemetryBenchmark *TelemetryBenchmark `protobuf:"bytes,7,opt,name=telemetry_benchmark,json=telemetryBenchmark,proto3,oneof"`
}

type JobSpec_GtestBenchmark struct {
	GtestBenchmark *GTestBenchmark `protobuf:"bytes,8,opt,name=gtest_benchmark,json=gtestBenchmark,proto3,oneof"`
}

func (*JobSpec_TelemetryBenchmark) isJobSpec_Arguments() {}

func (*JobSpec_GtestBenchmark) isJobSpec_Arguments() {}

func (m *JobSpec) GetArguments() isJobSpec_Arguments {
	if m != nil {
		return m.Arguments
	}
	return nil
}

func (m *JobSpec) GetTelemetryBenchmark() *TelemetryBenchmark {
	if x, ok := m.GetArguments().(*JobSpec_TelemetryBenchmark); ok {
		return x.TelemetryBenchmark
	}
	return nil
}

func (m *JobSpec) GetGtestBenchmark() *GTestBenchmark {
	if x, ok := m.GetArguments().(*JobSpec_GtestBenchmark); ok {
		return x.GtestBenchmark
	}
	return nil
}

func (m *JobSpec) GetMonorailIssue() *MonorailIssue {
	if m != nil {
		return m.MonorailIssue
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*JobSpec) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*JobSpec_Bisection)(nil),
		(*JobSpec_Experiment)(nil),
		(*JobSpec_TelemetryBenchmark)(nil),
		(*JobSpec_GtestBenchmark)(nil),
	}
}

// Contains the required information for creating a Job represented in
// the datastore.
type ScheduleJobRequest struct {
	Job                  *JobSpec `protobuf:"bytes,1,opt,name=job,proto3" json:"job,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ScheduleJobRequest) Reset()         { *m = ScheduleJobRequest{} }
func (m *ScheduleJobRequest) String() string { return proto.CompactTextString(m) }
func (*ScheduleJobRequest) ProtoMessage()    {}
func (*ScheduleJobRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a838ff8109779ab1, []int{9}
}

func (m *ScheduleJobRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ScheduleJobRequest.Unmarshal(m, b)
}
func (m *ScheduleJobRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ScheduleJobRequest.Marshal(b, m, deterministic)
}
func (m *ScheduleJobRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ScheduleJobRequest.Merge(m, src)
}
func (m *ScheduleJobRequest) XXX_Size() int {
	return xxx_messageInfo_ScheduleJobRequest.Size(m)
}
func (m *ScheduleJobRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ScheduleJobRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ScheduleJobRequest proto.InternalMessageInfo

func (m *ScheduleJobRequest) GetJob() *JobSpec {
	if m != nil {
		return m.Job
	}
	return nil
}

// A representation of a Pinpoint Job.
type Job struct {
	Id    string    `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	State Job_State `protobuf:"varint,2,opt,name=state,proto3,enum=pinpoint.Job_State" json:"state,omitempty"`
	// The user that created this Job, referred to by email address.
	CreatedBy      string               `protobuf:"bytes,3,opt,name=created_by,json=createdBy,proto3" json:"created_by,omitempty"`
	CreateTime     *timestamp.Timestamp `protobuf:"bytes,4,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	LastUpdateTime *timestamp.Timestamp `protobuf:"bytes,5,opt,name=last_update_time,json=lastUpdateTime,proto3" json:"last_update_time,omitempty"`
	// Specification provided when the Job was created.
	JobSpec *JobSpec `protobuf:"bytes,6,opt,name=job_spec,json=jobSpec,proto3" json:"job_spec,omitempty"`
	// If present, the reason provided for when a job is cancelled.
	CancellationReason   string   `protobuf:"bytes,7,opt,name=cancellation_reason,json=cancellationReason,proto3" json:"cancellation_reason,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Job) Reset()         { *m = Job{} }
func (m *Job) String() string { return proto.CompactTextString(m) }
func (*Job) ProtoMessage()    {}
func (*Job) Descriptor() ([]byte, []int) {
	return fileDescriptor_a838ff8109779ab1, []int{10}
}

func (m *Job) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Job.Unmarshal(m, b)
}
func (m *Job) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Job.Marshal(b, m, deterministic)
}
func (m *Job) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Job.Merge(m, src)
}
func (m *Job) XXX_Size() int {
	return xxx_messageInfo_Job.Size(m)
}
func (m *Job) XXX_DiscardUnknown() {
	xxx_messageInfo_Job.DiscardUnknown(m)
}

var xxx_messageInfo_Job proto.InternalMessageInfo

func (m *Job) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Job) GetState() Job_State {
	if m != nil {
		return m.State
	}
	return Job_STATE_UNSPECIFIED
}

func (m *Job) GetCreatedBy() string {
	if m != nil {
		return m.CreatedBy
	}
	return ""
}

func (m *Job) GetCreateTime() *timestamp.Timestamp {
	if m != nil {
		return m.CreateTime
	}
	return nil
}

func (m *Job) GetLastUpdateTime() *timestamp.Timestamp {
	if m != nil {
		return m.LastUpdateTime
	}
	return nil
}

func (m *Job) GetJobSpec() *JobSpec {
	if m != nil {
		return m.JobSpec
	}
	return nil
}

func (m *Job) GetCancellationReason() string {
	if m != nil {
		return m.CancellationReason
	}
	return ""
}

type GetJobRequest struct {
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetJobRequest) Reset()         { *m = GetJobRequest{} }
func (m *GetJobRequest) String() string { return proto.CompactTextString(m) }
func (*GetJobRequest) ProtoMessage()    {}
func (*GetJobRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a838ff8109779ab1, []int{11}
}

func (m *GetJobRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetJobRequest.Unmarshal(m, b)
}
func (m *GetJobRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetJobRequest.Marshal(b, m, deterministic)
}
func (m *GetJobRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetJobRequest.Merge(m, src)
}
func (m *GetJobRequest) XXX_Size() int {
	return xxx_messageInfo_GetJobRequest.Size(m)
}
func (m *GetJobRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetJobRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetJobRequest proto.InternalMessageInfo

func (m *GetJobRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type ListJobsRequest struct {
	// If unspecified, at most 100 Jobs will be returned.
	// Max is 1000, any values above will be capped to 1000.
	PageSize int32 `protobuf:"varint,1,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// A page token, received from a previous `ListJobs` call.
	// Provide this to retrieve the subsequent page.
	// When paginating, all other parameters provided must match previous
	// requests.
	PageToken string `protobuf:"bytes,2,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	// A structured string specifying a filter on Job properties.
	// TODO(dberris): Document this, see https://aip.dev/160 for details.
	Filter               string   `protobuf:"bytes,3,opt,name=filter,proto3" json:"filter,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ListJobsRequest) Reset()         { *m = ListJobsRequest{} }
func (m *ListJobsRequest) String() string { return proto.CompactTextString(m) }
func (*ListJobsRequest) ProtoMessage()    {}
func (*ListJobsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a838ff8109779ab1, []int{12}
}

func (m *ListJobsRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListJobsRequest.Unmarshal(m, b)
}
func (m *ListJobsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListJobsRequest.Marshal(b, m, deterministic)
}
func (m *ListJobsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListJobsRequest.Merge(m, src)
}
func (m *ListJobsRequest) XXX_Size() int {
	return xxx_messageInfo_ListJobsRequest.Size(m)
}
func (m *ListJobsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ListJobsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ListJobsRequest proto.InternalMessageInfo

func (m *ListJobsRequest) GetPageSize() int32 {
	if m != nil {
		return m.PageSize
	}
	return 0
}

func (m *ListJobsRequest) GetPageToken() string {
	if m != nil {
		return m.PageToken
	}
	return ""
}

func (m *ListJobsRequest) GetFilter() string {
	if m != nil {
		return m.Filter
	}
	return ""
}

type ListJobsResponse struct {
	Jobs                 []*Job   `protobuf:"bytes,1,rep,name=jobs,proto3" json:"jobs,omitempty"`
	NextPageToken        string   `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ListJobsResponse) Reset()         { *m = ListJobsResponse{} }
func (m *ListJobsResponse) String() string { return proto.CompactTextString(m) }
func (*ListJobsResponse) ProtoMessage()    {}
func (*ListJobsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a838ff8109779ab1, []int{13}
}

func (m *ListJobsResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListJobsResponse.Unmarshal(m, b)
}
func (m *ListJobsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListJobsResponse.Marshal(b, m, deterministic)
}
func (m *ListJobsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListJobsResponse.Merge(m, src)
}
func (m *ListJobsResponse) XXX_Size() int {
	return xxx_messageInfo_ListJobsResponse.Size(m)
}
func (m *ListJobsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ListJobsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ListJobsResponse proto.InternalMessageInfo

func (m *ListJobsResponse) GetJobs() []*Job {
	if m != nil {
		return m.Jobs
	}
	return nil
}

func (m *ListJobsResponse) GetNextPageToken() string {
	if m != nil {
		return m.NextPageToken
	}
	return ""
}

type CancelJobRequest struct {
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Reason               string   `protobuf:"bytes,2,opt,name=reason,proto3" json:"reason,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CancelJobRequest) Reset()         { *m = CancelJobRequest{} }
func (m *CancelJobRequest) String() string { return proto.CompactTextString(m) }
func (*CancelJobRequest) ProtoMessage()    {}
func (*CancelJobRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a838ff8109779ab1, []int{14}
}

func (m *CancelJobRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CancelJobRequest.Unmarshal(m, b)
}
func (m *CancelJobRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CancelJobRequest.Marshal(b, m, deterministic)
}
func (m *CancelJobRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CancelJobRequest.Merge(m, src)
}
func (m *CancelJobRequest) XXX_Size() int {
	return xxx_messageInfo_CancelJobRequest.Size(m)
}
func (m *CancelJobRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CancelJobRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CancelJobRequest proto.InternalMessageInfo

func (m *CancelJobRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *CancelJobRequest) GetReason() string {
	if m != nil {
		return m.Reason
	}
	return ""
}

func init() {
	proto.RegisterEnum("pinpoint.TelemetryBenchmark_Statistic", TelemetryBenchmark_Statistic_name, TelemetryBenchmark_Statistic_value)
	proto.RegisterEnum("pinpoint.JobSpec_ComparisonMode", JobSpec_ComparisonMode_name, JobSpec_ComparisonMode_value)
	proto.RegisterEnum("pinpoint.Job_State", Job_State_name, Job_State_value)
	proto.RegisterType((*TelemetryBenchmark)(nil), "pinpoint.TelemetryBenchmark")
	proto.RegisterType((*TelemetryBenchmark_StoryTagList)(nil), "pinpoint.TelemetryBenchmark.StoryTagList")
	proto.RegisterType((*GTestBenchmark)(nil), "pinpoint.GTestBenchmark")
	proto.RegisterType((*GitilesCommit)(nil), "pinpoint.GitilesCommit")
	proto.RegisterType((*GerritChange)(nil), "pinpoint.GerritChange")
	proto.RegisterType((*GitilesCommitRange)(nil), "pinpoint.GitilesCommitRange")
	proto.RegisterType((*Bisection)(nil), "pinpoint.Bisection")
	proto.RegisterType((*Experiment)(nil), "pinpoint.Experiment")
	proto.RegisterType((*MonorailIssue)(nil), "pinpoint.MonorailIssue")
	proto.RegisterType((*JobSpec)(nil), "pinpoint.JobSpec")
	proto.RegisterType((*ScheduleJobRequest)(nil), "pinpoint.ScheduleJobRequest")
	proto.RegisterType((*Job)(nil), "pinpoint.Job")
	proto.RegisterType((*GetJobRequest)(nil), "pinpoint.GetJobRequest")
	proto.RegisterType((*ListJobsRequest)(nil), "pinpoint.ListJobsRequest")
	proto.RegisterType((*ListJobsResponse)(nil), "pinpoint.ListJobsResponse")
	proto.RegisterType((*CancelJobRequest)(nil), "pinpoint.CancelJobRequest")
}

func init() {
	proto.RegisterFile("infra/chromeperf/pinpoint/pinpoint.proto", fileDescriptor_a838ff8109779ab1)
}

var fileDescriptor_a838ff8109779ab1 = []byte{
	// 1545 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x56, 0x4f, 0x6f, 0x23, 0x49,
	0x15, 0x1f, 0xff, 0x8b, 0xdd, 0xcf, 0xb1, 0xdd, 0x53, 0xd9, 0xcc, 0x38, 0xc9, 0x2c, 0x09, 0x2d,
	0xed, 0x2a, 0x33, 0x5a, 0x6c, 0x36, 0x2b, 0x90, 0x76, 0x10, 0x2b, 0xfc, 0x2f, 0x89, 0xa3, 0xd8,
	0x31, 0x6d, 0x07, 0x71, 0x41, 0x4d, 0xff, 0xa9, 0xb4, 0x2b, 0x63, 0x77, 0x35, 0x5d, 0xe5, 0xd1,
	0x64, 0x39, 0x20, 0x01, 0x1f, 0x00, 0x89, 0x3b, 0x37, 0x3e, 0x0e, 0x27, 0xbe, 0xc0, 0x1e, 0xf8,
	0x02, 0x5c, 0x39, 0xa1, 0xaa, 0xae, 0x76, 0x77, 0xec, 0x61, 0x16, 0xed, 0xde, 0xea, 0xbd, 0xf7,
	0x7b, 0xaf, 0xde, 0xdf, 0x7a, 0x05, 0xa7, 0x24, 0xb8, 0x8b, 0xec, 0xb6, 0x3b, 0x8f, 0xe8, 0x12,
	0x87, 0x38, 0xba, 0x6b, 0x87, 0x24, 0x08, 0x29, 0x09, 0xf8, 0xfa, 0xd0, 0x0a, 0x23, 0xca, 0x29,
	0xaa, 0x24, 0xf4, 0xe1, 0x0b, 0x9f, 0x52, 0x7f, 0x81, 0xdb, 0x76, 0x48, 0xda, 0x76, 0x10, 0x50,
	0x6e, 0x73, 0x42, 0x03, 0x16, 0xe3, 0x0e, 0x8f, 0x33, 0xd2, 0x3b, 0x82, 0x17, 0x9e, 0xe5, 0xe0,
	0xb9, 0xfd, 0x96, 0xd0, 0x48, 0x01, 0x0e, 0x32, 0x80, 0x08, 0x33, 0xba, 0x8a, 0x5c, 0xbc, 0xa1,
	0x2b, 0x29, 0x67, 0x75, 0xd7, 0xe6, 0x64, 0x89, 0x19, 0xb7, 0x97, 0x61, 0x0c, 0x30, 0xfe, 0x54,
	0x04, 0x34, 0xc3, 0x0b, 0xbc, 0xc4, 0x3c, 0x7a, 0xe8, 0xe2, 0xc0, 0x9d, 0x2f, 0xed, 0xe8, 0x0d,
	0x7a, 0x01, 0x9a, 0x93, 0x10, 0xcd, 0xdc, 0x49, 0xee, 0x54, 0x33, 0x53, 0x06, 0x7a, 0x06, 0x25,
	0xc6, 0x69, 0xf4, 0xd0, 0xcc, 0x0b, 0xc9, 0xe5, 0x13, 0x33, 0x26, 0xd1, 0x15, 0x80, 0x3c, 0x58,
	0xdc, 0xf6, 0x59, 0xb3, 0x70, 0x92, 0x3b, 0xad, 0x9e, 0xbd, 0x6c, 0xad, 0xc3, 0xde, 0xbe, 0xa7,
	0x35, 0x15, 0xf0, 0x99, 0xed, 0x5f, 0x13, 0xc6, 0x2f, 0x9f, 0x98, 0x1a, 0x53, 0x34, 0x43, 0x27,
	0x50, 0x5d, 0x62, 0x9b, 0xad, 0x22, 0xbc, 0xc4, 0x01, 0x6f, 0x16, 0xa5, 0x0f, 0x59, 0x16, 0xfa,
	0x04, 0xea, 0x7e, 0x44, 0x57, 0x21, 0x09, 0x7c, 0x6b, 0x61, 0x3b, 0x78, 0xd1, 0x2c, 0x49, 0x50,
	0x2d, 0xe1, 0x5e, 0x0b, 0x26, 0xea, 0x83, 0xc6, 0x44, 0x42, 0x19, 0x27, 0x6e, 0x73, 0xe7, 0x24,
	0x77, 0x5a, 0x3f, 0xfb, 0xf4, 0x5b, 0x7c, 0x52, 0x68, 0x33, 0x55, 0x44, 0x1f, 0x03, 0xe0, 0x77,
	0x3c, 0xb2, 0x2d, 0x3b, 0xf2, 0x59, 0xb3, 0x7c, 0x52, 0x10, 0x19, 0x91, 0x9c, 0x4e, 0xe4, 0xb3,
	0xc3, 0x1f, 0xc1, 0x6e, 0x36, 0x14, 0x01, 0xcf, 0x64, 0x22, 0x17, 0xc3, 0xd7, 0xc1, 0x19, 0xbf,
	0x07, 0x6d, 0x7d, 0x0b, 0x3a, 0x80, 0xfd, 0xe9, 0xac, 0x33, 0x1b, 0x4e, 0x67, 0xc3, 0x9e, 0x75,
	0x3b, 0x9e, 0x4e, 0x06, 0xbd, 0xe1, 0xf9, 0x70, 0xd0, 0xd7, 0x9f, 0xa0, 0x0a, 0x14, 0xc7, 0x37,
	0xe3, 0x81, 0x9e, 0x43, 0x65, 0x28, 0x8c, 0x86, 0x63, 0x3d, 0x2f, 0x0f, 0x9d, 0x5f, 0xeb, 0x05,
	0x21, 0x1b, 0x0d, 0x3a, 0x63, 0xbd, 0x88, 0xaa, 0x50, 0x9e, 0xce, 0xfa, 0x56, 0x7f, 0xf0, 0x2b,
	0xbd, 0x84, 0x00, 0x76, 0x46, 0x83, 0xfe, 0xb0, 0x33, 0xd6, 0x77, 0x90, 0x06, 0xa5, 0x49, 0x6f,
	0xf6, 0xe5, 0x8f, 0xf5, 0x72, 0x72, 0xfc, 0x52, 0xaf, 0x74, 0x9f, 0x42, 0x23, 0xf6, 0x8d, 0xe1,
	0x05, 0x76, 0x45, 0xa7, 0x19, 0x1e, 0xd4, 0x2f, 0x66, 0x98, 0xf1, 0xff, 0xb7, 0x01, 0x36, 0x8a,
	0x93, 0xdf, 0x2e, 0x0e, 0x82, 0x22, 0xc7, 0x8c, 0xcb, 0x26, 0xd0, 0x4c, 0x79, 0x36, 0x7c, 0xa8,
	0x5d, 0x10, 0x4e, 0x16, 0x98, 0xf5, 0xe8, 0x72, 0x49, 0x38, 0x7a, 0x0e, 0xc5, 0x39, 0x65, 0x3c,
	0xb6, 0xdf, 0x2d, 0x7c, 0xd3, 0xc9, 0x9b, 0x92, 0x81, 0x3e, 0x86, 0x72, 0x18, 0xd1, 0x7b, 0xec,
	0x2a, 0xdb, 0xb1, 0x2c, 0xe1, 0xa1, 0x1f, 0x40, 0xc5, 0x27, 0xdc, 0x9a, 0xdb, 0x6c, 0x1e, 0x5f,
	0xa0, 0xe4, 0x3e, 0xe1, 0x97, 0x36, 0x9b, 0x1b, 0x7f, 0xce, 0xc1, 0xee, 0x05, 0x8e, 0x22, 0xc2,
	0x7b, 0x73, 0x3b, 0xf0, 0xf1, 0x77, 0xbe, 0xe8, 0x08, 0x76, 0x5c, 0x69, 0x41, 0x5e, 0x53, 0x88,
	0xa5, 0x8a, 0x85, 0x8e, 0xa1, 0x12, 0xda, 0xdc, 0x9d, 0x33, 0x1c, 0xb7, 0xa7, 0x12, 0xaf, 0x99,
	0xc6, 0xdf, 0x72, 0x80, 0x1e, 0x05, 0x6c, 0x7e, 0x2f, 0x67, 0x5e, 0x42, 0x9d, 0x71, 0x3b, 0xe2,
	0xd6, 0xfb, 0x62, 0xdf, 0x95, 0xa2, 0x8b, 0x38, 0x01, 0xe8, 0x13, 0xd8, 0xc5, 0x81, 0x97, 0x02,
	0x8b, 0x29, 0x10, 0x70, 0xe0, 0x29, 0x98, 0xf1, 0x07, 0xd0, 0xba, 0x84, 0xc5, 0x3d, 0x80, 0xfa,
	0xb0, 0xeb, 0x4a, 0x2f, 0xad, 0x48, 0x46, 0x9c, 0x93, 0xe3, 0xfb, 0x22, 0x1d, 0x95, 0xed, 0x50,
	0x62, 0x8b, 0x55, 0x37, 0x13, 0xdc, 0x67, 0x50, 0x92, 0xf1, 0xab, 0xe9, 0x7f, 0x96, 0x51, 0xcf,
	0x14, 0xc4, 0x8c, 0x41, 0xc6, 0x5f, 0xf2, 0x00, 0x83, 0x77, 0x21, 0x8e, 0x88, 0x6c, 0x9a, 0x9f,
	0x43, 0xd5, 0xb1, 0x19, 0xb6, 0x62, 0x83, 0xca, 0x83, 0xe7, 0xff, 0xc3, 0x03, 0x15, 0x8e, 0x50,
	0x50, 0xed, 0xf4, 0x13, 0x90, 0x94, 0x15, 0x3b, 0x90, 0xff, 0xa0, 0x03, 0x9a, 0x40, 0x4e, 0x04,
	0x10, 0xf5, 0xe1, 0x29, 0x5e, 0xfb, 0x90, 0xdc, 0x5d, 0xf8, 0xe0, 0xdd, 0xa6, 0x9e, 0x6a, 0xa8,
	0xcb, 0xcf, 0x21, 0xc3, 0x53, 0x2e, 0x14, 0x3f, 0xe4, 0x42, 0xec, 0x7f, 0x23, 0x55, 0x92, 0xde,
	0x18, 0x63, 0xa8, 0x8d, 0x68, 0x40, 0x23, 0x9b, 0x2c, 0x86, 0x8c, 0xad, 0x70, 0xb6, 0x2b, 0x72,
	0xef, 0x9f, 0x05, 0x22, 0x70, 0x16, 0xf1, 0x64, 0xc8, 0xaa, 0x0b, 0xcb, 0x92, 0x39, 0xf4, 0x8c,
	0x7f, 0x17, 0xa1, 0x7c, 0x45, 0x9d, 0x69, 0x88, 0x5d, 0x34, 0x84, 0x86, 0x4b, 0x97, 0xa1, 0x1d,
	0x11, 0x46, 0x03, 0x6b, 0x49, 0xbd, 0xb8, 0xca, 0xf5, 0xb3, 0x93, 0xd4, 0x45, 0x85, 0x6d, 0xf5,
	0xd6, 0xc0, 0x11, 0xf5, 0xb0, 0x59, 0x77, 0x1f, 0xd1, 0xe8, 0x73, 0xf8, 0x28, 0x6b, 0xca, 0xf6,
	0x03, 0xc2, 0x57, 0x1e, 0x96, 0x2e, 0xe4, 0xcc, 0xbd, 0x0c, 0x3a, 0x11, 0xc9, 0x61, 0xa2, 0xc1,
	0x1d, 0xf1, 0xb3, 0x7d, 0xab, 0x58, 0x42, 0xc8, 0xed, 0xc8, 0x57, 0xa3, 0x94, 0x08, 0x63, 0x16,
	0xfa, 0x02, 0x34, 0x27, 0xe9, 0x53, 0xf9, 0xc8, 0x57, 0xcf, 0xf6, 0x52, 0x8f, 0xd7, 0x2d, 0x2c,
	0x16, 0xc8, 0x1a, 0x87, 0x7e, 0x2a, 0x5e, 0xec, 0x24, 0xb7, 0xf2, 0xe1, 0xaf, 0x9e, 0x7d, 0x94,
	0x6a, 0xa5, 0x6d, 0x77, 0xf9, 0xc4, 0xcc, 0x20, 0xd1, 0x0d, 0xec, 0xf1, 0x64, 0x29, 0x58, 0xe9,
	0x1b, 0x58, 0xde, 0x1c, 0x87, 0xed, 0xcd, 0x71, 0x99, 0x33, 0x11, 0xdf, 0xde, 0xa5, 0x3d, 0x68,
	0xf8, 0xe2, 0xfd, 0xcb, 0x18, 0xab, 0x48, 0x63, 0xcd, 0x4c, 0x63, 0x3c, 0x7a, 0x7d, 0x2f, 0x73,
	0x66, 0x5d, 0xaa, 0xa4, 0x46, 0xbe, 0x82, 0xfa, 0x52, 0xb5, 0x85, 0x25, 0x4b, 0xdb, 0xd4, 0x36,
	0x3b, 0xf4, 0x51, 0xdb, 0x98, 0xb5, 0x65, 0x96, 0x34, 0x4c, 0xa8, 0x3f, 0xae, 0x28, 0x3a, 0x86,
	0xa3, 0xde, 0xcd, 0x68, 0xd2, 0x31, 0x87, 0xd3, 0x9b, 0xb1, 0x35, 0xba, 0xe9, 0x0f, 0x36, 0x96,
	0x4f, 0x03, 0xaa, 0x93, 0x81, 0x79, 0x7e, 0x63, 0x8e, 0x3a, 0xe3, 0x9e, 0xd8, 0x41, 0x75, 0x80,
	0xf3, 0xdb, 0x71, 0x6f, 0x36, 0xbc, 0x19, 0x77, 0xae, 0xf5, 0x7c, 0x17, 0xa0, 0x72, 0x4f, 0x1d,
	0xeb, 0x0d, 0x09, 0xbc, 0x6e, 0x15, 0x34, 0x3b, 0xf2, 0x57, 0x22, 0x83, 0xcc, 0xf8, 0x0a, 0xd0,
	0xd4, 0x9d, 0x63, 0x6f, 0xb5, 0xc0, 0x57, 0xd4, 0x31, 0xf1, 0xef, 0x56, 0x98, 0x71, 0x74, 0x0a,
	0x85, 0x7b, 0xea, 0xa8, 0xa9, 0x7e, 0xba, 0xd5, 0x71, 0x71, 0xc9, 0x05, 0xc4, 0xf8, 0x7b, 0x01,
	0x0a, 0x57, 0xd4, 0x41, 0x75, 0xc8, 0x13, 0x4f, 0x6d, 0x9f, 0x3c, 0xf1, 0xd0, 0x4b, 0xf1, 0xef,
	0xb0, 0x79, 0xdc, 0x65, 0xf5, 0x6c, 0x0f, 0x5c, 0x51, 0x47, 0xee, 0x6d, 0x6c, 0xc6, 0x08, 0xb1,
	0x80, 0xdd, 0x08, 0xdb, 0x1c, 0x7b, 0x96, 0xf3, 0xa0, 0xb6, 0x90, 0xa6, 0x38, 0xdd, 0x07, 0xf4,
	0x33, 0xa8, 0xc6, 0x84, 0x25, 0x3e, 0x44, 0x6a, 0x50, 0x0f, 0x5b, 0xf1, 0x6f, 0xa9, 0x95, 0xfc,
	0x96, 0x5a, 0xb3, 0xe4, 0xb7, 0x64, 0x2a, 0x6b, 0x82, 0x81, 0xfa, 0xa0, 0x2f, 0x6c, 0xc6, 0xad,
	0x55, 0xe8, 0xad, 0x2d, 0x94, 0xbe, 0xd5, 0x42, 0x5d, 0xe8, 0xdc, 0x4a, 0x15, 0x69, 0xe5, 0xb3,
	0x38, 0x7b, 0x2c, 0xc4, 0xae, 0xea, 0xce, 0xed, 0x9c, 0x98, 0xe5, 0x7b, 0x35, 0xba, 0x6d, 0xd8,
	0x73, 0xed, 0xc0, 0xc5, 0x8b, 0x85, 0xfc, 0x1b, 0x5a, 0x11, 0xb6, 0x19, 0x0d, 0x64, 0x57, 0x6a,
	0x26, 0xca, 0x8a, 0x4c, 0x29, 0x31, 0x1c, 0x28, 0xc9, 0x84, 0xa0, 0x7d, 0x78, 0x2a, 0xbe, 0x17,
	0x9b, 0xd5, 0xad, 0x42, 0x79, 0x32, 0x18, 0xf7, 0x87, 0xe3, 0x0b, 0x3d, 0x27, 0x08, 0xf3, 0x76,
	0x3c, 0x16, 0x44, 0x1e, 0xd5, 0x40, 0x9b, 0xde, 0xf6, 0x7a, 0x83, 0x41, 0x7f, 0xd0, 0xd7, 0x0b,
	0xe2, 0x43, 0x71, 0xde, 0x19, 0x5e, 0x0f, 0xfa, 0x7a, 0x51, 0x88, 0x7a, 0xa2, 0x19, 0xae, 0x05,
	0x59, 0x32, 0x7e, 0x01, 0xb5, 0x0b, 0xcc, 0x33, 0x25, 0x6e, 0xa7, 0x05, 0xeb, 0x1e, 0x7f, 0xd3,
	0xc9, 0xff, 0xa7, 0x73, 0x00, 0xcf, 0xed, 0x90, 0xa4, 0x81, 0xb9, 0x51, 0xcb, 0xc3, 0x6f, 0xdb,
	0x42, 0x27, 0x4f, 0x3c, 0x03, 0x43, 0x43, 0xfc, 0x97, 0xae, 0xa8, 0xc3, 0x12, 0x1b, 0x47, 0xa0,
	0x85, 0xb6, 0x8f, 0x2d, 0x46, 0xbe, 0x8e, 0x9f, 0xa7, 0x92, 0x58, 0xa9, 0x3e, 0x9e, 0x92, 0xaf,
	0x65, 0x59, 0xa5, 0x90, 0xd3, 0x37, 0x38, 0x50, 0xff, 0x0e, 0x09, 0x9f, 0x09, 0x06, 0x7a, 0x06,
	0x3b, 0x77, 0x64, 0xc1, 0x71, 0xa4, 0x2a, 0xae, 0x28, 0xe3, 0x37, 0xa0, 0xa7, 0xd7, 0xb0, 0x90,
	0x06, 0x0c, 0xa3, 0x1f, 0x42, 0xf1, 0x9e, 0x3a, 0xf1, 0xe7, 0xac, 0x7a, 0x56, 0x7b, 0x94, 0x7b,
	0x53, 0x8a, 0xd0, 0xa7, 0xd0, 0x08, 0xf0, 0x3b, 0xf1, 0x9a, 0x6f, 0x5c, 0x59, 0x13, 0xec, 0x49,
	0x72, 0xad, 0xf1, 0x5b, 0xd0, 0x7b, 0xb2, 0x02, 0xdf, 0x23, 0x15, 0xe2, 0x05, 0x54, 0x45, 0xcd,
	0x2c, 0x7f, 0xc5, 0x3a, 0xfb, 0x47, 0x1e, 0x2a, 0x13, 0xa5, 0x88, 0x7e, 0x09, 0xd5, 0xcc, 0x78,
	0xa1, 0xcc, 0x9b, 0xb4, 0x3d, 0x75, 0x87, 0x8f, 0x03, 0x33, 0xf6, 0xff, 0xf8, 0xcf, 0x7f, 0xfd,
	0x35, 0xdf, 0x30, 0x2a, 0xed, 0xb7, 0x9f, 0xb7, 0x45, 0x90, 0xaf, 0xc5, 0xc4, 0xa1, 0x3e, 0xec,
	0xc4, 0x95, 0x44, 0xd9, 0x95, 0x97, 0xad, 0xed, 0xa6, 0x21, 0x24, 0x0d, 0xed, 0x22, 0x48, 0x0c,
	0xb5, 0x5f, 0xa1, 0x29, 0x54, 0x92, 0x34, 0xa3, 0x83, 0x14, 0xbe, 0x51, 0xe1, 0xc3, 0xc3, 0xf7,
	0x89, 0xe2, 0xaa, 0x18, 0xba, 0x34, 0x0b, 0x68, 0xed, 0x1f, 0x9a, 0x82, 0xb6, 0x4e, 0x2e, 0xca,
	0xa8, 0x6e, 0x66, 0x7c, 0xd3, 0xc1, 0x23, 0x69, 0x69, 0xdf, 0xd0, 0x95, 0xa5, 0xf6, 0xab, 0xd7,
	0xf1, 0x98, 0xbc, 0xce, 0xbd, 0x72, 0x76, 0xe4, 0x80, 0x7e, 0xf1, 0xdf, 0x00, 0x00, 0x00, 0xff,
	0xff, 0x1f, 0x55, 0x3a, 0x88, 0xae, 0x0d, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// PinpointClient is the client API for Pinpoint service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type PinpointClient interface {
	// Schedules a Pinpoint Job for execution.
	ScheduleJob(ctx context.Context, in *ScheduleJobRequest, opts ...grpc.CallOption) (*Job, error)
	// Retrieves details about a Pinpoint Job.
	GetJob(ctx context.Context, in *GetJobRequest, opts ...grpc.CallOption) (*Job, error)
	// Lists jobs with filters.
	ListJobs(ctx context.Context, in *ListJobsRequest, opts ...grpc.CallOption) (*ListJobsResponse, error)
	// Cancels an ongoing job.
	CancelJob(ctx context.Context, in *CancelJobRequest, opts ...grpc.CallOption) (*Job, error)
}
type pinpointPRPCClient struct {
	client *prpc.Client
}

func NewPinpointPRPCClient(client *prpc.Client) PinpointClient {
	return &pinpointPRPCClient{client}
}

func (c *pinpointPRPCClient) ScheduleJob(ctx context.Context, in *ScheduleJobRequest, opts ...grpc.CallOption) (*Job, error) {
	out := new(Job)
	err := c.client.Call(ctx, "pinpoint.Pinpoint", "ScheduleJob", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pinpointPRPCClient) GetJob(ctx context.Context, in *GetJobRequest, opts ...grpc.CallOption) (*Job, error) {
	out := new(Job)
	err := c.client.Call(ctx, "pinpoint.Pinpoint", "GetJob", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pinpointPRPCClient) ListJobs(ctx context.Context, in *ListJobsRequest, opts ...grpc.CallOption) (*ListJobsResponse, error) {
	out := new(ListJobsResponse)
	err := c.client.Call(ctx, "pinpoint.Pinpoint", "ListJobs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pinpointPRPCClient) CancelJob(ctx context.Context, in *CancelJobRequest, opts ...grpc.CallOption) (*Job, error) {
	out := new(Job)
	err := c.client.Call(ctx, "pinpoint.Pinpoint", "CancelJob", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

type pinpointClient struct {
	cc grpc.ClientConnInterface
}

func NewPinpointClient(cc grpc.ClientConnInterface) PinpointClient {
	return &pinpointClient{cc}
}

func (c *pinpointClient) ScheduleJob(ctx context.Context, in *ScheduleJobRequest, opts ...grpc.CallOption) (*Job, error) {
	out := new(Job)
	err := c.cc.Invoke(ctx, "/pinpoint.Pinpoint/ScheduleJob", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pinpointClient) GetJob(ctx context.Context, in *GetJobRequest, opts ...grpc.CallOption) (*Job, error) {
	out := new(Job)
	err := c.cc.Invoke(ctx, "/pinpoint.Pinpoint/GetJob", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pinpointClient) ListJobs(ctx context.Context, in *ListJobsRequest, opts ...grpc.CallOption) (*ListJobsResponse, error) {
	out := new(ListJobsResponse)
	err := c.cc.Invoke(ctx, "/pinpoint.Pinpoint/ListJobs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pinpointClient) CancelJob(ctx context.Context, in *CancelJobRequest, opts ...grpc.CallOption) (*Job, error) {
	out := new(Job)
	err := c.cc.Invoke(ctx, "/pinpoint.Pinpoint/CancelJob", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PinpointServer is the server API for Pinpoint service.
type PinpointServer interface {
	// Schedules a Pinpoint Job for execution.
	ScheduleJob(context.Context, *ScheduleJobRequest) (*Job, error)
	// Retrieves details about a Pinpoint Job.
	GetJob(context.Context, *GetJobRequest) (*Job, error)
	// Lists jobs with filters.
	ListJobs(context.Context, *ListJobsRequest) (*ListJobsResponse, error)
	// Cancels an ongoing job.
	CancelJob(context.Context, *CancelJobRequest) (*Job, error)
}

// UnimplementedPinpointServer can be embedded to have forward compatible implementations.
type UnimplementedPinpointServer struct {
}

func (*UnimplementedPinpointServer) ScheduleJob(ctx context.Context, req *ScheduleJobRequest) (*Job, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ScheduleJob not implemented")
}
func (*UnimplementedPinpointServer) GetJob(ctx context.Context, req *GetJobRequest) (*Job, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetJob not implemented")
}
func (*UnimplementedPinpointServer) ListJobs(ctx context.Context, req *ListJobsRequest) (*ListJobsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListJobs not implemented")
}
func (*UnimplementedPinpointServer) CancelJob(ctx context.Context, req *CancelJobRequest) (*Job, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelJob not implemented")
}

func RegisterPinpointServer(s prpc.Registrar, srv PinpointServer) {
	s.RegisterService(&_Pinpoint_serviceDesc, srv)
}

func _Pinpoint_ScheduleJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ScheduleJobRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PinpointServer).ScheduleJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pinpoint.Pinpoint/ScheduleJob",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PinpointServer).ScheduleJob(ctx, req.(*ScheduleJobRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pinpoint_GetJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetJobRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PinpointServer).GetJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pinpoint.Pinpoint/GetJob",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PinpointServer).GetJob(ctx, req.(*GetJobRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pinpoint_ListJobs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListJobsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PinpointServer).ListJobs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pinpoint.Pinpoint/ListJobs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PinpointServer).ListJobs(ctx, req.(*ListJobsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pinpoint_CancelJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CancelJobRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PinpointServer).CancelJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pinpoint.Pinpoint/CancelJob",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PinpointServer).CancelJob(ctx, req.(*CancelJobRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Pinpoint_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pinpoint.Pinpoint",
	HandlerType: (*PinpointServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ScheduleJob",
			Handler:    _Pinpoint_ScheduleJob_Handler,
		},
		{
			MethodName: "GetJob",
			Handler:    _Pinpoint_GetJob_Handler,
		},
		{
			MethodName: "ListJobs",
			Handler:    _Pinpoint_ListJobs_Handler,
		},
		{
			MethodName: "CancelJob",
			Handler:    _Pinpoint_CancelJob_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "infra/chromeperf/pinpoint/pinpoint.proto",
}
