// Code generated by protoc-gen-go.
// source: log_request_lite.proto
// DO NOT EDIT!

package crit_event

import proto "github.com/golang/protobuf/proto"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = math.Inf

// Stripped-down version of LogRequest, for use on public systems.
type LogRequestLite struct {
	// "Now", in milliseconds, according to the same clock that was used to set
	// 'event_time_ms' values in the LogEventLite protos below.
	RequestTimeMs *int64 `protobuf:"varint,4,opt,name=request_time_ms" json:"request_time_ms,omitempty"`
	// The name of a LogRequest.LogSource enum value. The server converts it to
	// a proper enum value.
	LogSourceName    *string                        `protobuf:"bytes,6,opt,name=log_source_name" json:"log_source_name,omitempty"`
	LogEvent         []*LogRequestLite_LogEventLite `protobuf:"bytes,3,rep,name=log_event" json:"log_event,omitempty"`
	XXX_unrecognized []byte                         `json:"-"`
}

func (m *LogRequestLite) Reset()         { *m = LogRequestLite{} }
func (m *LogRequestLite) String() string { return proto.CompactTextString(m) }
func (*LogRequestLite) ProtoMessage()    {}

func (m *LogRequestLite) GetRequestTimeMs() int64 {
	if m != nil && m.RequestTimeMs != nil {
		return *m.RequestTimeMs
	}
	return 0
}

func (m *LogRequestLite) GetLogSourceName() string {
	if m != nil && m.LogSourceName != nil {
		return *m.LogSourceName
	}
	return ""
}

func (m *LogRequestLite) GetLogEvent() []*LogRequestLite_LogEventLite {
	if m != nil {
		return m.LogEvent
	}
	return nil
}

type LogRequestLite_LogEventLite struct {
	// Epoch time in milliseconds.
	EventTimeMs *int64 `protobuf:"varint,1,opt,name=event_time_ms" json:"event_time_ms,omitempty"`
	// Type of event. Different kinds of events inside a client app should have
	// different values of 'event_code'. Different client apps may have
	// overlapping sets of 'event_code' values; these values are only meant to
	// make sense within the context of a single client app, as identified by
	// the 'log_source_name' field of LogRequestLite.
	//
	// This enum type should be annotated with a LogEventRoutingConfig proto.
	EventCode *int32 `protobuf:"varint,11,opt,name=event_code" json:"event_code,omitempty"`
	// Identifies a group of events that belong to the same flow or session of
	// user interaction, which is a client-specific concept.
	//
	// These IDs are used in the pipeline for computing latencies between pairs
	// of events, where it is necessary to ensure that both events belong to the
	// same flow.
	EventFlowId *int32 `protobuf:"varint,12,opt,name=event_flow_id" json:"event_flow_id,omitempty"`
	// A source specific extension (typically a serialized proto). The type of
	// this data is determined by the log_source of the enclosing LogRequestLite.
	// The proto is derived by calling the ParseFromString method.
	SourceExtension  []byte `protobuf:"bytes,6,opt,name=source_extension" json:"source_extension,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *LogRequestLite_LogEventLite) Reset()         { *m = LogRequestLite_LogEventLite{} }
func (m *LogRequestLite_LogEventLite) String() string { return proto.CompactTextString(m) }
func (*LogRequestLite_LogEventLite) ProtoMessage()    {}

func (m *LogRequestLite_LogEventLite) GetEventTimeMs() int64 {
	if m != nil && m.EventTimeMs != nil {
		return *m.EventTimeMs
	}
	return 0
}

func (m *LogRequestLite_LogEventLite) GetEventCode() int32 {
	if m != nil && m.EventCode != nil {
		return *m.EventCode
	}
	return 0
}

func (m *LogRequestLite_LogEventLite) GetEventFlowId() int32 {
	if m != nil && m.EventFlowId != nil {
		return *m.EventFlowId
	}
	return 0
}

func (m *LogRequestLite_LogEventLite) GetSourceExtension() []byte {
	if m != nil {
		return m.SourceExtension
	}
	return nil
}
