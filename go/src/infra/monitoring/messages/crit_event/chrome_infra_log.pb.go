// Code generated by protoc-gen-go.
// source: chrome_infra_log.proto
// DO NOT EDIT!

/*
Package crit_event is a generated protocol buffer package.

It is generated from these files:
	chrome_infra_log.proto
	log_request_lite.proto

It has these top-level messages:
	CommitQueuePatchsetEvent
	CodeVersion
	ServiceEvent
	BuildEvent
	InfraEventSource
	ChromeInfraEvent
*/
package crit_event

import proto "github.com/golang/protobuf/proto"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = math.Inf

type CommitQueuePatchsetEvent_CQEventType int32

const (
	// Patch processing stops.
	CommitQueuePatchsetEvent_PATCH_FAILURE CommitQueuePatchsetEvent_CQEventType = 0
	CommitQueuePatchsetEvent_PATCH_STOP    CommitQueuePatchsetEvent_CQEventType = 1
	// Patch processing is paused.
	CommitQueuePatchsetEvent_PATCH_TREE_CLOSED CommitQueuePatchsetEvent_CQEventType = 2
	CommitQueuePatchsetEvent_PATCH_THROTTLED   CommitQueuePatchsetEvent_CQEventType = 3
	// Patch processing continues.
	CommitQueuePatchsetEvent_PATCH_READY_TO_COMMIT CommitQueuePatchsetEvent_CQEventType = 4
	CommitQueuePatchsetEvent_PATCH_COMMIT_START    CommitQueuePatchsetEvent_CQEventType = 5
	CommitQueuePatchsetEvent_PATCH_COMMIT_DONE     CommitQueuePatchsetEvent_CQEventType = 6
)

var CommitQueuePatchsetEvent_CQEventType_name = map[int32]string{
	0: "PATCH_FAILURE",
	1: "PATCH_STOP",
	2: "PATCH_TREE_CLOSED",
	3: "PATCH_THROTTLED",
	4: "PATCH_READY_TO_COMMIT",
	5: "PATCH_COMMIT_START",
	6: "PATCH_COMMIT_DONE",
}
var CommitQueuePatchsetEvent_CQEventType_value = map[string]int32{
	"PATCH_FAILURE":         0,
	"PATCH_STOP":            1,
	"PATCH_TREE_CLOSED":     2,
	"PATCH_THROTTLED":       3,
	"PATCH_READY_TO_COMMIT": 4,
	"PATCH_COMMIT_START":    5,
	"PATCH_COMMIT_DONE":     6,
}

func (x CommitQueuePatchsetEvent_CQEventType) Enum() *CommitQueuePatchsetEvent_CQEventType {
	p := new(CommitQueuePatchsetEvent_CQEventType)
	*p = x
	return p
}
func (x CommitQueuePatchsetEvent_CQEventType) String() string {
	return proto.EnumName(CommitQueuePatchsetEvent_CQEventType_name, int32(x))
}
func (x *CommitQueuePatchsetEvent_CQEventType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(CommitQueuePatchsetEvent_CQEventType_value, data, "CommitQueuePatchsetEvent_CQEventType")
	if err != nil {
		return err
	}
	*x = CommitQueuePatchsetEvent_CQEventType(value)
	return nil
}

type CommitQueuePatchsetEvent_ResultType int32

const (
	CommitQueuePatchsetEvent_UNKNOWN CommitQueuePatchsetEvent_ResultType = 0
	// Failure
	CommitQueuePatchsetEvent_MISSING_LGTM   CommitQueuePatchsetEvent_ResultType = 1
	CommitQueuePatchsetEvent_INVALID_LGTM   CommitQueuePatchsetEvent_ResultType = 2
	CommitQueuePatchsetEvent_FAILED_TRYJOBS CommitQueuePatchsetEvent_ResultType = 3
	CommitQueuePatchsetEvent_COMMIT_FAILED  CommitQueuePatchsetEvent_ResultType = 4
	// Non-failure
	CommitQueuePatchsetEvent_COMMITTED      CommitQueuePatchsetEvent_ResultType = 10
	CommitQueuePatchsetEvent_USER_CANCELLED CommitQueuePatchsetEvent_ResultType = 11
)

var CommitQueuePatchsetEvent_ResultType_name = map[int32]string{
	0:  "UNKNOWN",
	1:  "MISSING_LGTM",
	2:  "INVALID_LGTM",
	3:  "FAILED_TRYJOBS",
	4:  "COMMIT_FAILED",
	10: "COMMITTED",
	11: "USER_CANCELLED",
}
var CommitQueuePatchsetEvent_ResultType_value = map[string]int32{
	"UNKNOWN":        0,
	"MISSING_LGTM":   1,
	"INVALID_LGTM":   2,
	"FAILED_TRYJOBS": 3,
	"COMMIT_FAILED":  4,
	"COMMITTED":      10,
	"USER_CANCELLED": 11,
}

func (x CommitQueuePatchsetEvent_ResultType) Enum() *CommitQueuePatchsetEvent_ResultType {
	p := new(CommitQueuePatchsetEvent_ResultType)
	*p = x
	return p
}
func (x CommitQueuePatchsetEvent_ResultType) String() string {
	return proto.EnumName(CommitQueuePatchsetEvent_ResultType_name, int32(x))
}
func (x *CommitQueuePatchsetEvent_ResultType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(CommitQueuePatchsetEvent_ResultType_value, data, "CommitQueuePatchsetEvent_ResultType")
	if err != nil {
		return err
	}
	*x = CommitQueuePatchsetEvent_ResultType(value)
	return nil
}

type ServiceEvent_ServiceEventType int32

const (
	ServiceEvent_UNKNOWN         ServiceEvent_ServiceEventType = 0
	ServiceEvent_START           ServiceEvent_ServiceEventType = 1
	ServiceEvent_STOP            ServiceEvent_ServiceEventType = 2
	ServiceEvent_UPDATE          ServiceEvent_ServiceEventType = 3
	ServiceEvent_CURRENT_VERSION ServiceEvent_ServiceEventType = 4
	ServiceEvent_CRASH           ServiceEvent_ServiceEventType = 5
)

var ServiceEvent_ServiceEventType_name = map[int32]string{
	0: "UNKNOWN",
	1: "START",
	2: "STOP",
	3: "UPDATE",
	4: "CURRENT_VERSION",
	5: "CRASH",
}
var ServiceEvent_ServiceEventType_value = map[string]int32{
	"UNKNOWN":         0,
	"START":           1,
	"STOP":            2,
	"UPDATE":          3,
	"CURRENT_VERSION": 4,
	"CRASH":           5,
}

func (x ServiceEvent_ServiceEventType) Enum() *ServiceEvent_ServiceEventType {
	p := new(ServiceEvent_ServiceEventType)
	*p = x
	return p
}
func (x ServiceEvent_ServiceEventType) String() string {
	return proto.EnumName(ServiceEvent_ServiceEventType_name, int32(x))
}
func (x *ServiceEvent_ServiceEventType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(ServiceEvent_ServiceEventType_value, data, "ServiceEvent_ServiceEventType")
	if err != nil {
		return err
	}
	*x = ServiceEvent_ServiceEventType(value)
	return nil
}

type BuildEvent_BuildEventType int32

const (
	BuildEvent_SCHEDULER BuildEvent_BuildEventType = 0
	BuildEvent_BUILD     BuildEvent_BuildEventType = 1
	BuildEvent_STEP      BuildEvent_BuildEventType = 2
)

var BuildEvent_BuildEventType_name = map[int32]string{
	0: "SCHEDULER",
	1: "BUILD",
	2: "STEP",
}
var BuildEvent_BuildEventType_value = map[string]int32{
	"SCHEDULER": 0,
	"BUILD":     1,
	"STEP":      2,
}

func (x BuildEvent_BuildEventType) Enum() *BuildEvent_BuildEventType {
	p := new(BuildEvent_BuildEventType)
	*p = x
	return p
}
func (x BuildEvent_BuildEventType) String() string {
	return proto.EnumName(BuildEvent_BuildEventType_name, int32(x))
}
func (x *BuildEvent_BuildEventType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(BuildEvent_BuildEventType_value, data, "BuildEvent_BuildEventType")
	if err != nil {
		return err
	}
	*x = BuildEvent_BuildEventType(value)
	return nil
}

type BuildEvent_BuildResult int32

const (
	BuildEvent_UNKNOWN       BuildEvent_BuildResult = 0
	BuildEvent_SUCCESS       BuildEvent_BuildResult = 1
	BuildEvent_FAILURE       BuildEvent_BuildResult = 2
	BuildEvent_INFRA_FAILURE BuildEvent_BuildResult = 3
	BuildEvent_WARNING       BuildEvent_BuildResult = 4
	BuildEvent_SKIPPED       BuildEvent_BuildResult = 5
	BuildEvent_RETRY         BuildEvent_BuildResult = 6
)

var BuildEvent_BuildResult_name = map[int32]string{
	0: "UNKNOWN",
	1: "SUCCESS",
	2: "FAILURE",
	3: "INFRA_FAILURE",
	4: "WARNING",
	5: "SKIPPED",
	6: "RETRY",
}
var BuildEvent_BuildResult_value = map[string]int32{
	"UNKNOWN":       0,
	"SUCCESS":       1,
	"FAILURE":       2,
	"INFRA_FAILURE": 3,
	"WARNING":       4,
	"SKIPPED":       5,
	"RETRY":         6,
}

func (x BuildEvent_BuildResult) Enum() *BuildEvent_BuildResult {
	p := new(BuildEvent_BuildResult)
	*p = x
	return p
}
func (x BuildEvent_BuildResult) String() string {
	return proto.EnumName(BuildEvent_BuildResult_name, int32(x))
}
func (x *BuildEvent_BuildResult) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(BuildEvent_BuildResult_value, data, "BuildEvent_BuildResult")
	if err != nil {
		return err
	}
	*x = BuildEvent_BuildResult(value)
	return nil
}

type ChromeInfraEvent_TimestampKind int32

const (
	ChromeInfraEvent_UNKNOWN ChromeInfraEvent_TimestampKind = 0
	// Event with no time extension
	ChromeInfraEvent_POINT ChromeInfraEvent_TimestampKind = 1
	// Start/end of an event with a time extension.
	ChromeInfraEvent_BEGIN ChromeInfraEvent_TimestampKind = 2
	ChromeInfraEvent_END   ChromeInfraEvent_TimestampKind = 3
)

var ChromeInfraEvent_TimestampKind_name = map[int32]string{
	0: "UNKNOWN",
	1: "POINT",
	2: "BEGIN",
	3: "END",
}
var ChromeInfraEvent_TimestampKind_value = map[string]int32{
	"UNKNOWN": 0,
	"POINT":   1,
	"BEGIN":   2,
	"END":     3,
}

func (x ChromeInfraEvent_TimestampKind) Enum() *ChromeInfraEvent_TimestampKind {
	p := new(ChromeInfraEvent_TimestampKind)
	*p = x
	return p
}
func (x ChromeInfraEvent_TimestampKind) String() string {
	return proto.EnumName(ChromeInfraEvent_TimestampKind_name, int32(x))
}
func (x *ChromeInfraEvent_TimestampKind) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(ChromeInfraEvent_TimestampKind_value, data, "ChromeInfraEvent_TimestampKind")
	if err != nil {
		return err
	}
	*x = ChromeInfraEvent_TimestampKind(value)
	return nil
}

// Patchset processing by the commit queue.
// Description of the patchset should be provided in the trace_id and span_id
// members in ChromeInfraEvent.
//
// Next tag: 3
type CommitQueuePatchsetEvent struct {
	// The kind of event that happened.
	Type *CommitQueuePatchsetEvent_CQEventType `protobuf:"varint,1,opt,name=type,enum=crit_event.CommitQueuePatchsetEvent_CQEventType" json:"type,omitempty"`
	// Outcome for the 'PATCH_STOP' event.
	ResultType       *CommitQueuePatchsetEvent_ResultType `protobuf:"varint,2,opt,name=result_type,enum=crit_event.CommitQueuePatchsetEvent_ResultType,def=0" json:"result_type,omitempty"`
	XXX_unrecognized []byte                               `json:"-"`
}

func (m *CommitQueuePatchsetEvent) Reset()         { *m = CommitQueuePatchsetEvent{} }
func (m *CommitQueuePatchsetEvent) String() string { return proto.CompactTextString(m) }
func (*CommitQueuePatchsetEvent) ProtoMessage()    {}

const Default_CommitQueuePatchsetEvent_ResultType CommitQueuePatchsetEvent_ResultType = CommitQueuePatchsetEvent_UNKNOWN

func (m *CommitQueuePatchsetEvent) GetType() CommitQueuePatchsetEvent_CQEventType {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return CommitQueuePatchsetEvent_PATCH_FAILURE
}

func (m *CommitQueuePatchsetEvent) GetResultType() CommitQueuePatchsetEvent_ResultType {
	if m != nil && m.ResultType != nil {
		return *m.ResultType
	}
	return Default_CommitQueuePatchsetEvent_ResultType
}

// Describe version of code used or checked-out.
//
// Next tag: 6
type CodeVersion struct {
	// A reference to the source repository. Do not include any hash / revision
	// information.
	SourceUrl *string `protobuf:"bytes,1,opt,name=source_url" json:"source_url,omitempty"`
	// Indicates if the current state of the code has local modification.
	Dirty *bool `protobuf:"varint,2,opt,name=dirty" json:"dirty,omitempty"`
	// Provide only one of these, depending on version control system used.
	Version          *string `protobuf:"bytes,3,opt,name=version" json:"version,omitempty"`
	GitHash          *string `protobuf:"bytes,4,opt,name=git_hash" json:"git_hash,omitempty"`
	SvnRevision      *int32  `protobuf:"varint,5,opt,name=svn_revision" json:"svn_revision,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *CodeVersion) Reset()         { *m = CodeVersion{} }
func (m *CodeVersion) String() string { return proto.CompactTextString(m) }
func (*CodeVersion) ProtoMessage()    {}

func (m *CodeVersion) GetSourceUrl() string {
	if m != nil && m.SourceUrl != nil {
		return *m.SourceUrl
	}
	return ""
}

func (m *CodeVersion) GetDirty() bool {
	if m != nil && m.Dirty != nil {
		return *m.Dirty
	}
	return false
}

func (m *CodeVersion) GetVersion() string {
	if m != nil && m.Version != nil {
		return *m.Version
	}
	return ""
}

func (m *CodeVersion) GetGitHash() string {
	if m != nil && m.GitHash != nil {
		return *m.GitHash
	}
	return ""
}

func (m *CodeVersion) GetSvnRevision() int32 {
	if m != nil && m.SvnRevision != nil {
		return *m.SvnRevision
	}
	return 0
}

// Describes a maintenance event on a system.
//
// Next tag: 4
type ServiceEvent struct {
	// Type of maintenance event (mandatory)
	Type *ServiceEvent_ServiceEventType `protobuf:"varint,1,opt,name=type,enum=crit_event.ServiceEvent_ServiceEventType,def=0" json:"type,omitempty"`
	// Version of the code running at the time of the event when appropriate.
	CodeVersion []*CodeVersion `protobuf:"bytes,2,rep,name=code_version" json:"code_version,omitempty"`
	// Stack trace in case of a crash.
	StackTrace       *string `protobuf:"bytes,3,opt,name=stack_trace" json:"stack_trace,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *ServiceEvent) Reset()         { *m = ServiceEvent{} }
func (m *ServiceEvent) String() string { return proto.CompactTextString(m) }
func (*ServiceEvent) ProtoMessage()    {}

const Default_ServiceEvent_Type ServiceEvent_ServiceEventType = ServiceEvent_UNKNOWN

func (m *ServiceEvent) GetType() ServiceEvent_ServiceEventType {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return Default_ServiceEvent_Type
}

func (m *ServiceEvent) GetCodeVersion() []*CodeVersion {
	if m != nil {
		return m.CodeVersion
	}
	return nil
}

func (m *ServiceEvent) GetStackTrace() string {
	if m != nil && m.StackTrace != nil {
		return *m.StackTrace
	}
	return ""
}

// Build events. Use that to get e.g. timing info and failure / success rates
//
// Next tag: 9
type BuildEvent struct {
	// Which build entity is considered here
	Type *BuildEvent_BuildEventType `protobuf:"varint,1,opt,name=type,enum=crit_event.BuildEvent_BuildEventType" json:"type,omitempty"`
	// Hostname of the machine running the build
	HostName *string `protobuf:"bytes,2,opt,name=host_name" json:"host_name,omitempty"`
	// Name of the builder
	// This should not contain the master name: Use
	// ChromeInfraEvent.event_source to provide it.
	BuildName *string `protobuf:"bytes,3,opt,name=build_name" json:"build_name,omitempty"`
	// Build number (if type is BUILD or STEP)
	BuildNumber *int32 `protobuf:"varint,4,opt,name=build_number" json:"build_number,omitempty"`
	// This is used to dedup builds with identical build_number.
	BuildSchedulingTimeMs *int64 `protobuf:"varint,5,opt,name=build_scheduling_time_ms" json:"build_scheduling_time_ms,omitempty"`
	// Name of the step (if type is STEP)
	StepName *string `protobuf:"bytes,6,opt,name=step_name" json:"step_name,omitempty"`
	// Rank of the step in the build
	StepNumber *int32 `protobuf:"varint,7,opt,name=step_number" json:"step_number,omitempty"`
	// Result of a event when it finishes. Use only for BUILD and STEP.
	Result           *BuildEvent_BuildResult `protobuf:"varint,8,opt,name=result,enum=crit_event.BuildEvent_BuildResult,def=0" json:"result,omitempty"`
	XXX_unrecognized []byte                  `json:"-"`
}

func (m *BuildEvent) Reset()         { *m = BuildEvent{} }
func (m *BuildEvent) String() string { return proto.CompactTextString(m) }
func (*BuildEvent) ProtoMessage()    {}

const Default_BuildEvent_Result BuildEvent_BuildResult = BuildEvent_UNKNOWN

func (m *BuildEvent) GetType() BuildEvent_BuildEventType {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return BuildEvent_SCHEDULER
}

func (m *BuildEvent) GetHostName() string {
	if m != nil && m.HostName != nil {
		return *m.HostName
	}
	return ""
}

func (m *BuildEvent) GetBuildName() string {
	if m != nil && m.BuildName != nil {
		return *m.BuildName
	}
	return ""
}

func (m *BuildEvent) GetBuildNumber() int32 {
	if m != nil && m.BuildNumber != nil {
		return *m.BuildNumber
	}
	return 0
}

func (m *BuildEvent) GetBuildSchedulingTimeMs() int64 {
	if m != nil && m.BuildSchedulingTimeMs != nil {
		return *m.BuildSchedulingTimeMs
	}
	return 0
}

func (m *BuildEvent) GetStepName() string {
	if m != nil && m.StepName != nil {
		return *m.StepName
	}
	return ""
}

func (m *BuildEvent) GetStepNumber() int32 {
	if m != nil && m.StepNumber != nil {
		return *m.StepNumber
	}
	return 0
}

func (m *BuildEvent) GetResult() BuildEvent_BuildResult {
	if m != nil && m.Result != nil {
		return *m.Result
	}
	return Default_BuildEvent_Result
}

// Next tag: 4
type InfraEventSource struct {
	// This should not be an IP address.
	HostName *string `protobuf:"bytes,1,opt,name=host_name" json:"host_name,omitempty"`
	// Provide the name found in app.yaml, not the URL
	AppengineName *string `protobuf:"bytes,2,opt,name=appengine_name" json:"appengine_name,omitempty"`
	// Name of service as found in infra(_internal).git/infra/services
	// Ex: builder_alerts.
	ServiceName      *string `protobuf:"bytes,3,opt,name=service_name" json:"service_name,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *InfraEventSource) Reset()         { *m = InfraEventSource{} }
func (m *InfraEventSource) String() string { return proto.CompactTextString(m) }
func (*InfraEventSource) ProtoMessage()    {}

func (m *InfraEventSource) GetHostName() string {
	if m != nil && m.HostName != nil {
		return *m.HostName
	}
	return ""
}

func (m *InfraEventSource) GetAppengineName() string {
	if m != nil && m.AppengineName != nil {
		return *m.AppengineName
	}
	return ""
}

func (m *InfraEventSource) GetServiceName() string {
	if m != nil && m.ServiceName != nil {
		return *m.ServiceName
	}
	return ""
}

// Describes an event happening on the Chrome infrastructure go/chrome-infra
// This is rather generic on purpose. New use cases should be added as a new
// *_event field at the end.
//
// Next tag: 9
type ChromeInfraEvent struct {
	// Meaning of the timestamp provided in LogEvent.event_time_ms
	// An event with a time extension (http request e.g.) should have two
	// ChromeInfraEvent associated with it, marked BEGIN and END respectively.
	TimestampKind *ChromeInfraEvent_TimestampKind `protobuf:"varint,1,opt,name=timestamp_kind,enum=crit_event.ChromeInfraEvent_TimestampKind,def=0" json:"timestamp_kind,omitempty"`
	// // Dapper-style IDs, used to reconstruct traces.
	// First event in the tree of events.
	TraceId *string `protobuf:"bytes,2,opt,name=trace_id" json:"trace_id,omitempty"`
	// Current event.
	SpanId *string `protobuf:"bytes,3,opt,name=span_id" json:"span_id,omitempty"`
	// (optional) event that triggered the current one.
	ParentId *string `protobuf:"bytes,4,opt,name=parent_id" json:"parent_id,omitempty"`
	// Can be a machine name, the name of a service, or something else.
	EventSource *InfraEventSource `protobuf:"bytes,5,opt,name=event_source" json:"event_source,omitempty"`
	// Below this line: different kind of events. A single one should be provided.
	// See the definition of each message type for a detailed description of
	// their use.
	ServiceEvent     *ServiceEvent             `protobuf:"bytes,6,opt,name=service_event" json:"service_event,omitempty"`
	CqPatchsetEvent  *CommitQueuePatchsetEvent `protobuf:"bytes,7,opt,name=cq_patchset_event" json:"cq_patchset_event,omitempty"`
	BuildEvent       *BuildEvent               `protobuf:"bytes,8,opt,name=build_event" json:"build_event,omitempty"`
	XXX_unrecognized []byte                    `json:"-"`
}

func (m *ChromeInfraEvent) Reset()         { *m = ChromeInfraEvent{} }
func (m *ChromeInfraEvent) String() string { return proto.CompactTextString(m) }
func (*ChromeInfraEvent) ProtoMessage()    {}

const Default_ChromeInfraEvent_TimestampKind ChromeInfraEvent_TimestampKind = ChromeInfraEvent_UNKNOWN

func (m *ChromeInfraEvent) GetTimestampKind() ChromeInfraEvent_TimestampKind {
	if m != nil && m.TimestampKind != nil {
		return *m.TimestampKind
	}
	return Default_ChromeInfraEvent_TimestampKind
}

func (m *ChromeInfraEvent) GetTraceId() string {
	if m != nil && m.TraceId != nil {
		return *m.TraceId
	}
	return ""
}

func (m *ChromeInfraEvent) GetSpanId() string {
	if m != nil && m.SpanId != nil {
		return *m.SpanId
	}
	return ""
}

func (m *ChromeInfraEvent) GetParentId() string {
	if m != nil && m.ParentId != nil {
		return *m.ParentId
	}
	return ""
}

func (m *ChromeInfraEvent) GetEventSource() *InfraEventSource {
	if m != nil {
		return m.EventSource
	}
	return nil
}

func (m *ChromeInfraEvent) GetServiceEvent() *ServiceEvent {
	if m != nil {
		return m.ServiceEvent
	}
	return nil
}

func (m *ChromeInfraEvent) GetCqPatchsetEvent() *CommitQueuePatchsetEvent {
	if m != nil {
		return m.CqPatchsetEvent
	}
	return nil
}

func (m *ChromeInfraEvent) GetBuildEvent() *BuildEvent {
	if m != nil {
		return m.BuildEvent
	}
	return nil
}

func init() {
	proto.RegisterEnum("crit_event.CommitQueuePatchsetEvent_CQEventType", CommitQueuePatchsetEvent_CQEventType_name, CommitQueuePatchsetEvent_CQEventType_value)
	proto.RegisterEnum("crit_event.CommitQueuePatchsetEvent_ResultType", CommitQueuePatchsetEvent_ResultType_name, CommitQueuePatchsetEvent_ResultType_value)
	proto.RegisterEnum("crit_event.ServiceEvent_ServiceEventType", ServiceEvent_ServiceEventType_name, ServiceEvent_ServiceEventType_value)
	proto.RegisterEnum("crit_event.BuildEvent_BuildEventType", BuildEvent_BuildEventType_name, BuildEvent_BuildEventType_value)
	proto.RegisterEnum("crit_event.BuildEvent_BuildResult", BuildEvent_BuildResult_name, BuildEvent_BuildResult_value)
	proto.RegisterEnum("crit_event.ChromeInfraEvent_TimestampKind", ChromeInfraEvent_TimestampKind_name, ChromeInfraEvent_TimestampKind_value)
}
