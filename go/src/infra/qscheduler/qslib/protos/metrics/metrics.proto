// Copyright 2019 The LUCI Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
syntax = "proto3";
package metrics;

import "google/protobuf/timestamp.proto";

// TaskEvent represents a quotascheduler event that happened to a particular
// task, for metrics purposes.
//
// This proto is intended to be used as a schema for a BigQuery table, in which
// events are logged.
message TaskEvent {

  enum EventCategory {
    CATEGORY_UNSPECIFIED = 0;

    // CATEGORY_SWARMING events are due to new information from swarming.
    CATEGORY_SWARMING = 0x100;

    // CATEGORY_QSCHEDULER events are due to a decision made by quotascheduler.
    CATEGORY_QSCHEDULER = 0x200;
  }

  enum EventType {
    // Invalid or unspecified event type.
    UNSPECIFIED = 0;

    // Task was enqueued.
    SWARMING_ENQUEUED = 0x101;

    // Task completed (was removed from running worker or from queue).
    SWARMING_COMPLETED = 0x102;

    // Task was assigned to a bot.
    QSCHEDULER_ASSIGNED = 0x201;

    // Task (which was previously assigned to a bot) was interrupted by another
    // task.
    QSCHEDULER_PREEMPTED = 0x202;

    // Task (which was previously assigned to a bot) changed its running
    // priority.
    QSCHEDULER_REPRIORITIZED = 0x203;

    // Task (which was previously assigned to a bot) was unassigned and moved
    // back to the queue.
    QSCHEDULER_UNASSIGNED = 0x204;
  }

  // EventType is the type of event that occurred.
  EventType event_type = 1;

  // SchedulerId is the ID of the scheduler in which the event occurred.
  string scheduler_id = 2;

  // TaskId is the task ID that the event happened to.
  string task_id = 3;

  // Time is the time at which the event happened.
  google.protobuf.Timestamp time = 4;

  // BaseLabels are the base labels of the task.
  repeated string base_labels = 5;

  // ProvisionableLabels are the provisionable labels of the task.
  repeated string provisionable_labels = 6;

  // AccountId is the quotascheduler account that the task will be charged to.
  string account_id = 7;

  // AccountValid indicates whether this task's quotascheduler account is valid
  // (exists) at this time.
  bool account_valid = 8;

  // AccountBalance is the task's quotascheduler account's balance at this time.
  repeated float account_balance = 9;

  // Cost is the total quota cost accumulated so far to the quotascheduler
  // account, when running this task.
  repeated float cost = 10;

  // BotId is the bot that the event occurred on (relevant for all event
  // types except for ENQUEUED).
  string bot_id = 11;

  // BotDimensions are the dimensions of the bot (if relevant).
  repeated string bot_dimensions = 12;

  // Category is the EventCategory for this event's EventType.
  EventCategory category = 13;

  // IsCallback specifies whether this event was due to a notification callback
  // from swarming that was requested by the scheduler. This is for diagnostic
  // purposes only, and is only applicable for events of category
  // CATEGORY_SWARMING.
  bool is_callback = 14;

  // Reserved field values for additional non-details fields to be added.
  reserved 15 to 99;

  // EnqueuedDetails represents event details that are specific to the
  // ENQUEUED event type.
  message EnqueuedDetails {
    // Tags is the set of swarming tags for the task.
    repeated string tags = 1;
  }

  // AssignedDetails represents event details that are specific to the
  // ASSIGNED event type.
  message AssignedDetails {
    // ProvisionRequired is whether provision is required to run this task
    // on the bot (i.e. if a slice other than the 0th slice was selected).
    bool provision_required = 1;

    // Priority is the qscheduler priority that the task is running at.
    int32 priority = 2;

    // Preempting is true if this task preempted another one that was already
    // running on the bot.
    bool preempting = 3;

    // PreemptionCost is the cost paid by this task's account in order to
    // preempt the previous task on this bot, if this was a preempting
    // assignment.
    repeated float preemption_cost = 4;

    // PreemptedTaskId is the task that was preempted, if any.
    string preempted_task_id = 5;
  }

  // PreemptedDetails represents event details that are specific to the
  // PREEMPTED event type.
  message PreemptedDetails {
    // PreemptingAccountId is the account id of the task that preempted this
    // task.
    string preempting_account_id = 1;

    // PreemptingTaskId is the task id of the task that preempted this task.
    string preempting_task_id = 2;

    // Priority is the priority that this task was running at prior to being
    // preempted.
    int32 priority = 3;

    // PreemptingPriority is the priority of the task that preempted this task.
    int32 preempting_priority = 4;
  }

  // ReprioritizedDetails represents event details that are specific to the
  // PREPRIORITIZED event type.
  message ReprioritizedDetails {
    // OldPriority is the previous priority the task was running at.
    int32 old_priority = 1;

    // NewPriority is the new priority the task is running at.
    int32 new_priority = 2;
  }

  // ReprioritizedDetails represents event details that are specific to the
  // COMPLETED event type.
  message CompletedDetails {
    enum Reason {
      UNSPECIFIED = 0;

      // The bot that was previously assigned this task became idle.
      BOT_IDLE = 1;

      // The task became absent while it was still idle.
      IDLE_TASK_ABSENT = 2;

      // The task becamse absent while it was running.
      RUNNING_TASK_ABSENT = 3;

      // The task was believed to be running on a bot, but the scheduler was
      // notified that it was running on a different bot, so its state was
      // deleted.
      INCONSISTENT_BOT_FOR_TASK = 4;

      // The task was believed the be running on a bot, but the scheduler was
      // notified that a different task is running on the bot, so its state was
      // deleted.
      INCONSISTENT_TASK_FOR_BOT = 5;
    }

    Reason reason = 1;

    // If reason is INCONSISTENT_TASK_FOR_BOT, other_task specifies which task
    // it was that notified itself on this bot.
    string other_task = 2;

    // If reason is INCONSISTENT_BOT_FOR_TASK, other_bot specifies which bot
    // it was that was notified with this task.
    string other_bot = 3;
  }

  // UnassignedDetails represents event details that are specific to the
  // UNASSIGNED event type.
  message UnassignedDetails {}

  oneof details {
    EnqueuedDetails enqueued_details = 100;
    AssignedDetails assigned_details = 101;
    PreemptedDetails preempted_details = 102;
    ReprioritizedDetails reprioritized_details = 103;
    CompletedDetails completed_details = 104;
    UnassignedDetails unassigned_details = 105;
  }
}

// EventList wraps a repeated TaskEvent.
message EventList {
  repeated TaskEvent events = 1;
}

// TODO: Remove SchedulerState once the Task/Worker/Account type is implemented.
// SchedulerState represents the scheuler state.
message SchedulerState {
  message Task {
          string id = 1;
          string account_id = 2;
          string worker_id = 3;
          repeated string base_labels = 4;
          repeated string provisionable_labels = 5;
  }
  repeated Task queued_tasks = 1;
  repeated Task running_tasks = 2;

  message Worker {
          string id = 1;
          string task_id = 2;
          repeated string labels = 3;
  }
  repeated Worker idle_workers = 3;
  repeated Worker running_workers = 4;

  message Account {
          string id = 1;
          repeated float balance = 2;
  }
  repeated Account accounts = 5;

  string pool_id = 6;

  // Time is the time at which the snapshot was created.
  google.protobuf.Timestamp time = 7;
}

// Task represents a single task in the snapshot of a scheduler state.
message Task {
  // Id is the ID of this task.
  message ID {
    string name = 1;
  }
  ID id = 1;

  // The quota scheduler pool that contains the account of this task.
  Pool pool = 2;

  // The account that the task attached.
  Account.ID account_id = 3;

  // The worker Id if this task is assigned, or empty if the task is queued.
  Worker.ID worker_id = 4;

  repeated string base_labels = 5;
  repeated string provisionable_labels = 6;

  // The last updated time of the scheduler state where the Task was read.
  google.protobuf.Timestamp snapshot_time = 7;
}

// Worker represents a single worker in the snapshot of a scheduler state.
message Worker {
  // Id is the ID of this worker.
  message ID {
    string name = 1;
  }
  ID id = 1;

  // The quota scheduler pool this worker serves.
  Pool pool = 2;

  // The task that is running on this worker. Empty if this worker is idle.
  Task.ID task_id = 3;

  repeated string labels = 4;

  // The last updated time of the scheduler state where the Worker was read.
  google.protobuf.Timestamp snapshot_time = 5;
}

// Account represents a single account in the snapshot of a scheduler state.
message Account {
  // Id is the quotascheduler account ID.
  message ID {
    string name = 1;
  }
  ID id = 1;

  // The quota scheduler pool that contains this account.
  Pool pool = 2;

  // Account's balance at this time.
  repeated float balance = 3;

  // The last updated time of the scheduler state where the Account was read.
  google.protobuf.Timestamp snapshot_time = 4;
}

// Pool represents a quota scheduler pool.
message Pool {
  string id = 1;
}