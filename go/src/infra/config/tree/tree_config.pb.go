// Code generated by protoc-gen-go. DO NOT EDIT.
// source: tree_config.proto

/*
Package tree is a generated protocol buffer package.

It is generated from these files:
	tree_config.proto

It has these top-level messages:
	SomCfg
	Tree
	TreeCfg
*/
package tree

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// SomCfg stores options related to the Sheriff-o-Matic frontend.
type SomCfg struct {
	// BugQueueLabel is a Monorail label to use for a sheriffing bug queue
	// attached to this tree.
	BugQueueLabel string `protobuf:"bytes,1,opt,name=bug_queue_label,json=bugQueueLabel" json:"bug_queue_label,omitempty"`
	// AlertStreams are tree names that a sheriffing view for a tree should pull
	// from. The terminology here is a little weird since a "Sheriff-o-Matic
	// tree" can technically pull from more than one "Gatekeeper/Analyzer tree".
	AlertStreams []string `protobuf:"bytes,2,rep,name=alert_streams,json=alertStreams" json:"alert_streams,omitempty"`
}

func (m *SomCfg) Reset()                    { *m = SomCfg{} }
func (m *SomCfg) String() string            { return proto.CompactTextString(m) }
func (*SomCfg) ProtoMessage()               {}
func (*SomCfg) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *SomCfg) GetBugQueueLabel() string {
	if m != nil {
		return m.BugQueueLabel
	}
	return ""
}

func (m *SomCfg) GetAlertStreams() []string {
	if m != nil {
		return m.AlertStreams
	}
	return nil
}

// Tree stores the configuration for a single tree.
type Tree struct {
	// Name is a unique string key to mark a specific tree. Should be lowercase
	// and use only URL-safe characters.
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	// DisplayName is a fancier name for the tree, which can include spaces,
	// capitalization, and any other string fanciness.
	DisplayName string `protobuf:"bytes,2,opt,name=display_name,json=displayName" json:"display_name,omitempty"`
	// Som can be set to tell Sheriff-o-Matic to load the tree into its UI and
	// search for alerts.
	Som *SomCfg `protobuf:"bytes,3,opt,name=som" json:"som,omitempty"`
	// StatusUrl is a URL for the Tree-Status app attached to this tree. This
	// should eventually be replaced once we consolidate the Tree-Status app.
	StatusUrl string `protobuf:"bytes,4,opt,name=status_url,json=statusUrl" json:"status_url,omitempty"`
}

func (m *Tree) Reset()                    { *m = Tree{} }
func (m *Tree) String() string            { return proto.CompactTextString(m) }
func (*Tree) ProtoMessage()               {}
func (*Tree) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Tree) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Tree) GetDisplayName() string {
	if m != nil {
		return m.DisplayName
	}
	return ""
}

func (m *Tree) GetSom() *SomCfg {
	if m != nil {
		return m.Som
	}
	return nil
}

func (m *Tree) GetStatusUrl() string {
	if m != nil {
		return m.StatusUrl
	}
	return ""
}

// TreeCfg is the project level configuration for services which require
// knowledge of what a tree is.
type TreeCfg struct {
	// Trees stores all of the trees specified in a configuration file.
	Trees []*Tree `protobuf:"bytes,1,rep,name=trees" json:"trees,omitempty"`
}

func (m *TreeCfg) Reset()                    { *m = TreeCfg{} }
func (m *TreeCfg) String() string            { return proto.CompactTextString(m) }
func (*TreeCfg) ProtoMessage()               {}
func (*TreeCfg) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *TreeCfg) GetTrees() []*Tree {
	if m != nil {
		return m.Trees
	}
	return nil
}

func init() {
	proto.RegisterType((*SomCfg)(nil), "tree.SomCfg")
	proto.RegisterType((*Tree)(nil), "tree.Tree")
	proto.RegisterType((*TreeCfg)(nil), "tree.TreeCfg")
}

func init() { proto.RegisterFile("tree_config.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 234 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x2c, 0x90, 0x4d, 0x4b, 0x03, 0x31,
	0x10, 0x86, 0xd9, 0xee, 0x5a, 0xd9, 0xd9, 0x2d, 0x62, 0x4e, 0xb9, 0x28, 0x71, 0x05, 0x59, 0x10,
	0xf6, 0x50, 0x7f, 0x82, 0x57, 0x11, 0xdc, 0xda, 0x73, 0xc8, 0xea, 0x34, 0x14, 0x92, 0xa6, 0xe6,
	0xe3, 0x20, 0xf8, 0xe3, 0x65, 0x92, 0xde, 0xc2, 0xf3, 0x24, 0x6f, 0xde, 0x19, 0xb8, 0x8d, 0x1e,
	0x51, 0x7e, 0xb9, 0xd3, 0xe1, 0xa8, 0xa7, 0xb3, 0x77, 0xd1, 0xb1, 0x86, 0xd0, 0xb0, 0x87, 0xf5,
	0xce, 0xd9, 0xd7, 0x83, 0x66, 0x4f, 0x70, 0xb3, 0x24, 0x2d, 0x7f, 0x12, 0x26, 0x94, 0x46, 0x2d,
	0x68, 0x78, 0x25, 0xaa, 0xb1, 0x9d, 0x37, 0x4b, 0xd2, 0x1f, 0x44, 0xdf, 0x08, 0xb2, 0x47, 0xd8,
	0x28, 0x83, 0x3e, 0xca, 0x10, 0x3d, 0x2a, 0x1b, 0xf8, 0x4a, 0xd4, 0x63, 0x3b, 0xf7, 0x19, 0xee,
	0x0a, 0x1b, 0xfe, 0xa0, 0xf9, 0xf4, 0x88, 0x8c, 0x41, 0x73, 0x52, 0x16, 0x2f, 0x49, 0xf9, 0xcc,
	0x1e, 0xa0, 0xff, 0x3e, 0x86, 0xb3, 0x51, 0xbf, 0x32, 0xbb, 0x55, 0x76, 0xdd, 0x85, 0xbd, 0xd3,
	0x95, 0x7b, 0xa8, 0x83, 0xb3, 0xbc, 0x16, 0xd5, 0xd8, 0x6d, 0xfb, 0x89, 0x9a, 0x4e, 0xa5, 0xe6,
	0x4c, 0x82, 0xdd, 0x01, 0x84, 0xa8, 0x62, 0x0a, 0x32, 0x79, 0xc3, 0x9b, 0x1c, 0xd0, 0x16, 0xb2,
	0xf7, 0x66, 0x78, 0x86, 0x6b, 0xfa, 0x9d, 0xa6, 0x12, 0x70, 0x45, 0xaf, 0x03, 0xaf, 0x44, 0x3d,
	0x76, 0x5b, 0x28, 0x59, 0x64, 0xe7, 0x22, 0x96, 0x75, 0x5e, 0xc7, 0xcb, 0x7f, 0x00, 0x00, 0x00,
	0xff, 0xff, 0xe1, 0x0a, 0x1c, 0x33, 0x23, 0x01, 0x00, 0x00,
}
