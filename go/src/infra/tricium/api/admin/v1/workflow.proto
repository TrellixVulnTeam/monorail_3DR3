// Copyright 2016 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

syntax = "proto3";

package admin;

import "infra/tricium/api/v1/data.proto";
import "infra/tricium/api/v1/function.proto";
import "infra/tricium/api/v1/platform.proto";

// Tricium workflow configuration.
//
// A Workflow is generated from a merged service and project config,
// and contains information required for one workflow run.
message Workflow {
  // TODO(qyearsley): remove service_account if it is unused.
  string service_account = 1;
  repeated Worker workers = 2;
  string swarming_server = 3;
  string isolate_server = 4;
  // Function definitions used for this workflow; these contain the function
  // owner and component, to be used when filling out a bug filing template.
  repeated tricium.Function functions = 5;
  string buildbucket_server_host = 6;
}

// A Tricium worker includes the details needed to execute a function on a
// specific platform as swarming task.
message Worker {
  // Name of worker is combination of the function and platform name
  // for which results are provided, e.g "GitFileIsolator_LINUX".
  string name = 1;

  // Includes data dependencies for runtime type checking.
  // Platform-specific details are provided when required by the corresponding
  // data type.
  tricium.Data.Type needs = 2;
  tricium.Platform.Name needs_for_platform = 3;
  tricium.Data.Type provides = 4;
  tricium.Platform.Name provides_for_platform = 5;

  // Workers to run after this one.
  repeated string next = 6;

  // Name of the runtime platform configuration.
  tricium.Platform.Name runtime_platform = 7;

  // Swarming dimensions for execution of the worker. These should be on the
  // form "key:value", using keys and values known to the swarming service.
  repeated string dimensions = 8;

  // List of cipd packages needed for the swarming task used to execute the
  // worker.
  repeated tricium.CipdPackage cipd_packages = 9;

  oneof impl {
    // Command for binary-based implementation.
    tricium.Cmd cmd = 10;
    // Recipe for recipe-based implementation.
    tricium.Recipe recipe = 12;
  }

  // Deadline for execution of the worker in minutes. Note that this time
  // should include the overhead of triggering the corresponding swarming task
  // collecting result from it.
  int32 deadline = 11;
}
