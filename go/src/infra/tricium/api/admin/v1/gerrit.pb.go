// Code generated by protoc-gen-go. DO NOT EDIT.
// source: infra/tricium/api/admin/v1/gerrit.proto

package admin

import prpc "go.chromium.org/luci/grpc/prpc"

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// PollProjectRequest is a request to poll one project.
type PollProjectRequest struct {
	// The name of the project in luci-config.
	Project              string   `protobuf:"bytes,1,opt,name=project,proto3" json:"project,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PollProjectRequest) Reset()         { *m = PollProjectRequest{} }
func (m *PollProjectRequest) String() string { return proto.CompactTextString(m) }
func (*PollProjectRequest) ProtoMessage()    {}
func (*PollProjectRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_741c2da0c750a7d2, []int{0}
}

func (m *PollProjectRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PollProjectRequest.Unmarshal(m, b)
}
func (m *PollProjectRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PollProjectRequest.Marshal(b, m, deterministic)
}
func (m *PollProjectRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PollProjectRequest.Merge(m, src)
}
func (m *PollProjectRequest) XXX_Size() int {
	return xxx_messageInfo_PollProjectRequest.Size(m)
}
func (m *PollProjectRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_PollProjectRequest.DiscardUnknown(m)
}

var xxx_messageInfo_PollProjectRequest proto.InternalMessageInfo

func (m *PollProjectRequest) GetProject() string {
	if m != nil {
		return m.Project
	}
	return ""
}

type PollProjectResponse struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PollProjectResponse) Reset()         { *m = PollProjectResponse{} }
func (m *PollProjectResponse) String() string { return proto.CompactTextString(m) }
func (*PollProjectResponse) ProtoMessage()    {}
func (*PollProjectResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_741c2da0c750a7d2, []int{1}
}

func (m *PollProjectResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PollProjectResponse.Unmarshal(m, b)
}
func (m *PollProjectResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PollProjectResponse.Marshal(b, m, deterministic)
}
func (m *PollProjectResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PollProjectResponse.Merge(m, src)
}
func (m *PollProjectResponse) XXX_Size() int {
	return xxx_messageInfo_PollProjectResponse.Size(m)
}
func (m *PollProjectResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_PollProjectResponse.DiscardUnknown(m)
}

var xxx_messageInfo_PollProjectResponse proto.InternalMessageInfo

func init() {
	proto.RegisterType((*PollProjectRequest)(nil), "admin.PollProjectRequest")
	proto.RegisterType((*PollProjectResponse)(nil), "admin.PollProjectResponse")
}

func init() {
	proto.RegisterFile("infra/tricium/api/admin/v1/gerrit.proto", fileDescriptor_741c2da0c750a7d2)
}

var fileDescriptor_741c2da0c750a7d2 = []byte{
	// 152 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x52, 0xcf, 0xcc, 0x4b, 0x2b,
	0x4a, 0xd4, 0x2f, 0x29, 0xca, 0x4c, 0xce, 0x2c, 0xcd, 0xd5, 0x4f, 0x2c, 0xc8, 0xd4, 0x4f, 0x4c,
	0xc9, 0xcd, 0xcc, 0xd3, 0x2f, 0x33, 0xd4, 0x4f, 0x4f, 0x2d, 0x2a, 0xca, 0x2c, 0xd1, 0x2b, 0x28,
	0xca, 0x2f, 0xc9, 0x17, 0x62, 0x05, 0x0b, 0x2b, 0xe9, 0x71, 0x09, 0x05, 0xe4, 0xe7, 0xe4, 0x04,
	0x14, 0xe5, 0x67, 0xa5, 0x26, 0x97, 0x04, 0xa5, 0x16, 0x96, 0xa6, 0x16, 0x97, 0x08, 0x49, 0x70,
	0xb1, 0x17, 0x40, 0x44, 0x24, 0x18, 0x15, 0x18, 0x35, 0x38, 0x83, 0x60, 0x5c, 0x25, 0x51, 0x2e,
	0x61, 0x14, 0xf5, 0xc5, 0x05, 0xf9, 0x79, 0xc5, 0xa9, 0x46, 0x7e, 0x5c, 0x6c, 0xee, 0x60, 0xd3,
	0x85, 0x5c, 0xb8, 0xb8, 0x91, 0x14, 0x08, 0x49, 0xea, 0x81, 0xed, 0xd1, 0xc3, 0xb4, 0x44, 0x4a,
	0x0a, 0x9b, 0x14, 0xc4, 0xbc, 0x24, 0x36, 0xb0, 0x23, 0x8d, 0x01, 0x01, 0x00, 0x00, 0xff, 0xff,
	0xbf, 0x83, 0x59, 0xf1, 0xcf, 0x00, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// GerritClient is the client API for Gerrit service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type GerritClient interface {
	// PollProject polls Gerrit for changes to analyze.
	PollProject(ctx context.Context, in *PollProjectRequest, opts ...grpc.CallOption) (*PollProjectResponse, error)
}
type gerritPRPCClient struct {
	client *prpc.Client
}

func NewGerritPRPCClient(client *prpc.Client) GerritClient {
	return &gerritPRPCClient{client}
}

func (c *gerritPRPCClient) PollProject(ctx context.Context, in *PollProjectRequest, opts ...grpc.CallOption) (*PollProjectResponse, error) {
	out := new(PollProjectResponse)
	err := c.client.Call(ctx, "admin.Gerrit", "PollProject", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

type gerritClient struct {
	cc grpc.ClientConnInterface
}

func NewGerritClient(cc grpc.ClientConnInterface) GerritClient {
	return &gerritClient{cc}
}

func (c *gerritClient) PollProject(ctx context.Context, in *PollProjectRequest, opts ...grpc.CallOption) (*PollProjectResponse, error) {
	out := new(PollProjectResponse)
	err := c.cc.Invoke(ctx, "/admin.Gerrit/PollProject", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GerritServer is the server API for Gerrit service.
type GerritServer interface {
	// PollProject polls Gerrit for changes to analyze.
	PollProject(context.Context, *PollProjectRequest) (*PollProjectResponse, error)
}

// UnimplementedGerritServer can be embedded to have forward compatible implementations.
type UnimplementedGerritServer struct {
}

func (*UnimplementedGerritServer) PollProject(ctx context.Context, req *PollProjectRequest) (*PollProjectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PollProject not implemented")
}

func RegisterGerritServer(s prpc.Registrar, srv GerritServer) {
	s.RegisterService(&_Gerrit_serviceDesc, srv)
}

func _Gerrit_PollProject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PollProjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GerritServer).PollProject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/admin.Gerrit/PollProject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GerritServer).PollProject(ctx, req.(*PollProjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Gerrit_serviceDesc = grpc.ServiceDesc{
	ServiceName: "admin.Gerrit",
	HandlerType: (*GerritServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PollProject",
			Handler:    _Gerrit_PollProject_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "infra/tricium/api/admin/v1/gerrit.proto",
}
