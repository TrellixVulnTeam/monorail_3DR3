// Code generated by protoc-gen-go. DO NOT EDIT.
// source: infra/tricium/api/v1/tricium.proto

package tricium

import prpc "go.chromium.org/luci/grpc/prpc"

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type State int32

const (
	// Pending is for when an analysis request has been received but the
	// corresponding workflow, function, or workers are not running yet.
	State_PENDING State = 0
	// Running is for when the workflow, function, or workers of a request have
	// been launched, but have not finished.
	State_RUNNING State = 1
	// Success is for a workflow, function, or worker that successfully completed.
	//
	// Success of workflows and functions is aggregated from underlying
	// functions and workers, where full success means success is aggregated.
	State_SUCCESS State = 2
	// Failure is for a workflow, function, or worker that completed with failure.
	//
	// Failure of workflows and functions is aggregated from underlying functions
	// and workers, where any occurrence of failure means failure is aggregated.
	State_FAILURE State = 3
	// Canceled is for user canceled workflows, functions, and workers.
	// NB! Not supported yet.
	State_CANCELED State = 4
	// Timed out is for workers where the triggered swarming task timed out.
	// NB! Not supported yet.
	State_TIMED_OUT State = 5
	// Aborted is for workers aborted due to a failing worker dependency.
	//
	// For instance, the worker providing the data needed by a worker may have
	// failed.
	State_ABORTED State = 6
)

var State_name = map[int32]string{
	0: "PENDING",
	1: "RUNNING",
	2: "SUCCESS",
	3: "FAILURE",
	4: "CANCELED",
	5: "TIMED_OUT",
	6: "ABORTED",
}

var State_value = map[string]int32{
	"PENDING":   0,
	"RUNNING":   1,
	"SUCCESS":   2,
	"FAILURE":   3,
	"CANCELED":  4,
	"TIMED_OUT": 5,
	"ABORTED":   6,
}

func (x State) String() string {
	return proto.EnumName(State_name, int32(x))
}

func (State) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_2738dd491b254f26, []int{0}
}

// AnalyzeRequest contains the details needed for an analysis request.
type AnalyzeRequest struct {
	// Name of the project in luci-config, used to get the project config.
	Project string `protobuf:"bytes,1,opt,name=project,proto3" json:"project,omitempty"`
	// Files to analyze in the project, with metadata.
	Files []*Data_File `protobuf:"bytes,5,rep,name=files,proto3" json:"files,omitempty"`
	// Types that are valid to be assigned to Source:
	//	*AnalyzeRequest_GerritRevision
	//	*AnalyzeRequest_GitCommit
	Source               isAnalyzeRequest_Source `protobuf_oneof:"source"`
	XXX_NoUnkeyedLiteral struct{}                `json:"-"`
	XXX_unrecognized     []byte                  `json:"-"`
	XXX_sizecache        int32                   `json:"-"`
}

func (m *AnalyzeRequest) Reset()         { *m = AnalyzeRequest{} }
func (m *AnalyzeRequest) String() string { return proto.CompactTextString(m) }
func (*AnalyzeRequest) ProtoMessage()    {}
func (*AnalyzeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_2738dd491b254f26, []int{0}
}

func (m *AnalyzeRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AnalyzeRequest.Unmarshal(m, b)
}
func (m *AnalyzeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AnalyzeRequest.Marshal(b, m, deterministic)
}
func (m *AnalyzeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AnalyzeRequest.Merge(m, src)
}
func (m *AnalyzeRequest) XXX_Size() int {
	return xxx_messageInfo_AnalyzeRequest.Size(m)
}
func (m *AnalyzeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_AnalyzeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_AnalyzeRequest proto.InternalMessageInfo

func (m *AnalyzeRequest) GetProject() string {
	if m != nil {
		return m.Project
	}
	return ""
}

func (m *AnalyzeRequest) GetFiles() []*Data_File {
	if m != nil {
		return m.Files
	}
	return nil
}

type isAnalyzeRequest_Source interface {
	isAnalyzeRequest_Source()
}

type AnalyzeRequest_GerritRevision struct {
	GerritRevision *GerritRevision `protobuf:"bytes,7,opt,name=gerrit_revision,json=gerritRevision,proto3,oneof"`
}

type AnalyzeRequest_GitCommit struct {
	GitCommit *GitCommit `protobuf:"bytes,8,opt,name=git_commit,json=gitCommit,proto3,oneof"`
}

func (*AnalyzeRequest_GerritRevision) isAnalyzeRequest_Source() {}

func (*AnalyzeRequest_GitCommit) isAnalyzeRequest_Source() {}

func (m *AnalyzeRequest) GetSource() isAnalyzeRequest_Source {
	if m != nil {
		return m.Source
	}
	return nil
}

func (m *AnalyzeRequest) GetGerritRevision() *GerritRevision {
	if x, ok := m.GetSource().(*AnalyzeRequest_GerritRevision); ok {
		return x.GerritRevision
	}
	return nil
}

func (m *AnalyzeRequest) GetGitCommit() *GitCommit {
	if x, ok := m.GetSource().(*AnalyzeRequest_GitCommit); ok {
		return x.GitCommit
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*AnalyzeRequest) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*AnalyzeRequest_GerritRevision)(nil),
		(*AnalyzeRequest_GitCommit)(nil),
	}
}

// Information uniquely identifying a Gerrit patch set, including
// the git details needed to fetch from this patch set.
type GerritRevision struct {
	// Gerrit host.
	//
	// This value must not include the URL schema and is assumed to not include
	// literal string "##", since this string is used internally as a separator.
	// The schema is assumed to be "https".
	Host string `protobuf:"bytes,1,opt,name=host,proto3" json:"host,omitempty"`
	// Gerrit project name.
	//
	// This value is assumed to not include "##".
	Project string `protobuf:"bytes,2,opt,name=project,proto3" json:"project,omitempty"`
	// Gerrit change ID.
	//
	// This value should be of the form "<project>~<branch>~<Change-Id>", where
	// <Change-Id> is a Change-Id footer string, and not a legacy change ID
	// number. Note that "refs/heads/" can be omitted from the branch.
	//
	// Example: "myProject~master~I8473b95934b5732ac55d26311a706c9c2bde9940"
	Change string `protobuf:"bytes,3,opt,name=change,proto3" json:"change,omitempty"`
	// The full URL to the Git repository for this project, e.g. on Gitiles.
	GitUrl string `protobuf:"bytes,4,opt,name=git_url,json=gitUrl,proto3" json:"git_url,omitempty"`
	// Gerrit change revision ref string.
	//
	// This value should be the fetch URL for a revision of a change. Note that
	// the last number of a change revision ref is the corresponding patch set.
	GitRef string `protobuf:"bytes,5,opt,name=git_ref,json=gitRef,proto3" json:"git_ref,omitempty"`
	// Commit message text from Gerrit.
	CommitMessage        string   `protobuf:"bytes,6,opt,name=commit_message,json=commitMessage,proto3" json:"commit_message,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GerritRevision) Reset()         { *m = GerritRevision{} }
func (m *GerritRevision) String() string { return proto.CompactTextString(m) }
func (*GerritRevision) ProtoMessage()    {}
func (*GerritRevision) Descriptor() ([]byte, []int) {
	return fileDescriptor_2738dd491b254f26, []int{1}
}

func (m *GerritRevision) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GerritRevision.Unmarshal(m, b)
}
func (m *GerritRevision) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GerritRevision.Marshal(b, m, deterministic)
}
func (m *GerritRevision) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GerritRevision.Merge(m, src)
}
func (m *GerritRevision) XXX_Size() int {
	return xxx_messageInfo_GerritRevision.Size(m)
}
func (m *GerritRevision) XXX_DiscardUnknown() {
	xxx_messageInfo_GerritRevision.DiscardUnknown(m)
}

var xxx_messageInfo_GerritRevision proto.InternalMessageInfo

func (m *GerritRevision) GetHost() string {
	if m != nil {
		return m.Host
	}
	return ""
}

func (m *GerritRevision) GetProject() string {
	if m != nil {
		return m.Project
	}
	return ""
}

func (m *GerritRevision) GetChange() string {
	if m != nil {
		return m.Change
	}
	return ""
}

func (m *GerritRevision) GetGitUrl() string {
	if m != nil {
		return m.GitUrl
	}
	return ""
}

func (m *GerritRevision) GetGitRef() string {
	if m != nil {
		return m.GitRef
	}
	return ""
}

func (m *GerritRevision) GetCommitMessage() string {
	if m != nil {
		return m.CommitMessage
	}
	return ""
}

type GitCommit struct {
	// Full repository URL, including schema, host and path.
	Url string `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"`
	// A git commit-ish, such as a refname like "refs/heads/master".
	// This can also be a tag or git commit hash.
	Ref                  string   `protobuf:"bytes,2,opt,name=ref,proto3" json:"ref,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GitCommit) Reset()         { *m = GitCommit{} }
func (m *GitCommit) String() string { return proto.CompactTextString(m) }
func (*GitCommit) ProtoMessage()    {}
func (*GitCommit) Descriptor() ([]byte, []int) {
	return fileDescriptor_2738dd491b254f26, []int{2}
}

func (m *GitCommit) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GitCommit.Unmarshal(m, b)
}
func (m *GitCommit) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GitCommit.Marshal(b, m, deterministic)
}
func (m *GitCommit) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GitCommit.Merge(m, src)
}
func (m *GitCommit) XXX_Size() int {
	return xxx_messageInfo_GitCommit.Size(m)
}
func (m *GitCommit) XXX_DiscardUnknown() {
	xxx_messageInfo_GitCommit.DiscardUnknown(m)
}

var xxx_messageInfo_GitCommit proto.InternalMessageInfo

func (m *GitCommit) GetUrl() string {
	if m != nil {
		return m.Url
	}
	return ""
}

func (m *GitCommit) GetRef() string {
	if m != nil {
		return m.Ref
	}
	return ""
}

type AnalyzeResponse struct {
	// ID of the run started for this request.
	//
	// This ID can be used to track progress and request results.
	RunId                string   `protobuf:"bytes,1,opt,name=run_id,json=runId,proto3" json:"run_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AnalyzeResponse) Reset()         { *m = AnalyzeResponse{} }
func (m *AnalyzeResponse) String() string { return proto.CompactTextString(m) }
func (*AnalyzeResponse) ProtoMessage()    {}
func (*AnalyzeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2738dd491b254f26, []int{3}
}

func (m *AnalyzeResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AnalyzeResponse.Unmarshal(m, b)
}
func (m *AnalyzeResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AnalyzeResponse.Marshal(b, m, deterministic)
}
func (m *AnalyzeResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AnalyzeResponse.Merge(m, src)
}
func (m *AnalyzeResponse) XXX_Size() int {
	return xxx_messageInfo_AnalyzeResponse.Size(m)
}
func (m *AnalyzeResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_AnalyzeResponse.DiscardUnknown(m)
}

var xxx_messageInfo_AnalyzeResponse proto.InternalMessageInfo

func (m *AnalyzeResponse) GetRunId() string {
	if m != nil {
		return m.RunId
	}
	return ""
}

type ProgressRequest struct {
	// An optional function name.
	//
	// If provided, only progress for the provided function will be returned.
	// The function name should match the name of the function in the Tricium
	// configuration.
	//
	// NB! Currently not supported.
	Function string `protobuf:"bytes,2,opt,name=function,proto3" json:"function,omitempty"`
	// Optional platform that may be provided together with an function name.
	//
	// If provided, only progress for the provided function and platform will be provided.
	//
	// NB! Currently not supported.
	Platform *Platform `protobuf:"bytes,3,opt,name=platform,proto3" json:"platform,omitempty"`
	// The information that's used to look up the run. If this request is for a
	// particular Gerrit revision, then that can be provided; otherwise the run
	// ID can be used.
	//
	// Types that are valid to be assigned to Source:
	//	*ProgressRequest_GerritRevision
	//	*ProgressRequest_RunId
	Source               isProgressRequest_Source `protobuf_oneof:"source"`
	XXX_NoUnkeyedLiteral struct{}                 `json:"-"`
	XXX_unrecognized     []byte                   `json:"-"`
	XXX_sizecache        int32                    `json:"-"`
}

func (m *ProgressRequest) Reset()         { *m = ProgressRequest{} }
func (m *ProgressRequest) String() string { return proto.CompactTextString(m) }
func (*ProgressRequest) ProtoMessage()    {}
func (*ProgressRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_2738dd491b254f26, []int{4}
}

func (m *ProgressRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ProgressRequest.Unmarshal(m, b)
}
func (m *ProgressRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ProgressRequest.Marshal(b, m, deterministic)
}
func (m *ProgressRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProgressRequest.Merge(m, src)
}
func (m *ProgressRequest) XXX_Size() int {
	return xxx_messageInfo_ProgressRequest.Size(m)
}
func (m *ProgressRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ProgressRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ProgressRequest proto.InternalMessageInfo

func (m *ProgressRequest) GetFunction() string {
	if m != nil {
		return m.Function
	}
	return ""
}

func (m *ProgressRequest) GetPlatform() *Platform {
	if m != nil {
		return m.Platform
	}
	return nil
}

type isProgressRequest_Source interface {
	isProgressRequest_Source()
}

type ProgressRequest_GerritRevision struct {
	GerritRevision *GerritRevision `protobuf:"bytes,4,opt,name=gerrit_revision,json=gerritRevision,proto3,oneof"`
}

type ProgressRequest_RunId struct {
	RunId string `protobuf:"bytes,1,opt,name=run_id,json=runId,proto3,oneof"`
}

func (*ProgressRequest_GerritRevision) isProgressRequest_Source() {}

func (*ProgressRequest_RunId) isProgressRequest_Source() {}

func (m *ProgressRequest) GetSource() isProgressRequest_Source {
	if m != nil {
		return m.Source
	}
	return nil
}

func (m *ProgressRequest) GetGerritRevision() *GerritRevision {
	if x, ok := m.GetSource().(*ProgressRequest_GerritRevision); ok {
		return x.GerritRevision
	}
	return nil
}

func (m *ProgressRequest) GetRunId() string {
	if x, ok := m.GetSource().(*ProgressRequest_RunId); ok {
		return x.RunId
	}
	return ""
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*ProgressRequest) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*ProgressRequest_GerritRevision)(nil),
		(*ProgressRequest_RunId)(nil),
	}
}

type ProgressResponse struct {
	// ID of the run progress is reported for.
	RunId string `protobuf:"bytes,1,opt,name=run_id,json=runId,proto3" json:"run_id,omitempty"`
	// Overall state for the run provided in the progress request.
	State State `protobuf:"varint,2,opt,name=state,proto3,enum=tricium.State" json:"state,omitempty"`
	// Function progress matching the requested progress report.
	//
	// For a provided run ID this corresponds to all functions and platforms, and
	// for any selection of these, a subset is returned.
	//
	// NB! Selection of a subset is currently not supported.
	FunctionProgress     []*FunctionProgress `protobuf:"bytes,3,rep,name=function_progress,json=functionProgress,proto3" json:"function_progress,omitempty"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *ProgressResponse) Reset()         { *m = ProgressResponse{} }
func (m *ProgressResponse) String() string { return proto.CompactTextString(m) }
func (*ProgressResponse) ProtoMessage()    {}
func (*ProgressResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2738dd491b254f26, []int{5}
}

func (m *ProgressResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ProgressResponse.Unmarshal(m, b)
}
func (m *ProgressResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ProgressResponse.Marshal(b, m, deterministic)
}
func (m *ProgressResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProgressResponse.Merge(m, src)
}
func (m *ProgressResponse) XXX_Size() int {
	return xxx_messageInfo_ProgressResponse.Size(m)
}
func (m *ProgressResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ProgressResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ProgressResponse proto.InternalMessageInfo

func (m *ProgressResponse) GetRunId() string {
	if m != nil {
		return m.RunId
	}
	return ""
}

func (m *ProgressResponse) GetState() State {
	if m != nil {
		return m.State
	}
	return State_PENDING
}

func (m *ProgressResponse) GetFunctionProgress() []*FunctionProgress {
	if m != nil {
		return m.FunctionProgress
	}
	return nil
}

type FunctionProgress struct {
	// The function name.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// The platform for which the function progress is reported.
	Platform Platform_Name `protobuf:"varint,2,opt,name=platform,proto3,enum=tricium.Platform_Name" json:"platform,omitempty"`
	// The state of the function.
	//
	// For an function on a specific platform this state corresponds to the state
	// of the worker, else it is the aggregated state of all workers for the function.
	State State `protobuf:"varint,3,opt,name=state,proto3,enum=tricium.State" json:"state,omitempty"`
	// URL to the swarming server running tasks for the workers of the function.
	SwarmingUrl string `protobuf:"bytes,4,opt,name=swarming_url,json=swarmingUrl,proto3" json:"swarming_url,omitempty"`
	// The ID of the swarming task triggered for the function worker.
	SwarmingTaskId string `protobuf:"bytes,5,opt,name=swarming_task_id,json=swarmingTaskId,proto3" json:"swarming_task_id,omitempty"`
	// Number of comments.
	//
	// For analyzers that are done and produce comments.
	NumComments int32 `protobuf:"varint,6,opt,name=num_comments,json=numComments,proto3" json:"num_comments,omitempty"`
	// Host for the buildbucket server running tasks for the workers of the function.
	BuildbucketHost string `protobuf:"bytes,7,opt,name=buildbucket_host,json=buildbucketHost,proto3" json:"buildbucket_host,omitempty"`
	// The ID of the buildbucket build triggered for the function worker.
	BuildbucketBuildId   int64    `protobuf:"varint,8,opt,name=buildbucket_build_id,json=buildbucketBuildId,proto3" json:"buildbucket_build_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *FunctionProgress) Reset()         { *m = FunctionProgress{} }
func (m *FunctionProgress) String() string { return proto.CompactTextString(m) }
func (*FunctionProgress) ProtoMessage()    {}
func (*FunctionProgress) Descriptor() ([]byte, []int) {
	return fileDescriptor_2738dd491b254f26, []int{6}
}

func (m *FunctionProgress) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FunctionProgress.Unmarshal(m, b)
}
func (m *FunctionProgress) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FunctionProgress.Marshal(b, m, deterministic)
}
func (m *FunctionProgress) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FunctionProgress.Merge(m, src)
}
func (m *FunctionProgress) XXX_Size() int {
	return xxx_messageInfo_FunctionProgress.Size(m)
}
func (m *FunctionProgress) XXX_DiscardUnknown() {
	xxx_messageInfo_FunctionProgress.DiscardUnknown(m)
}

var xxx_messageInfo_FunctionProgress proto.InternalMessageInfo

func (m *FunctionProgress) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *FunctionProgress) GetPlatform() Platform_Name {
	if m != nil {
		return m.Platform
	}
	return Platform_ANY
}

func (m *FunctionProgress) GetState() State {
	if m != nil {
		return m.State
	}
	return State_PENDING
}

func (m *FunctionProgress) GetSwarmingUrl() string {
	if m != nil {
		return m.SwarmingUrl
	}
	return ""
}

func (m *FunctionProgress) GetSwarmingTaskId() string {
	if m != nil {
		return m.SwarmingTaskId
	}
	return ""
}

func (m *FunctionProgress) GetNumComments() int32 {
	if m != nil {
		return m.NumComments
	}
	return 0
}

func (m *FunctionProgress) GetBuildbucketHost() string {
	if m != nil {
		return m.BuildbucketHost
	}
	return ""
}

func (m *FunctionProgress) GetBuildbucketBuildId() int64 {
	if m != nil {
		return m.BuildbucketBuildId
	}
	return 0
}

type ProjectProgressRequest struct {
	// Project to get progress for.
	//
	// The provided project name must be known to the queried Tricium instance.
	Project              string   `protobuf:"bytes,1,opt,name=project,proto3" json:"project,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ProjectProgressRequest) Reset()         { *m = ProjectProgressRequest{} }
func (m *ProjectProgressRequest) String() string { return proto.CompactTextString(m) }
func (*ProjectProgressRequest) ProtoMessage()    {}
func (*ProjectProgressRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_2738dd491b254f26, []int{7}
}

func (m *ProjectProgressRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ProjectProgressRequest.Unmarshal(m, b)
}
func (m *ProjectProgressRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ProjectProgressRequest.Marshal(b, m, deterministic)
}
func (m *ProjectProgressRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProjectProgressRequest.Merge(m, src)
}
func (m *ProjectProgressRequest) XXX_Size() int {
	return xxx_messageInfo_ProjectProgressRequest.Size(m)
}
func (m *ProjectProgressRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ProjectProgressRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ProjectProgressRequest proto.InternalMessageInfo

func (m *ProjectProgressRequest) GetProject() string {
	if m != nil {
		return m.Project
	}
	return ""
}

type ProjectProgressResponse struct {
	// Progress of runs for the matching project in the progress request.
	//
	// The returned list is sorted based on state and detailed run progress
	// can be requested using the run ID of each listed run.
	RunProgress          []*RunProgress `protobuf:"bytes,1,rep,name=run_progress,json=runProgress,proto3" json:"run_progress,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *ProjectProgressResponse) Reset()         { *m = ProjectProgressResponse{} }
func (m *ProjectProgressResponse) String() string { return proto.CompactTextString(m) }
func (*ProjectProgressResponse) ProtoMessage()    {}
func (*ProjectProgressResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2738dd491b254f26, []int{8}
}

func (m *ProjectProgressResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ProjectProgressResponse.Unmarshal(m, b)
}
func (m *ProjectProgressResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ProjectProgressResponse.Marshal(b, m, deterministic)
}
func (m *ProjectProgressResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProjectProgressResponse.Merge(m, src)
}
func (m *ProjectProgressResponse) XXX_Size() int {
	return xxx_messageInfo_ProjectProgressResponse.Size(m)
}
func (m *ProjectProgressResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ProjectProgressResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ProjectProgressResponse proto.InternalMessageInfo

func (m *ProjectProgressResponse) GetRunProgress() []*RunProgress {
	if m != nil {
		return m.RunProgress
	}
	return nil
}

type RunProgress struct {
	RunId                string   `protobuf:"bytes,1,opt,name=run_id,json=runId,proto3" json:"run_id,omitempty"`
	State                State    `protobuf:"varint,2,opt,name=state,proto3,enum=tricium.State" json:"state,omitempty"`
	NumComments          int32    `protobuf:"varint,3,opt,name=num_comments,json=numComments,proto3" json:"num_comments,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RunProgress) Reset()         { *m = RunProgress{} }
func (m *RunProgress) String() string { return proto.CompactTextString(m) }
func (*RunProgress) ProtoMessage()    {}
func (*RunProgress) Descriptor() ([]byte, []int) {
	return fileDescriptor_2738dd491b254f26, []int{9}
}

func (m *RunProgress) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RunProgress.Unmarshal(m, b)
}
func (m *RunProgress) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RunProgress.Marshal(b, m, deterministic)
}
func (m *RunProgress) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RunProgress.Merge(m, src)
}
func (m *RunProgress) XXX_Size() int {
	return xxx_messageInfo_RunProgress.Size(m)
}
func (m *RunProgress) XXX_DiscardUnknown() {
	xxx_messageInfo_RunProgress.DiscardUnknown(m)
}

var xxx_messageInfo_RunProgress proto.InternalMessageInfo

func (m *RunProgress) GetRunId() string {
	if m != nil {
		return m.RunId
	}
	return ""
}

func (m *RunProgress) GetState() State {
	if m != nil {
		return m.State
	}
	return State_PENDING
}

func (m *RunProgress) GetNumComments() int32 {
	if m != nil {
		return m.NumComments
	}
	return 0
}

type ResultsRequest struct {
	// Run ID returned by an analyze request.
	RunId string `protobuf:"bytes,1,opt,name=run_id,json=runId,proto3" json:"run_id,omitempty"`
	// An optional function name.
	//
	// If provided, only results for the provided function are returned.
	// If a function is being run on more than one platform then the merged
	// results of the function can be returned by exclusion of a specific platform.
	//
	// NB! Currently not supported.
	Function string `protobuf:"bytes,2,opt,name=function,proto3" json:"function,omitempty"`
	// Optional platform that can be provided together with an function name.
	//
	// If provided, only results for the provided platform and function are returned.
	//
	// NB! Currently not supported.
	Platform             Platform_Name `protobuf:"varint,3,opt,name=platform,proto3,enum=tricium.Platform_Name" json:"platform,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *ResultsRequest) Reset()         { *m = ResultsRequest{} }
func (m *ResultsRequest) String() string { return proto.CompactTextString(m) }
func (*ResultsRequest) ProtoMessage()    {}
func (*ResultsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_2738dd491b254f26, []int{10}
}

func (m *ResultsRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ResultsRequest.Unmarshal(m, b)
}
func (m *ResultsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ResultsRequest.Marshal(b, m, deterministic)
}
func (m *ResultsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResultsRequest.Merge(m, src)
}
func (m *ResultsRequest) XXX_Size() int {
	return xxx_messageInfo_ResultsRequest.Size(m)
}
func (m *ResultsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ResultsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ResultsRequest proto.InternalMessageInfo

func (m *ResultsRequest) GetRunId() string {
	if m != nil {
		return m.RunId
	}
	return ""
}

func (m *ResultsRequest) GetFunction() string {
	if m != nil {
		return m.Function
	}
	return ""
}

func (m *ResultsRequest) GetPlatform() Platform_Name {
	if m != nil {
		return m.Platform
	}
	return Platform_ANY
}

type ResultsResponse struct {
	// TODO(qyearsley): Support paging of results to deal with large number of results.
	Results *Data_Results `protobuf:"bytes,1,opt,name=results,proto3" json:"results,omitempty"`
	// Whether the returned results are merged.
	//
	// Results may be merged if a result request for an function running on multiple
	// platforms was made and the request did not include a specific platform.
	// Results for a run with no specific function selected will be marked as merged
	// if any included analyzer results were merged.
	IsMerged             bool     `protobuf:"varint,2,opt,name=is_merged,json=isMerged,proto3" json:"is_merged,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ResultsResponse) Reset()         { *m = ResultsResponse{} }
func (m *ResultsResponse) String() string { return proto.CompactTextString(m) }
func (*ResultsResponse) ProtoMessage()    {}
func (*ResultsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2738dd491b254f26, []int{11}
}

func (m *ResultsResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ResultsResponse.Unmarshal(m, b)
}
func (m *ResultsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ResultsResponse.Marshal(b, m, deterministic)
}
func (m *ResultsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResultsResponse.Merge(m, src)
}
func (m *ResultsResponse) XXX_Size() int {
	return xxx_messageInfo_ResultsResponse.Size(m)
}
func (m *ResultsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ResultsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ResultsResponse proto.InternalMessageInfo

func (m *ResultsResponse) GetResults() *Data_Results {
	if m != nil {
		return m.Results
	}
	return nil
}

func (m *ResultsResponse) GetIsMerged() bool {
	if m != nil {
		return m.IsMerged
	}
	return false
}

type FeedbackRequest struct {
	// Name of the project in luci-config to provide feedback for.
	//
	// TODO(crbug.com/905885): Use this field and make it required.
	Project string `protobuf:"bytes,4,opt,name=project,proto3" json:"project,omitempty"`
	// Analyzer category to provide aggregated feedback for.
	//
	// This includes the analyzer name along with optional subcategories
	// separated with slash, e.g., "ClangTidy" or "ClangTidy/llvm-header-guard".
	//
	// Required field. Must include at least the analyzer name and should not
	// end with a slash.
	Category string `protobuf:"bytes,1,opt,name=category,proto3" json:"category,omitempty"`
	// Start of time period to report feedback for.
	//
	// Feedback for comments created from this time (inclusive) will be included.
	// Must be before end_time.
	//
	// Optional field. If not specified, this means "go as far back as possible".
	StartTime *timestamp.Timestamp `protobuf:"bytes,2,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	// End of time period to report feedback for.
	//
	// Feedback for comments created up until this time (exclusive) will be included.
	// Must be after start_time.
	//
	// Optional field. Defaults to now.
	EndTime              *timestamp.Timestamp `protobuf:"bytes,3,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *FeedbackRequest) Reset()         { *m = FeedbackRequest{} }
func (m *FeedbackRequest) String() string { return proto.CompactTextString(m) }
func (*FeedbackRequest) ProtoMessage()    {}
func (*FeedbackRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_2738dd491b254f26, []int{12}
}

func (m *FeedbackRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FeedbackRequest.Unmarshal(m, b)
}
func (m *FeedbackRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FeedbackRequest.Marshal(b, m, deterministic)
}
func (m *FeedbackRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FeedbackRequest.Merge(m, src)
}
func (m *FeedbackRequest) XXX_Size() int {
	return xxx_messageInfo_FeedbackRequest.Size(m)
}
func (m *FeedbackRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_FeedbackRequest.DiscardUnknown(m)
}

var xxx_messageInfo_FeedbackRequest proto.InternalMessageInfo

func (m *FeedbackRequest) GetProject() string {
	if m != nil {
		return m.Project
	}
	return ""
}

func (m *FeedbackRequest) GetCategory() string {
	if m != nil {
		return m.Category
	}
	return ""
}

func (m *FeedbackRequest) GetStartTime() *timestamp.Timestamp {
	if m != nil {
		return m.StartTime
	}
	return nil
}

func (m *FeedbackRequest) GetEndTime() *timestamp.Timestamp {
	if m != nil {
		return m.EndTime
	}
	return nil
}

type FeedbackResponse struct {
	// Number of returned comments.
	//
	// In any case where an analyzer was run on multiple platforms and the
	// resulting comments were merged, only merged comments are returned in this
	// count. Note that only merged comments are ever returned from the Tricium
	// service.
	Comments int32 `protobuf:"varint,1,opt,name=comments,proto3" json:"comments,omitempty"`
	// Number of collected 'not useful' reports.
	NotUsefulReports     int32    `protobuf:"varint,2,opt,name=not_useful_reports,json=notUsefulReports,proto3" json:"not_useful_reports,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *FeedbackResponse) Reset()         { *m = FeedbackResponse{} }
func (m *FeedbackResponse) String() string { return proto.CompactTextString(m) }
func (*FeedbackResponse) ProtoMessage()    {}
func (*FeedbackResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2738dd491b254f26, []int{13}
}

func (m *FeedbackResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FeedbackResponse.Unmarshal(m, b)
}
func (m *FeedbackResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FeedbackResponse.Marshal(b, m, deterministic)
}
func (m *FeedbackResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FeedbackResponse.Merge(m, src)
}
func (m *FeedbackResponse) XXX_Size() int {
	return xxx_messageInfo_FeedbackResponse.Size(m)
}
func (m *FeedbackResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_FeedbackResponse.DiscardUnknown(m)
}

var xxx_messageInfo_FeedbackResponse proto.InternalMessageInfo

func (m *FeedbackResponse) GetComments() int32 {
	if m != nil {
		return m.Comments
	}
	return 0
}

func (m *FeedbackResponse) GetNotUsefulReports() int32 {
	if m != nil {
		return m.NotUsefulReports
	}
	return 0
}

type ReportNotUsefulRequest struct {
	// ID of comment as returned by the Results endpoint.
	CommentId            string   `protobuf:"bytes,1,opt,name=comment_id,json=commentId,proto3" json:"comment_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ReportNotUsefulRequest) Reset()         { *m = ReportNotUsefulRequest{} }
func (m *ReportNotUsefulRequest) String() string { return proto.CompactTextString(m) }
func (*ReportNotUsefulRequest) ProtoMessage()    {}
func (*ReportNotUsefulRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_2738dd491b254f26, []int{14}
}

func (m *ReportNotUsefulRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ReportNotUsefulRequest.Unmarshal(m, b)
}
func (m *ReportNotUsefulRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ReportNotUsefulRequest.Marshal(b, m, deterministic)
}
func (m *ReportNotUsefulRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReportNotUsefulRequest.Merge(m, src)
}
func (m *ReportNotUsefulRequest) XXX_Size() int {
	return xxx_messageInfo_ReportNotUsefulRequest.Size(m)
}
func (m *ReportNotUsefulRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ReportNotUsefulRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ReportNotUsefulRequest proto.InternalMessageInfo

func (m *ReportNotUsefulRequest) GetCommentId() string {
	if m != nil {
		return m.CommentId
	}
	return ""
}

type ReportNotUsefulResponse struct {
	// Email address of the owner of the analyzer.
	Owner string `protobuf:"bytes,1,opt,name=owner,proto3" json:"owner,omitempty"`
	// Monorail bug component of the analyzer being.
	MonorailComponent    string   `protobuf:"bytes,2,opt,name=monorail_component,json=monorailComponent,proto3" json:"monorail_component,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ReportNotUsefulResponse) Reset()         { *m = ReportNotUsefulResponse{} }
func (m *ReportNotUsefulResponse) String() string { return proto.CompactTextString(m) }
func (*ReportNotUsefulResponse) ProtoMessage()    {}
func (*ReportNotUsefulResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2738dd491b254f26, []int{15}
}

func (m *ReportNotUsefulResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ReportNotUsefulResponse.Unmarshal(m, b)
}
func (m *ReportNotUsefulResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ReportNotUsefulResponse.Marshal(b, m, deterministic)
}
func (m *ReportNotUsefulResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReportNotUsefulResponse.Merge(m, src)
}
func (m *ReportNotUsefulResponse) XXX_Size() int {
	return xxx_messageInfo_ReportNotUsefulResponse.Size(m)
}
func (m *ReportNotUsefulResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ReportNotUsefulResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ReportNotUsefulResponse proto.InternalMessageInfo

func (m *ReportNotUsefulResponse) GetOwner() string {
	if m != nil {
		return m.Owner
	}
	return ""
}

func (m *ReportNotUsefulResponse) GetMonorailComponent() string {
	if m != nil {
		return m.MonorailComponent
	}
	return ""
}

func init() {
	proto.RegisterEnum("tricium.State", State_name, State_value)
	proto.RegisterType((*AnalyzeRequest)(nil), "tricium.AnalyzeRequest")
	proto.RegisterType((*GerritRevision)(nil), "tricium.GerritRevision")
	proto.RegisterType((*GitCommit)(nil), "tricium.GitCommit")
	proto.RegisterType((*AnalyzeResponse)(nil), "tricium.AnalyzeResponse")
	proto.RegisterType((*ProgressRequest)(nil), "tricium.ProgressRequest")
	proto.RegisterType((*ProgressResponse)(nil), "tricium.ProgressResponse")
	proto.RegisterType((*FunctionProgress)(nil), "tricium.FunctionProgress")
	proto.RegisterType((*ProjectProgressRequest)(nil), "tricium.ProjectProgressRequest")
	proto.RegisterType((*ProjectProgressResponse)(nil), "tricium.ProjectProgressResponse")
	proto.RegisterType((*RunProgress)(nil), "tricium.RunProgress")
	proto.RegisterType((*ResultsRequest)(nil), "tricium.ResultsRequest")
	proto.RegisterType((*ResultsResponse)(nil), "tricium.ResultsResponse")
	proto.RegisterType((*FeedbackRequest)(nil), "tricium.FeedbackRequest")
	proto.RegisterType((*FeedbackResponse)(nil), "tricium.FeedbackResponse")
	proto.RegisterType((*ReportNotUsefulRequest)(nil), "tricium.ReportNotUsefulRequest")
	proto.RegisterType((*ReportNotUsefulResponse)(nil), "tricium.ReportNotUsefulResponse")
}

func init() {
	proto.RegisterFile("infra/tricium/api/v1/tricium.proto", fileDescriptor_2738dd491b254f26)
}

var fileDescriptor_2738dd491b254f26 = []byte{
	// 1110 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x56, 0x5f, 0x6f, 0xe3, 0x44,
	0x10, 0x6f, 0x9a, 0x26, 0x76, 0x26, 0xbd, 0xc4, 0x5d, 0xf5, 0x5a, 0x5f, 0x10, 0x6a, 0x31, 0x20,
	0x05, 0xc4, 0x25, 0x90, 0x13, 0x3a, 0x21, 0x9d, 0x74, 0x6a, 0xd3, 0xb4, 0x8d, 0x74, 0xcd, 0x55,
	0x6e, 0xf2, 0x86, 0xb0, 0xdc, 0x78, 0xe3, 0x33, 0xf5, 0x9f, 0xb0, 0xbb, 0xbe, 0xea, 0xf8, 0x22,
	0x7c, 0x0c, 0x1e, 0x78, 0xe2, 0x99, 0x67, 0x9e, 0xf9, 0x3a, 0x68, 0xd7, 0xbb, 0x8e, 0xf3, 0xa7,
	0x05, 0xc4, 0xdb, 0xce, 0x9f, 0x9d, 0x99, 0xdf, 0xcc, 0x6f, 0xbc, 0x06, 0x2b, 0x88, 0x67, 0xc4,
	0xed, 0x32, 0x12, 0x4c, 0x83, 0x34, 0xea, 0xba, 0xf3, 0xa0, 0xfb, 0xfe, 0x1b, 0x25, 0x76, 0xe6,
	0x24, 0x61, 0x09, 0xd2, 0xa4, 0xd8, 0x3a, 0xf2, 0x93, 0xc4, 0x0f, 0x71, 0x57, 0xa8, 0x6f, 0xd3,
	0x59, 0x97, 0x05, 0x11, 0xa6, 0xcc, 0x8d, 0xe6, 0x99, 0x67, 0xeb, 0x68, 0x63, 0x34, 0xcf, 0x65,
	0xae, 0x74, 0xf8, 0x74, 0xa3, 0xc3, 0x3c, 0x74, 0xd9, 0x2c, 0x21, 0x32, 0x9f, 0xf5, 0x57, 0x09,
	0x1a, 0x27, 0xb1, 0x1b, 0x7e, 0xf8, 0x19, 0xdb, 0xf8, 0xa7, 0x14, 0x53, 0x86, 0x4c, 0xd0, 0xe6,
	0x24, 0xf9, 0x11, 0x4f, 0x99, 0x59, 0x3a, 0x2e, 0xb5, 0x6b, 0xb6, 0x12, 0x51, 0x1b, 0x2a, 0xb3,
	0x20, 0xc4, 0xd4, 0xac, 0x1c, 0x97, 0xdb, 0xf5, 0x1e, 0xea, 0xa8, 0xda, 0xcf, 0x78, 0xd6, 0xf3,
	0x20, 0xc4, 0x76, 0xe6, 0x80, 0x4e, 0xa1, 0xe9, 0x63, 0x42, 0x02, 0xe6, 0x10, 0xfc, 0x3e, 0xa0,
	0x41, 0x12, 0x9b, 0xda, 0x71, 0xa9, 0x5d, 0xef, 0x1d, 0xe6, 0x77, 0x2e, 0x84, 0xdd, 0x96, 0xe6,
	0xcb, 0x2d, 0xbb, 0xe1, 0x2f, 0x69, 0xd0, 0x0b, 0x00, 0x3f, 0x60, 0xce, 0x34, 0x89, 0xa2, 0x80,
	0x99, 0xba, 0xb8, 0xbe, 0x48, 0x79, 0x11, 0xb0, 0xbe, 0xb0, 0x5c, 0x6e, 0xd9, 0x35, 0x5f, 0x09,
	0xa7, 0x3a, 0x54, 0x69, 0x92, 0x92, 0x29, 0xb6, 0x7e, 0x2d, 0x41, 0x63, 0x39, 0x07, 0x42, 0xb0,
	0xf3, 0x2e, 0xa1, 0x0a, 0x96, 0x38, 0x17, 0xd1, 0x6e, 0x2f, 0xa3, 0x3d, 0x80, 0xea, 0xf4, 0x9d,
	0x1b, 0xfb, 0xd8, 0x2c, 0x0b, 0x83, 0x94, 0xd0, 0x21, 0x68, 0xbc, 0xae, 0x94, 0x84, 0xe6, 0x4e,
	0x66, 0xf0, 0x03, 0x36, 0x21, 0xa1, 0x32, 0x10, 0x3c, 0x33, 0x2b, 0xb9, 0xc1, 0xc6, 0x33, 0xf4,
	0x39, 0x34, 0x32, 0x14, 0x4e, 0x84, 0x29, 0x75, 0x7d, 0x6c, 0x56, 0x85, 0xfd, 0x49, 0xa6, 0xbd,
	0xca, 0x94, 0x56, 0x17, 0x6a, 0x39, 0x2a, 0x64, 0x40, 0x99, 0x67, 0xc8, 0x4a, 0xe5, 0x47, 0xae,
	0xe1, 0xa1, 0xb3, 0x2a, 0xf9, 0xd1, 0x6a, 0x43, 0x33, 0x9f, 0x1d, 0x9d, 0x27, 0x31, 0xc5, 0xe8,
	0x29, 0x54, 0x49, 0x1a, 0x3b, 0x81, 0x27, 0x6f, 0x56, 0x48, 0x1a, 0x0f, 0x3d, 0xeb, 0x8f, 0x12,
	0x34, 0xaf, 0x49, 0xe2, 0x13, 0x4c, 0xa9, 0x9a, 0x73, 0x0b, 0xf4, 0x59, 0x1a, 0x4f, 0x19, 0x1f,
	0x4e, 0x16, 0x34, 0x97, 0xd1, 0x73, 0xd0, 0x15, 0x51, 0x04, 0xfa, 0x7a, 0x6f, 0x2f, 0xef, 0xfc,
	0xb5, 0x34, 0xd8, 0xb9, 0xcb, 0xa6, 0x71, 0xef, 0xfc, 0xd7, 0x71, 0x1f, 0x2e, 0x57, 0x7e, 0xb9,
	0x25, 0x6b, 0x2f, 0x8c, 0xf4, 0x97, 0x12, 0x18, 0x0b, 0x14, 0x8f, 0x22, 0x46, 0x9f, 0x41, 0x85,
	0x32, 0x97, 0x61, 0x01, 0xad, 0xd1, 0x6b, 0xe4, 0x85, 0xdc, 0x70, 0xad, 0x9d, 0x19, 0xd1, 0x39,
	0xec, 0x29, 0xcc, 0xce, 0x5c, 0x46, 0x36, 0xcb, 0x82, 0xdd, 0xcf, 0xf2, 0x1b, 0xe7, 0xd2, 0x23,
	0x4f, 0x6d, 0xcc, 0x56, 0x34, 0xd6, 0x9f, 0xdb, 0x60, 0xac, 0xba, 0x71, 0xba, 0xc5, 0x6e, 0x84,
	0x15, 0xdd, 0xf8, 0x19, 0xf5, 0x0a, 0x8d, 0xcd, 0x2a, 0x3b, 0x58, 0x6b, 0x6c, 0x67, 0xe4, 0x46,
	0xb8, 0xd0, 0xdd, 0x1c, 0x4a, 0xf9, 0x31, 0x28, 0x9f, 0xc0, 0x2e, 0xbd, 0x77, 0x49, 0x14, 0xc4,
	0x7e, 0x81, 0x9b, 0x75, 0xa5, 0xe3, 0x04, 0x6d, 0x83, 0x91, 0xbb, 0x30, 0x97, 0xde, 0xf1, 0xa6,
	0x65, 0x4c, 0x6d, 0x28, 0xfd, 0xd8, 0xa5, 0x77, 0x43, 0x8f, 0x07, 0x8b, 0xd3, 0x48, 0xec, 0x1e,
	0x8e, 0x19, 0x15, 0x7c, 0xad, 0xd8, 0xf5, 0x38, 0x8d, 0xfa, 0x52, 0x85, 0xbe, 0x00, 0xe3, 0x36,
	0x0d, 0x42, 0xef, 0x36, 0x9d, 0xde, 0x61, 0xe6, 0x88, 0xc5, 0xd2, 0x44, 0xb0, 0x66, 0x41, 0x7f,
	0xc9, 0x77, 0xec, 0x6b, 0xd8, 0x2f, 0xba, 0x8a, 0x33, 0xcf, 0xcd, 0x77, 0xba, 0x6c, 0xa3, 0x82,
	0xed, 0x94, 0x1f, 0x87, 0x9e, 0xd5, 0x83, 0x83, 0xeb, 0x6c, 0x0d, 0x57, 0x59, 0xfb, 0xe0, 0xd7,
	0xc9, 0xb2, 0xe1, 0x70, 0xed, 0x8e, 0xe4, 0xc8, 0x4b, 0xd8, 0xe5, 0x1c, 0xc9, 0x27, 0x5c, 0x12,
	0x13, 0xde, 0xcf, 0x1b, 0x69, 0xa7, 0x8b, 0xe1, 0xd6, 0xc9, 0x42, 0xb0, 0x22, 0xa8, 0x17, 0x6c,
	0xff, 0x8f, 0x6b, 0xab, 0x3d, 0x2d, 0xaf, 0xf5, 0xd4, 0xba, 0x87, 0x86, 0x8d, 0x69, 0x1a, 0xb2,
	0x1c, 0xee, 0x03, 0x19, 0x1f, 0xdb, 0xdd, 0xde, 0xca, 0xee, 0xfe, 0x0b, 0x8a, 0x59, 0x0e, 0x34,
	0xf3, 0xc4, 0xb2, 0x67, 0x5d, 0xd0, 0x48, 0xa6, 0x12, 0xa9, 0xeb, 0xbd, 0xa7, 0xcb, 0x9f, 0x7b,
	0xe5, 0xaf, 0xbc, 0xd0, 0x47, 0x50, 0x0b, 0xa8, 0x13, 0x61, 0xe2, 0x63, 0x4f, 0x14, 0xa5, 0xdb,
	0x7a, 0x40, 0xaf, 0x84, 0x6c, 0xfd, 0x5e, 0x82, 0xe6, 0x39, 0xc6, 0xde, 0xad, 0x3b, 0xbd, 0xdb,
	0x30, 0xca, 0x9d, 0xe5, 0x4f, 0x6f, 0x0b, 0xf4, 0xa9, 0xcb, 0xb0, 0x9f, 0x90, 0x0f, 0x12, 0x77,
	0x2e, 0xa3, 0xef, 0x00, 0x28, 0x73, 0x09, 0x73, 0xf8, 0x83, 0x28, 0xf2, 0xd4, 0x7b, 0xad, 0x4e,
	0xf6, 0x5a, 0x76, 0xd4, 0x6b, 0xd9, 0x19, 0xab, 0xd7, 0xd2, 0xae, 0x09, 0x6f, 0x2e, 0xa3, 0x6f,
	0x41, 0xc7, 0xb1, 0x97, 0x5d, 0x2c, 0xff, 0xe3, 0x45, 0x0d, 0xc7, 0x1e, 0x97, 0xac, 0xef, 0xc1,
	0x58, 0x94, 0x2e, 0xbb, 0xc3, 0x2b, 0x54, 0x83, 0x2c, 0x89, 0x41, 0xe6, 0x32, 0xfa, 0x0a, 0x50,
	0x9c, 0x30, 0x27, 0xa5, 0x78, 0x96, 0x86, 0x0e, 0xc1, 0xf3, 0x84, 0x30, 0x2a, 0x2a, 0xad, 0xd8,
	0x46, 0x9c, 0xb0, 0x89, 0x30, 0xd8, 0x99, 0xde, 0x7a, 0x09, 0x07, 0xd9, 0x71, 0xb4, 0xb0, 0x64,
	0xfd, 0xf9, 0x18, 0x40, 0xc6, 0x5c, 0xcc, 0xbf, 0x26, 0x35, 0x43, 0xcf, 0xfa, 0x01, 0x0e, 0xd7,
	0x2e, 0xca, 0xea, 0xf6, 0xa1, 0x92, 0xdc, 0xc7, 0x98, 0x28, 0xd2, 0x08, 0x01, 0x3d, 0x07, 0x14,
	0x25, 0x71, 0x42, 0xdc, 0x20, 0xe4, 0x2c, 0x9c, 0x27, 0x31, 0x8e, 0xd5, 0xab, 0xb7, 0xa7, 0x2c,
	0x7d, 0x65, 0xf8, 0x12, 0x43, 0x45, 0xf0, 0x17, 0xd5, 0x41, 0xbb, 0x1e, 0x8c, 0xce, 0x86, 0xa3,
	0x0b, 0x63, 0x8b, 0x0b, 0xf6, 0x64, 0x34, 0xe2, 0x42, 0x89, 0x0b, 0x37, 0x93, 0x7e, 0x7f, 0x70,
	0x73, 0x63, 0x6c, 0x73, 0xe1, 0xfc, 0x64, 0xf8, 0x66, 0x62, 0x0f, 0x8c, 0x32, 0xda, 0x05, 0xbd,
	0x7f, 0x32, 0xea, 0x0f, 0xde, 0x0c, 0xce, 0x8c, 0x1d, 0xf4, 0x04, 0x6a, 0xe3, 0xe1, 0xd5, 0xe0,
	0xcc, 0x79, 0x3b, 0x19, 0x1b, 0x15, 0xee, 0x79, 0x72, 0xfa, 0xd6, 0x1e, 0x0f, 0xce, 0x8c, 0x6a,
	0xef, 0xb7, 0x32, 0x68, 0xe3, 0x8c, 0x58, 0xe8, 0x15, 0x68, 0xf2, 0x41, 0x43, 0x8b, 0x97, 0x63,
	0xf9, 0xf7, 0xa4, 0x65, 0xae, 0x1b, 0x24, 0xea, 0xd7, 0xa0, 0xe7, 0x9b, 0xba, 0xf0, 0x5a, 0xf9,
	0x80, 0xb4, 0x9e, 0x6d, 0xb0, 0xc8, 0x00, 0x63, 0xf1, 0x48, 0x16, 0xbf, 0x20, 0xe8, 0xa8, 0xe8,
	0xbd, 0xe1, 0x7b, 0xd4, 0x3a, 0x7e, 0xd8, 0x41, 0x46, 0x7d, 0x05, 0x9a, 0xdc, 0x95, 0x02, 0xa8,
	0xe5, 0x35, 0x2f, 0x80, 0x5a, 0x5d, 0xc3, 0xd7, 0xa0, 0x2b, 0xf2, 0x15, 0x40, 0xad, 0xac, 0x52,
	0x01, 0xd4, 0x1a, 0x53, 0xc7, 0x7c, 0xb5, 0x97, 0x68, 0x52, 0x00, 0xb5, 0x99, 0x79, 0x05, 0x50,
	0x0f, 0x30, 0xec, 0xb6, 0x2a, 0x16, 0xe6, 0xc5, 0xdf, 0x01, 0x00, 0x00, 0xff, 0xff, 0xdb, 0x63,
	0x81, 0xb5, 0xd4, 0x0a, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// TriciumClient is the client API for Tricium service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type TriciumClient interface {
	// Analyze requests analysis of a list of paths.
	//
	// An analysis request for a list of paths in a project connected to Tricium
	// via the Tricium configuration. On success, the ID of the resulting run is
	// returned.
	Analyze(ctx context.Context, in *AnalyzeRequest, opts ...grpc.CallOption) (*AnalyzeResponse, error)
	// Progress requests progress information for a run.
	//
	// A run corresponds to an analyze request and is identified with a run ID.
	Progress(ctx context.Context, in *ProgressRequest, opts ...grpc.CallOption) (*ProgressResponse, error)
	// ProjectProgress requests progress information for a project.
	//
	// A list of runs, connected to the project, will be returned together with their status.
	// The provided project must be known to the queried Tricium instance.
	ProjectProgress(ctx context.Context, in *ProjectProgressRequest, opts ...grpc.CallOption) (*ProjectProgressResponse, error)
	// Results requests analysis results from a run.
	//
	// A run corresponds to an analyze request and is identified with a run ID.
	Results(ctx context.Context, in *ResultsRequest, opts ...grpc.CallOption) (*ResultsResponse, error)
	// Feedback requests feedback for an analyzer category.
	Feedback(ctx context.Context, in *FeedbackRequest, opts ...grpc.CallOption) (*FeedbackResponse, error)
	// ReportNotUseful reports not useful feedback for a robot comment.
	ReportNotUseful(ctx context.Context, in *ReportNotUsefulRequest, opts ...grpc.CallOption) (*ReportNotUsefulResponse, error)
}
type triciumPRPCClient struct {
	client *prpc.Client
}

func NewTriciumPRPCClient(client *prpc.Client) TriciumClient {
	return &triciumPRPCClient{client}
}

func (c *triciumPRPCClient) Analyze(ctx context.Context, in *AnalyzeRequest, opts ...grpc.CallOption) (*AnalyzeResponse, error) {
	out := new(AnalyzeResponse)
	err := c.client.Call(ctx, "tricium.Tricium", "Analyze", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *triciumPRPCClient) Progress(ctx context.Context, in *ProgressRequest, opts ...grpc.CallOption) (*ProgressResponse, error) {
	out := new(ProgressResponse)
	err := c.client.Call(ctx, "tricium.Tricium", "Progress", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *triciumPRPCClient) ProjectProgress(ctx context.Context, in *ProjectProgressRequest, opts ...grpc.CallOption) (*ProjectProgressResponse, error) {
	out := new(ProjectProgressResponse)
	err := c.client.Call(ctx, "tricium.Tricium", "ProjectProgress", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *triciumPRPCClient) Results(ctx context.Context, in *ResultsRequest, opts ...grpc.CallOption) (*ResultsResponse, error) {
	out := new(ResultsResponse)
	err := c.client.Call(ctx, "tricium.Tricium", "Results", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *triciumPRPCClient) Feedback(ctx context.Context, in *FeedbackRequest, opts ...grpc.CallOption) (*FeedbackResponse, error) {
	out := new(FeedbackResponse)
	err := c.client.Call(ctx, "tricium.Tricium", "Feedback", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *triciumPRPCClient) ReportNotUseful(ctx context.Context, in *ReportNotUsefulRequest, opts ...grpc.CallOption) (*ReportNotUsefulResponse, error) {
	out := new(ReportNotUsefulResponse)
	err := c.client.Call(ctx, "tricium.Tricium", "ReportNotUseful", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

type triciumClient struct {
	cc grpc.ClientConnInterface
}

func NewTriciumClient(cc grpc.ClientConnInterface) TriciumClient {
	return &triciumClient{cc}
}

func (c *triciumClient) Analyze(ctx context.Context, in *AnalyzeRequest, opts ...grpc.CallOption) (*AnalyzeResponse, error) {
	out := new(AnalyzeResponse)
	err := c.cc.Invoke(ctx, "/tricium.Tricium/Analyze", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *triciumClient) Progress(ctx context.Context, in *ProgressRequest, opts ...grpc.CallOption) (*ProgressResponse, error) {
	out := new(ProgressResponse)
	err := c.cc.Invoke(ctx, "/tricium.Tricium/Progress", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *triciumClient) ProjectProgress(ctx context.Context, in *ProjectProgressRequest, opts ...grpc.CallOption) (*ProjectProgressResponse, error) {
	out := new(ProjectProgressResponse)
	err := c.cc.Invoke(ctx, "/tricium.Tricium/ProjectProgress", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *triciumClient) Results(ctx context.Context, in *ResultsRequest, opts ...grpc.CallOption) (*ResultsResponse, error) {
	out := new(ResultsResponse)
	err := c.cc.Invoke(ctx, "/tricium.Tricium/Results", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *triciumClient) Feedback(ctx context.Context, in *FeedbackRequest, opts ...grpc.CallOption) (*FeedbackResponse, error) {
	out := new(FeedbackResponse)
	err := c.cc.Invoke(ctx, "/tricium.Tricium/Feedback", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *triciumClient) ReportNotUseful(ctx context.Context, in *ReportNotUsefulRequest, opts ...grpc.CallOption) (*ReportNotUsefulResponse, error) {
	out := new(ReportNotUsefulResponse)
	err := c.cc.Invoke(ctx, "/tricium.Tricium/ReportNotUseful", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TriciumServer is the server API for Tricium service.
type TriciumServer interface {
	// Analyze requests analysis of a list of paths.
	//
	// An analysis request for a list of paths in a project connected to Tricium
	// via the Tricium configuration. On success, the ID of the resulting run is
	// returned.
	Analyze(context.Context, *AnalyzeRequest) (*AnalyzeResponse, error)
	// Progress requests progress information for a run.
	//
	// A run corresponds to an analyze request and is identified with a run ID.
	Progress(context.Context, *ProgressRequest) (*ProgressResponse, error)
	// ProjectProgress requests progress information for a project.
	//
	// A list of runs, connected to the project, will be returned together with their status.
	// The provided project must be known to the queried Tricium instance.
	ProjectProgress(context.Context, *ProjectProgressRequest) (*ProjectProgressResponse, error)
	// Results requests analysis results from a run.
	//
	// A run corresponds to an analyze request and is identified with a run ID.
	Results(context.Context, *ResultsRequest) (*ResultsResponse, error)
	// Feedback requests feedback for an analyzer category.
	Feedback(context.Context, *FeedbackRequest) (*FeedbackResponse, error)
	// ReportNotUseful reports not useful feedback for a robot comment.
	ReportNotUseful(context.Context, *ReportNotUsefulRequest) (*ReportNotUsefulResponse, error)
}

// UnimplementedTriciumServer can be embedded to have forward compatible implementations.
type UnimplementedTriciumServer struct {
}

func (*UnimplementedTriciumServer) Analyze(ctx context.Context, req *AnalyzeRequest) (*AnalyzeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Analyze not implemented")
}
func (*UnimplementedTriciumServer) Progress(ctx context.Context, req *ProgressRequest) (*ProgressResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Progress not implemented")
}
func (*UnimplementedTriciumServer) ProjectProgress(ctx context.Context, req *ProjectProgressRequest) (*ProjectProgressResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProjectProgress not implemented")
}
func (*UnimplementedTriciumServer) Results(ctx context.Context, req *ResultsRequest) (*ResultsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Results not implemented")
}
func (*UnimplementedTriciumServer) Feedback(ctx context.Context, req *FeedbackRequest) (*FeedbackResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Feedback not implemented")
}
func (*UnimplementedTriciumServer) ReportNotUseful(ctx context.Context, req *ReportNotUsefulRequest) (*ReportNotUsefulResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReportNotUseful not implemented")
}

func RegisterTriciumServer(s prpc.Registrar, srv TriciumServer) {
	s.RegisterService(&_Tricium_serviceDesc, srv)
}

func _Tricium_Analyze_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AnalyzeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TriciumServer).Analyze(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tricium.Tricium/Analyze",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TriciumServer).Analyze(ctx, req.(*AnalyzeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Tricium_Progress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProgressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TriciumServer).Progress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tricium.Tricium/Progress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TriciumServer).Progress(ctx, req.(*ProgressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Tricium_ProjectProgress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProjectProgressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TriciumServer).ProjectProgress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tricium.Tricium/ProjectProgress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TriciumServer).ProjectProgress(ctx, req.(*ProjectProgressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Tricium_Results_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResultsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TriciumServer).Results(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tricium.Tricium/Results",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TriciumServer).Results(ctx, req.(*ResultsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Tricium_Feedback_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FeedbackRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TriciumServer).Feedback(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tricium.Tricium/Feedback",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TriciumServer).Feedback(ctx, req.(*FeedbackRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Tricium_ReportNotUseful_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReportNotUsefulRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TriciumServer).ReportNotUseful(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tricium.Tricium/ReportNotUseful",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TriciumServer).ReportNotUseful(ctx, req.(*ReportNotUsefulRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Tricium_serviceDesc = grpc.ServiceDesc{
	ServiceName: "tricium.Tricium",
	HandlerType: (*TriciumServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Analyze",
			Handler:    _Tricium_Analyze_Handler,
		},
		{
			MethodName: "Progress",
			Handler:    _Tricium_Progress_Handler,
		},
		{
			MethodName: "ProjectProgress",
			Handler:    _Tricium_ProjectProgress_Handler,
		},
		{
			MethodName: "Results",
			Handler:    _Tricium_Results_Handler,
		},
		{
			MethodName: "Feedback",
			Handler:    _Tricium_Feedback_Handler,
		},
		{
			MethodName: "ReportNotUseful",
			Handler:    _Tricium_ReportNotUseful_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "infra/tricium/api/v1/tricium.proto",
}
