// Code generated by protoc-gen-go. DO NOT EDIT.
// source: infra/tricium/api/bigquery/analyzer_results.proto

package apibq

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	v1 "infra/tricium/api/v1"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type AnalysisRun struct {
	// The revision information for the Gerrit change being analyzed by this
	// analysis run.
	GerritRevision *v1.GerritRevision `protobuf:"bytes,1,opt,name=gerrit_revision,json=gerritRevision,proto3" json:"gerrit_revision,omitempty"`
	// The revision number. In Gerrit this is the change revision and is
	// displayed as the patchset number in PolyGerrit.
	RevisionNumber int32 `protobuf:"varint,2,opt,name=revision_number,json=revisionNumber,proto3" json:"revision_number,omitempty"`
	// All files in the change revision analyzed by the run.
	Files []*v1.Data_File `protobuf:"bytes,3,rep,name=files,proto3" json:"files,omitempty"`
	// Time when the request was received.
	RequestedTime *timestamp.Timestamp `protobuf:"bytes,4,opt,name=requested_time,json=requestedTime,proto3" json:"requested_time,omitempty"`
	// Platform for which the result applies.
	ResultPlatform v1.Platform_Name `protobuf:"varint,5,opt,name=result_platform,json=resultPlatform,proto3,enum=tricium.Platform_Name" json:"result_platform,omitempty"`
	// Overall state for the run result. As results are only sent after
	// completion PENDING and RUNNING would never be used.
	ResultState v1.State `protobuf:"varint,6,opt,name=result_state,json=resultState,proto3,enum=tricium.State" json:"result_state,omitempty"`
	// Comments added to Gerrit during this analysis run.
	Comments             []*AnalysisRun_GerritComment `protobuf:"bytes,7,rep,name=comments,proto3" json:"comments,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                     `json:"-"`
	XXX_unrecognized     []byte                       `json:"-"`
	XXX_sizecache        int32                        `json:"-"`
}

func (m *AnalysisRun) Reset()         { *m = AnalysisRun{} }
func (m *AnalysisRun) String() string { return proto.CompactTextString(m) }
func (*AnalysisRun) ProtoMessage()    {}
func (*AnalysisRun) Descriptor() ([]byte, []int) {
	return fileDescriptor_3a59d3b01672a8d0, []int{0}
}

func (m *AnalysisRun) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AnalysisRun.Unmarshal(m, b)
}
func (m *AnalysisRun) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AnalysisRun.Marshal(b, m, deterministic)
}
func (m *AnalysisRun) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AnalysisRun.Merge(m, src)
}
func (m *AnalysisRun) XXX_Size() int {
	return xxx_messageInfo_AnalysisRun.Size(m)
}
func (m *AnalysisRun) XXX_DiscardUnknown() {
	xxx_messageInfo_AnalysisRun.DiscardUnknown(m)
}

var xxx_messageInfo_AnalysisRun proto.InternalMessageInfo

func (m *AnalysisRun) GetGerritRevision() *v1.GerritRevision {
	if m != nil {
		return m.GerritRevision
	}
	return nil
}

func (m *AnalysisRun) GetRevisionNumber() int32 {
	if m != nil {
		return m.RevisionNumber
	}
	return 0
}

func (m *AnalysisRun) GetFiles() []*v1.Data_File {
	if m != nil {
		return m.Files
	}
	return nil
}

func (m *AnalysisRun) GetRequestedTime() *timestamp.Timestamp {
	if m != nil {
		return m.RequestedTime
	}
	return nil
}

func (m *AnalysisRun) GetResultPlatform() v1.Platform_Name {
	if m != nil {
		return m.ResultPlatform
	}
	return v1.Platform_ANY
}

func (m *AnalysisRun) GetResultState() v1.State {
	if m != nil {
		return m.ResultState
	}
	return v1.State_PENDING
}

func (m *AnalysisRun) GetComments() []*AnalysisRun_GerritComment {
	if m != nil {
		return m.Comments
	}
	return nil
}

type AnalysisRun_GerritComment struct {
	// The comment generated by the analysis run.
	Comment *v1.Data_Comment `protobuf:"bytes,1,opt,name=comment,proto3" json:"comment,omitempty"`
	// Comment creation time.
	//
	// Comment creation time in terms of when it is tracked in the service not
	// when it is created by the analyzer.
	CreatedTime *timestamp.Timestamp `protobuf:"bytes,2,opt,name=created_time,json=createdTime,proto3" json:"created_time,omitempty"`
	// Analyzer function name.
	//
	// e.g., "ClangTidy".
	Analyzer string `protobuf:"bytes,3,opt,name=analyzer,proto3" json:"analyzer,omitempty"`
	// Platforms this comment applies to.
	Platforms []v1.Platform_Name `protobuf:"varint,4,rep,packed,name=platforms,proto3,enum=tricium.Platform_Name" json:"platforms,omitempty"`
	// Has this comment been selected to be displayed on the review?
	// For example, comments outside of the changed lines are not included
	// (i.e. selected) in the results posted to the Gerrit change.
	Selected             bool     `protobuf:"varint,5,opt,name=selected,proto3" json:"selected,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AnalysisRun_GerritComment) Reset()         { *m = AnalysisRun_GerritComment{} }
func (m *AnalysisRun_GerritComment) String() string { return proto.CompactTextString(m) }
func (*AnalysisRun_GerritComment) ProtoMessage()    {}
func (*AnalysisRun_GerritComment) Descriptor() ([]byte, []int) {
	return fileDescriptor_3a59d3b01672a8d0, []int{0, 0}
}

func (m *AnalysisRun_GerritComment) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AnalysisRun_GerritComment.Unmarshal(m, b)
}
func (m *AnalysisRun_GerritComment) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AnalysisRun_GerritComment.Marshal(b, m, deterministic)
}
func (m *AnalysisRun_GerritComment) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AnalysisRun_GerritComment.Merge(m, src)
}
func (m *AnalysisRun_GerritComment) XXX_Size() int {
	return xxx_messageInfo_AnalysisRun_GerritComment.Size(m)
}
func (m *AnalysisRun_GerritComment) XXX_DiscardUnknown() {
	xxx_messageInfo_AnalysisRun_GerritComment.DiscardUnknown(m)
}

var xxx_messageInfo_AnalysisRun_GerritComment proto.InternalMessageInfo

func (m *AnalysisRun_GerritComment) GetComment() *v1.Data_Comment {
	if m != nil {
		return m.Comment
	}
	return nil
}

func (m *AnalysisRun_GerritComment) GetCreatedTime() *timestamp.Timestamp {
	if m != nil {
		return m.CreatedTime
	}
	return nil
}

func (m *AnalysisRun_GerritComment) GetAnalyzer() string {
	if m != nil {
		return m.Analyzer
	}
	return ""
}

func (m *AnalysisRun_GerritComment) GetPlatforms() []v1.Platform_Name {
	if m != nil {
		return m.Platforms
	}
	return nil
}

func (m *AnalysisRun_GerritComment) GetSelected() bool {
	if m != nil {
		return m.Selected
	}
	return false
}

func init() {
	proto.RegisterType((*AnalysisRun)(nil), "apibq.AnalysisRun")
	proto.RegisterType((*AnalysisRun_GerritComment)(nil), "apibq.AnalysisRun.GerritComment")
}

func init() {
	proto.RegisterFile("infra/tricium/api/bigquery/analyzer_results.proto", fileDescriptor_3a59d3b01672a8d0)
}

var fileDescriptor_3a59d3b01672a8d0 = []byte{
	// 435 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x92, 0xc1, 0x6e, 0xd4, 0x30,
	0x10, 0x40, 0x95, 0x6e, 0xd3, 0x6e, 0x9d, 0x36, 0x95, 0x2c, 0x01, 0x56, 0x2e, 0x8d, 0xca, 0x81,
	0x9c, 0x12, 0xed, 0xc2, 0x11, 0x04, 0x15, 0x08, 0x6e, 0x15, 0x32, 0xdc, 0x23, 0x67, 0x77, 0x36,
	0xb2, 0x14, 0x27, 0x59, 0xdb, 0xa9, 0x54, 0x7e, 0x80, 0xaf, 0xe5, 0x1f, 0x90, 0x1d, 0xdb, 0xb0,
	0x62, 0x45, 0x8f, 0x33, 0xf3, 0x66, 0x32, 0xf3, 0x62, 0xb4, 0xe2, 0xfd, 0x4e, 0xb2, 0x4a, 0x4b,
	0xbe, 0xe1, 0x93, 0xa8, 0xd8, 0xc8, 0xab, 0x86, 0xb7, 0xfb, 0x09, 0xe4, 0x63, 0xc5, 0x7a, 0xd6,
	0x3d, 0xfe, 0x00, 0x59, 0x4b, 0x50, 0x53, 0xa7, 0x55, 0x39, 0xca, 0x41, 0x0f, 0x38, 0x66, 0x23,
	0x6f, 0xf6, 0xd9, 0xcd, 0xbf, 0x9d, 0x0f, 0xab, 0x6a, 0xcb, 0x34, 0x9b, 0xb9, 0xec, 0xe5, 0x51,
	0x60, 0xec, 0x98, 0xde, 0x0d, 0x52, 0x38, 0xe8, 0xf6, 0x28, 0xe4, 0x42, 0xc7, 0xdc, 0xb4, 0xc3,
	0xd0, 0x76, 0x50, 0xd9, 0xa8, 0x99, 0x76, 0x95, 0xe6, 0x02, 0x94, 0x66, 0x62, 0x9c, 0x81, 0xdb,
	0x9f, 0x31, 0x4a, 0xee, 0xcc, 0xb2, 0x8a, 0x2b, 0x3a, 0xf5, 0xf8, 0x03, 0xba, 0x6e, 0x41, 0x4a,
	0xae, 0x6b, 0x09, 0x0f, 0x5c, 0xf1, 0xa1, 0x27, 0x51, 0x1e, 0x15, 0xc9, 0xfa, 0x45, 0xe9, 0x27,
	0x7f, 0xb1, 0x75, 0xea, 0xca, 0x34, 0x6d, 0x0f, 0x62, 0xfc, 0x0a, 0x5d, 0xfb, 0xd6, 0xba, 0x9f,
	0x44, 0x03, 0x92, 0x9c, 0xe4, 0x51, 0x11, 0xd3, 0xd4, 0xa7, 0xef, 0x6d, 0x16, 0x17, 0x28, 0xde,
	0xf1, 0x0e, 0x14, 0x59, 0xe4, 0x8b, 0x22, 0x59, 0xe3, 0xf0, 0x81, 0x4f, 0x46, 0xc4, 0x67, 0xde,
	0x01, 0x9d, 0x01, 0x7c, 0x87, 0x52, 0x09, 0xfb, 0x09, 0x94, 0x86, 0x6d, 0x6d, 0x2e, 0x20, 0xa7,
	0x76, 0xa7, 0xac, 0x9c, 0xcf, 0x2b, 0xfd, 0x79, 0xe5, 0x77, 0x7f, 0x1e, 0xbd, 0x0a, 0x1d, 0x26,
	0x87, 0xdf, 0x9b, 0xad, 0xcc, 0xaf, 0xa8, 0xbd, 0x45, 0x12, 0xe7, 0x51, 0x91, 0xae, 0x9f, 0x87,
	0xcf, 0x7e, 0xf5, 0x7a, 0xef, 0x99, 0x00, 0xb3, 0xad, 0xc1, 0x7d, 0x12, 0xaf, 0xd0, 0xa5, 0x1b,
	0xa0, 0x34, 0xd3, 0x40, 0xce, 0x6c, 0x77, 0x1a, 0xba, 0xbf, 0x99, 0x2c, 0x4d, 0x66, 0xc6, 0x06,
	0xf8, 0x2d, 0x5a, 0x6e, 0x06, 0x21, 0xa0, 0xd7, 0x8a, 0x9c, 0xdb, 0x1b, 0xf3, 0xd2, 0x3e, 0x80,
	0xf2, 0x2f, 0xe3, 0x4e, 0xe7, 0xc7, 0x19, 0xa4, 0xa1, 0x23, 0xfb, 0x15, 0xa1, 0xab, 0x83, 0x1a,
	0xae, 0xd0, 0xb9, 0xab, 0xba, 0x7f, 0xf2, 0xec, 0x50, 0x99, 0x9f, 0xe1, 0x29, 0xfc, 0x0e, 0x5d,
	0x6e, 0x24, 0xb0, 0x60, 0xed, 0xe4, 0x49, 0x6b, 0x89, 0xe3, 0xad, 0xb3, 0x0c, 0x2d, 0xfd, 0x3b,
	0x26, 0x8b, 0x3c, 0x2a, 0x2e, 0x68, 0x88, 0xf1, 0x1b, 0x74, 0xe1, 0x45, 0x2a, 0x72, 0x9a, 0x2f,
	0xfe, 0x63, 0xf2, 0x0f, 0x68, 0x26, 0x2a, 0xe8, 0x60, 0xa3, 0x61, 0x6b, 0xf5, 0x2f, 0x69, 0x88,
	0x9b, 0x33, 0xbb, 0xce, 0xeb, 0xdf, 0x01, 0x00, 0x00, 0xff, 0xff, 0x4a, 0x3a, 0xca, 0x55, 0x57,
	0x03, 0x00, 0x00,
}
