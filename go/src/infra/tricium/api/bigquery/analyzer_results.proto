// Copyright 2019 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

syntax = "proto3";

package apibq;

import "infra/tricium/api/v1/data.proto";
import "infra/tricium/api/v1/platform.proto";
import "infra/tricium/api/v1/tricium.proto";
import "google/protobuf/timestamp.proto";

message AnalysisRun {
  message GerritComment {
    // The comment generated by the analysis run.
    tricium.Data.Comment comment = 1;

    // Comment creation time.
    //
    // Comment creation time in terms of when it is tracked in the service not
    // when it is created by the analyzer.
    google.protobuf.Timestamp created_time = 2;

    // Analyzer function name.
    //
    // e.g., "ClangTidy".
    string analyzer = 3;

    // Platforms this comment applies to.
    repeated tricium.Platform.Name platforms = 4;

    // Has this comment been selected to be displayed on the review?
    // For example, comments outside of the changed lines are not included
    // (i.e. selected) in the results posted to the Gerrit change.
    bool selected = 5;
  }

  // The revision information for the Gerrit change being analyzed by this
  // analysis run.
  tricium.GerritRevision gerrit_revision = 1;

  // The revision number. In Gerrit this is the change revision and is
  // displayed as the patchset number in PolyGerrit.
  int32 revision_number = 2;

  // All files in the change revision analyzed by the run.
  repeated tricium.Data.File files = 3;

  // Time when the request was received.
  google.protobuf.Timestamp requested_time = 4;

  // Platform for which the result applies.
  tricium.Platform.Name result_platform = 5;

  // Overall state for the run result. As results are only sent after
  // completion PENDING and RUNNING would never be used.
  tricium.State result_state = 6;

  // Comments added to Gerrit during this analysis run.
  repeated GerritComment comments = 7;
}
