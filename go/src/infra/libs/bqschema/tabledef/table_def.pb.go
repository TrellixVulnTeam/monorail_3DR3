// Code generated by protoc-gen-go. DO NOT EDIT.
// source: infra/libs/bqschema/tabledef/table_def.proto

package tabledef

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Type int32

const (
	Type_STRING    Type = 0
	Type_BYTES     Type = 1
	Type_INTEGER   Type = 2
	Type_FLOAT     Type = 3
	Type_BOOLEAN   Type = 4
	Type_TIMESTAMP Type = 5
	Type_RECORD    Type = 6
	Type_DATE      Type = 7
	Type_TIME      Type = 8
	Type_DATETIME  Type = 9
)

var Type_name = map[int32]string{
	0: "STRING",
	1: "BYTES",
	2: "INTEGER",
	3: "FLOAT",
	4: "BOOLEAN",
	5: "TIMESTAMP",
	6: "RECORD",
	7: "DATE",
	8: "TIME",
	9: "DATETIME",
}

var Type_value = map[string]int32{
	"STRING":    0,
	"BYTES":     1,
	"INTEGER":   2,
	"FLOAT":     3,
	"BOOLEAN":   4,
	"TIMESTAMP": 5,
	"RECORD":    6,
	"DATE":      7,
	"TIME":      8,
	"DATETIME":  9,
}

func (x Type) String() string {
	return proto.EnumName(Type_name, int32(x))
}

func (Type) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_39066d2eb00de675, []int{0}
}

type TableDef struct {
	// Name of the dataset.
	DatasetId string `protobuf:"bytes,1,opt,name=dataset_id,json=datasetId,proto3" json:"dataset_id,omitempty"`
	// Name of the table.
	TableId string `protobuf:"bytes,2,opt,name=table_id,json=tableId,proto3" json:"table_id,omitempty"`
	// Human-readable name of the table. (optional)
	Name string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	// Human-readable description of the table. (optional)
	Description string         `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`
	Fields      []*FieldSchema `protobuf:"bytes,5,rep,name=fields,proto3" json:"fields,omitempty"`
	// Whether to partition the table by day.
	PartitionTable bool `protobuf:"varint,6,opt,name=partition_table,json=partitionTable,proto3" json:"partition_table,omitempty"`
	// The lifetime for each partition. If zero, partitions do not expire.
	// Ignored if partition_table is false. (optional)
	PartitionExpirationSeconds int64    `protobuf:"varint,7,opt,name=partition_expiration_seconds,json=partitionExpirationSeconds,proto3" json:"partition_expiration_seconds,omitempty"`
	XXX_NoUnkeyedLiteral       struct{} `json:"-"`
	XXX_unrecognized           []byte   `json:"-"`
	XXX_sizecache              int32    `json:"-"`
}

func (m *TableDef) Reset()         { *m = TableDef{} }
func (m *TableDef) String() string { return proto.CompactTextString(m) }
func (*TableDef) ProtoMessage()    {}
func (*TableDef) Descriptor() ([]byte, []int) {
	return fileDescriptor_39066d2eb00de675, []int{0}
}

func (m *TableDef) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TableDef.Unmarshal(m, b)
}
func (m *TableDef) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TableDef.Marshal(b, m, deterministic)
}
func (m *TableDef) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TableDef.Merge(m, src)
}
func (m *TableDef) XXX_Size() int {
	return xxx_messageInfo_TableDef.Size(m)
}
func (m *TableDef) XXX_DiscardUnknown() {
	xxx_messageInfo_TableDef.DiscardUnknown(m)
}

var xxx_messageInfo_TableDef proto.InternalMessageInfo

func (m *TableDef) GetDatasetId() string {
	if m != nil {
		return m.DatasetId
	}
	return ""
}

func (m *TableDef) GetTableId() string {
	if m != nil {
		return m.TableId
	}
	return ""
}

func (m *TableDef) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *TableDef) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *TableDef) GetFields() []*FieldSchema {
	if m != nil {
		return m.Fields
	}
	return nil
}

func (m *TableDef) GetPartitionTable() bool {
	if m != nil {
		return m.PartitionTable
	}
	return false
}

func (m *TableDef) GetPartitionExpirationSeconds() int64 {
	if m != nil {
		return m.PartitionExpirationSeconds
	}
	return 0
}

type FieldSchema struct {
	// Name of the field/column.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Human-readable description of the field. (optional)
	Description          string         `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	IsRepeated           bool           `protobuf:"varint,3,opt,name=is_repeated,json=isRepeated,proto3" json:"is_repeated,omitempty"`
	IsRequired           bool           `protobuf:"varint,4,opt,name=is_required,json=isRequired,proto3" json:"is_required,omitempty"`
	Type                 Type           `protobuf:"varint,5,opt,name=type,proto3,enum=tabledef.Type" json:"type,omitempty"`
	Schema               []*FieldSchema `protobuf:"bytes,6,rep,name=schema,proto3" json:"schema,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *FieldSchema) Reset()         { *m = FieldSchema{} }
func (m *FieldSchema) String() string { return proto.CompactTextString(m) }
func (*FieldSchema) ProtoMessage()    {}
func (*FieldSchema) Descriptor() ([]byte, []int) {
	return fileDescriptor_39066d2eb00de675, []int{1}
}

func (m *FieldSchema) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FieldSchema.Unmarshal(m, b)
}
func (m *FieldSchema) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FieldSchema.Marshal(b, m, deterministic)
}
func (m *FieldSchema) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FieldSchema.Merge(m, src)
}
func (m *FieldSchema) XXX_Size() int {
	return xxx_messageInfo_FieldSchema.Size(m)
}
func (m *FieldSchema) XXX_DiscardUnknown() {
	xxx_messageInfo_FieldSchema.DiscardUnknown(m)
}

var xxx_messageInfo_FieldSchema proto.InternalMessageInfo

func (m *FieldSchema) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *FieldSchema) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *FieldSchema) GetIsRepeated() bool {
	if m != nil {
		return m.IsRepeated
	}
	return false
}

func (m *FieldSchema) GetIsRequired() bool {
	if m != nil {
		return m.IsRequired
	}
	return false
}

func (m *FieldSchema) GetType() Type {
	if m != nil {
		return m.Type
	}
	return Type_STRING
}

func (m *FieldSchema) GetSchema() []*FieldSchema {
	if m != nil {
		return m.Schema
	}
	return nil
}

func init() {
	proto.RegisterEnum("tabledef.Type", Type_name, Type_value)
	proto.RegisterType((*TableDef)(nil), "tabledef.TableDef")
	proto.RegisterType((*FieldSchema)(nil), "tabledef.FieldSchema")
}

func init() {
	proto.RegisterFile("infra/libs/bqschema/tabledef/table_def.proto", fileDescriptor_39066d2eb00de675)
}

var fileDescriptor_39066d2eb00de675 = []byte{
	// 424 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x92, 0x51, 0x8b, 0xd3, 0x40,
	0x10, 0xc7, 0x4d, 0x9b, 0xa6, 0xc9, 0x44, 0xeb, 0xb2, 0x20, 0x44, 0x51, 0x0c, 0x7d, 0x31, 0x88,
	0xb6, 0x70, 0x7e, 0x01, 0x7b, 0x36, 0x77, 0x04, 0xee, 0x5a, 0xd9, 0xec, 0x8b, 0x4f, 0x65, 0xdb,
	0x9d, 0xe0, 0x42, 0xaf, 0xcd, 0x65, 0x57, 0xf0, 0x9e, 0xfc, 0x12, 0x7e, 0x38, 0x3f, 0x8e, 0xec,
	0x26, 0x97, 0x2b, 0x88, 0xf7, 0x36, 0xf3, 0x9b, 0xdf, 0x94, 0x9d, 0x7f, 0x03, 0x1f, 0xd4, 0xa1,
	0x6a, 0xc4, 0x7c, 0xaf, 0xb6, 0x7a, 0xbe, 0xbd, 0xd5, 0xbb, 0xef, 0x78, 0x23, 0xe6, 0x46, 0x6c,
	0xf7, 0x28, 0xb1, 0x6a, 0x8b, 0x8d, 0xc4, 0x6a, 0x56, 0x37, 0x47, 0x73, 0xa4, 0xe1, 0xfd, 0x64,
	0xfa, 0x7b, 0x00, 0x21, 0xb7, 0xcd, 0x12, 0x2b, 0xfa, 0x06, 0x40, 0x0a, 0x23, 0x34, 0x9a, 0x8d,
	0x92, 0x89, 0x97, 0x7a, 0x59, 0xc4, 0xa2, 0x8e, 0x14, 0x92, 0xbe, 0x84, 0x76, 0xcf, 0x0e, 0x07,
	0x6e, 0x38, 0x76, 0x7d, 0x21, 0x29, 0x05, 0xff, 0x20, 0x6e, 0x30, 0x19, 0x3a, 0xec, 0x6a, 0x9a,
	0x42, 0x2c, 0x51, 0xef, 0x1a, 0x55, 0x1b, 0x75, 0x3c, 0x24, 0xbe, 0x1b, 0x9d, 0x22, 0xfa, 0x11,
	0x82, 0x4a, 0xe1, 0x5e, 0xea, 0x64, 0x94, 0x0e, 0xb3, 0xf8, 0xec, 0xc5, 0xec, 0xfe, 0x5d, 0xb3,
	0x0b, 0xcb, 0x4b, 0x77, 0x06, 0xeb, 0x24, 0xfa, 0x0e, 0x9e, 0xd7, 0xa2, 0x31, 0xca, 0xee, 0x6e,
	0x9c, 0x99, 0x04, 0xa9, 0x97, 0x85, 0x6c, 0xd2, 0x63, 0x77, 0x0a, 0xfd, 0x0c, 0xaf, 0x1f, 0x44,
	0xfc, 0x59, 0xab, 0x46, 0xb8, 0x52, 0xe3, 0xee, 0x78, 0x90, 0x3a, 0x19, 0xa7, 0x5e, 0x36, 0x64,
	0xaf, 0x7a, 0x27, 0xef, 0x95, 0xb2, 0x35, 0xa6, 0x7f, 0x3c, 0x88, 0x4f, 0x9e, 0xd0, 0xdf, 0xe7,
	0xfd, 0xff, 0xbe, 0xc1, 0xbf, 0xf7, 0xbd, 0x85, 0x58, 0xe9, 0x4d, 0x83, 0x35, 0x0a, 0x83, 0xd2,
	0x85, 0x13, 0x32, 0x50, 0x9a, 0x75, 0xa4, 0x17, 0x6e, 0x7f, 0xa8, 0x06, 0xa5, 0x8b, 0xa8, 0x13,
	0x5a, 0x42, 0xa7, 0xe0, 0x9b, 0xbb, 0x1a, 0x93, 0x51, 0xea, 0x65, 0x93, 0xb3, 0xc9, 0x43, 0x3e,
	0xfc, 0xae, 0x46, 0xe6, 0x66, 0x36, 0xc5, 0xf6, 0xff, 0x4e, 0x82, 0x47, 0x53, 0x6c, 0xa5, 0xf7,
	0xbf, 0xc0, 0xb7, 0xcb, 0x14, 0x20, 0x28, 0x39, 0x2b, 0x56, 0x97, 0xe4, 0x09, 0x8d, 0x60, 0x74,
	0xfe, 0x8d, 0xe7, 0x25, 0xf1, 0x68, 0x0c, 0xe3, 0x62, 0xc5, 0xf3, 0xcb, 0x9c, 0x91, 0x81, 0xe5,
	0x17, 0x57, 0xeb, 0x05, 0x27, 0x43, 0xcb, 0xcf, 0xd7, 0xeb, 0xab, 0x7c, 0xb1, 0x22, 0x3e, 0x7d,
	0x06, 0x11, 0x2f, 0xae, 0xf3, 0x92, 0x2f, 0xae, 0xbf, 0x92, 0x91, 0xfd, 0x29, 0x96, 0x7f, 0x59,
	0xb3, 0x25, 0x09, 0x68, 0x08, 0xfe, 0x72, 0xc1, 0x73, 0x32, 0xb6, 0x95, 0x95, 0x48, 0x48, 0x9f,
	0x42, 0x68, 0x99, 0xeb, 0xa2, 0x6d, 0xe0, 0xbe, 0xc1, 0x4f, 0x7f, 0x03, 0x00, 0x00, 0xff, 0xff,
	0x75, 0x72, 0x1b, 0xc5, 0xb3, 0x02, 0x00, 0x00,
}
