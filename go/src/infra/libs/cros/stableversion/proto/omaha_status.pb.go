// Code generated by protoc-gen-go. DO NOT EDIT.
// source: omaha_status.proto

package stableversion

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// NEXT TAG: 2
type OmahaDatas struct {
	OmahaData            []*OmahaData `protobuf:"bytes,1,rep,name=omaha_data,json=omahaData,proto3" json:"omaha_data,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *OmahaDatas) Reset()         { *m = OmahaDatas{} }
func (m *OmahaDatas) String() string { return proto.CompactTextString(m) }
func (*OmahaDatas) ProtoMessage()    {}
func (*OmahaDatas) Descriptor() ([]byte, []int) {
	return fileDescriptor_5ad07a6d77818617, []int{0}
}

func (m *OmahaDatas) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_OmahaDatas.Unmarshal(m, b)
}
func (m *OmahaDatas) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_OmahaDatas.Marshal(b, m, deterministic)
}
func (m *OmahaDatas) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OmahaDatas.Merge(m, src)
}
func (m *OmahaDatas) XXX_Size() int {
	return xxx_messageInfo_OmahaDatas.Size(m)
}
func (m *OmahaDatas) XXX_DiscardUnknown() {
	xxx_messageInfo_OmahaDatas.DiscardUnknown(m)
}

var xxx_messageInfo_OmahaDatas proto.InternalMessageInfo

func (m *OmahaDatas) GetOmahaData() []*OmahaData {
	if m != nil {
		return m.OmahaData
	}
	return nil
}

// NEXT TAG: 9
type OmahaData struct {
	Board                *Board     `protobuf:"bytes,1,opt,name=board,proto3" json:"board,omitempty"`
	Channel              string     `protobuf:"bytes,2,opt,name=channel,proto3" json:"channel,omitempty"`
	ChromeOsVersion      string     `protobuf:"bytes,3,opt,name=chrome_os_version,json=chromeOsVersion,proto3" json:"chrome_os_version,omitempty"`
	ChromeVersion        string     `protobuf:"bytes,4,opt,name=chrome_version,json=chromeVersion,proto3" json:"chrome_version,omitempty"`
	Keyset               string     `protobuf:"bytes,5,opt,name=keyset,proto3" json:"keyset,omitempty"`
	IsMpKeyset           bool       `protobuf:"varint,6,opt,name=is_mp_keyset,json=isMpKeyset,proto3" json:"is_mp_keyset,omitempty"`
	Payloads             []*Payload `protobuf:"bytes,7,rep,name=payloads,proto3" json:"payloads,omitempty"`
	Milestone            int32      `protobuf:"varint,8,opt,name=milestone,proto3" json:"milestone,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *OmahaData) Reset()         { *m = OmahaData{} }
func (m *OmahaData) String() string { return proto.CompactTextString(m) }
func (*OmahaData) ProtoMessage()    {}
func (*OmahaData) Descriptor() ([]byte, []int) {
	return fileDescriptor_5ad07a6d77818617, []int{1}
}

func (m *OmahaData) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_OmahaData.Unmarshal(m, b)
}
func (m *OmahaData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_OmahaData.Marshal(b, m, deterministic)
}
func (m *OmahaData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OmahaData.Merge(m, src)
}
func (m *OmahaData) XXX_Size() int {
	return xxx_messageInfo_OmahaData.Size(m)
}
func (m *OmahaData) XXX_DiscardUnknown() {
	xxx_messageInfo_OmahaData.DiscardUnknown(m)
}

var xxx_messageInfo_OmahaData proto.InternalMessageInfo

func (m *OmahaData) GetBoard() *Board {
	if m != nil {
		return m.Board
	}
	return nil
}

func (m *OmahaData) GetChannel() string {
	if m != nil {
		return m.Channel
	}
	return ""
}

func (m *OmahaData) GetChromeOsVersion() string {
	if m != nil {
		return m.ChromeOsVersion
	}
	return ""
}

func (m *OmahaData) GetChromeVersion() string {
	if m != nil {
		return m.ChromeVersion
	}
	return ""
}

func (m *OmahaData) GetKeyset() string {
	if m != nil {
		return m.Keyset
	}
	return ""
}

func (m *OmahaData) GetIsMpKeyset() bool {
	if m != nil {
		return m.IsMpKeyset
	}
	return false
}

func (m *OmahaData) GetPayloads() []*Payload {
	if m != nil {
		return m.Payloads
	}
	return nil
}

func (m *OmahaData) GetMilestone() int32 {
	if m != nil {
		return m.Milestone
	}
	return 0
}

// NEXT TAG: 3
type Board struct {
	PublicCodename       string   `protobuf:"bytes,1,opt,name=public_codename,json=publicCodename,proto3" json:"public_codename,omitempty"`
	IsActive             bool     `protobuf:"varint,2,opt,name=is_active,json=isActive,proto3" json:"is_active,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Board) Reset()         { *m = Board{} }
func (m *Board) String() string { return proto.CompactTextString(m) }
func (*Board) ProtoMessage()    {}
func (*Board) Descriptor() ([]byte, []int) {
	return fileDescriptor_5ad07a6d77818617, []int{2}
}

func (m *Board) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Board.Unmarshal(m, b)
}
func (m *Board) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Board.Marshal(b, m, deterministic)
}
func (m *Board) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Board.Merge(m, src)
}
func (m *Board) XXX_Size() int {
	return xxx_messageInfo_Board.Size(m)
}
func (m *Board) XXX_DiscardUnknown() {
	xxx_messageInfo_Board.DiscardUnknown(m)
}

var xxx_messageInfo_Board proto.InternalMessageInfo

func (m *Board) GetPublicCodename() string {
	if m != nil {
		return m.PublicCodename
	}
	return ""
}

func (m *Board) GetIsActive() bool {
	if m != nil {
		return m.IsActive
	}
	return false
}

// NEXT TAG: 4
type Payload struct {
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Fraction             float32  `protobuf:"fixed32,2,opt,name=fraction,proto3" json:"fraction,omitempty"`
	MaxFraction          bool     `protobuf:"varint,3,opt,name=max_fraction,json=maxFraction,proto3" json:"max_fraction,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Payload) Reset()         { *m = Payload{} }
func (m *Payload) String() string { return proto.CompactTextString(m) }
func (*Payload) ProtoMessage()    {}
func (*Payload) Descriptor() ([]byte, []int) {
	return fileDescriptor_5ad07a6d77818617, []int{3}
}

func (m *Payload) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Payload.Unmarshal(m, b)
}
func (m *Payload) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Payload.Marshal(b, m, deterministic)
}
func (m *Payload) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Payload.Merge(m, src)
}
func (m *Payload) XXX_Size() int {
	return xxx_messageInfo_Payload.Size(m)
}
func (m *Payload) XXX_DiscardUnknown() {
	xxx_messageInfo_Payload.DiscardUnknown(m)
}

var xxx_messageInfo_Payload proto.InternalMessageInfo

func (m *Payload) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Payload) GetFraction() float32 {
	if m != nil {
		return m.Fraction
	}
	return 0
}

func (m *Payload) GetMaxFraction() bool {
	if m != nil {
		return m.MaxFraction
	}
	return false
}

func init() {
	proto.RegisterType((*OmahaDatas)(nil), "chrome.chromeos_infra.cros.stableversion.OmahaDatas")
	proto.RegisterType((*OmahaData)(nil), "chrome.chromeos_infra.cros.stableversion.OmahaData")
	proto.RegisterType((*Board)(nil), "chrome.chromeos_infra.cros.stableversion.Board")
	proto.RegisterType((*Payload)(nil), "chrome.chromeos_infra.cros.stableversion.Payload")
}

func init() {
	proto.RegisterFile("omaha_status.proto", fileDescriptor_5ad07a6d77818617)
}

var fileDescriptor_5ad07a6d77818617 = []byte{
	// 386 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x92, 0xcd, 0x8e, 0xd3, 0x30,
	0x10, 0xc7, 0x95, 0x76, 0xd3, 0x26, 0xd3, 0xdd, 0xad, 0xf0, 0x01, 0x59, 0xc0, 0x21, 0x44, 0x42,
	0x44, 0x1c, 0x82, 0xd8, 0x7d, 0x02, 0x96, 0x8f, 0x0b, 0xaa, 0x16, 0xf9, 0xc0, 0x01, 0x21, 0x99,
	0x49, 0xe2, 0xaa, 0x16, 0x49, 0x1c, 0x65, 0xdc, 0xaa, 0x7d, 0x61, 0x9e, 0x03, 0xd5, 0x4e, 0x02,
	0xdc, 0x7a, 0x8a, 0xe7, 0xff, 0xf1, 0x53, 0x3c, 0x32, 0x30, 0xd3, 0xe0, 0x0e, 0x25, 0x59, 0xb4,
	0x7b, 0xca, 0xbb, 0xde, 0x58, 0xc3, 0xb2, 0x72, 0xd7, 0x9b, 0x46, 0xe5, 0xfe, 0x63, 0x48, 0xea,
	0x76, 0xdb, 0x63, 0x5e, 0xf6, 0x86, 0x72, 0xb2, 0x58, 0xd4, 0xea, 0xa0, 0x7a, 0xd2, 0xa6, 0x4d,
	0x7f, 0x02, 0x3c, 0x9e, 0xfb, 0x1f, 0xd1, 0x22, 0x31, 0x01, 0xe0, 0x69, 0x15, 0x5a, 0xe4, 0x41,
	0x32, 0xcf, 0x56, 0x77, 0xf7, 0xf9, 0xa5, 0xb0, 0x7c, 0x22, 0x89, 0xd8, 0x8c, 0xc7, 0xf4, 0xf7,
	0x0c, 0xe2, 0xc9, 0x60, 0x9f, 0x20, 0x2c, 0x0c, 0xf6, 0x15, 0x0f, 0x92, 0x20, 0x5b, 0xdd, 0xbd,
	0xbd, 0x1c, 0xfe, 0x70, 0xae, 0x09, 0xdf, 0x66, 0x1c, 0x96, 0xe5, 0x0e, 0xdb, 0x56, 0xd5, 0x7c,
	0x96, 0x04, 0x59, 0x2c, 0xc6, 0x91, 0xbd, 0x81, 0x27, 0x9e, 0x25, 0x0d, 0xc9, 0xa1, 0xcb, 0xe7,
	0x2e, 0xb3, 0xf6, 0xc6, 0x23, 0x7d, 0xf3, 0x32, 0x7b, 0x05, 0xb7, 0x43, 0x76, 0x0c, 0x5e, 0xb9,
	0xe0, 0x8d, 0x57, 0xc7, 0xd8, 0x53, 0x58, 0xfc, 0x52, 0x27, 0x52, 0x96, 0x87, 0xce, 0x1e, 0x26,
	0x96, 0xc0, 0xb5, 0x26, 0xd9, 0x74, 0x72, 0x70, 0x17, 0x49, 0x90, 0x45, 0x02, 0x34, 0x6d, 0xba,
	0x2f, 0x3e, 0xb1, 0x81, 0xa8, 0xc3, 0x53, 0x6d, 0xb0, 0x22, 0xbe, 0x74, 0xdb, 0x7c, 0x77, 0xf9,
	0x85, 0xbf, 0xfa, 0xa6, 0x98, 0x10, 0xec, 0x05, 0xc4, 0x8d, 0xae, 0x15, 0x59, 0xd3, 0x2a, 0x1e,
	0x25, 0x41, 0x16, 0x8a, 0xbf, 0x42, 0xba, 0x81, 0xd0, 0xed, 0x88, 0xbd, 0x86, 0x75, 0xb7, 0x2f,
	0x6a, 0x5d, 0xca, 0xd2, 0x54, 0xaa, 0xc5, 0x46, 0xb9, 0x6d, 0xc7, 0xe2, 0xd6, 0xcb, 0x1f, 0x06,
	0x95, 0x3d, 0x87, 0x58, 0x93, 0xc4, 0xd2, 0xea, 0x83, 0x72, 0x7b, 0x8c, 0x44, 0xa4, 0xe9, 0xbd,
	0x9b, 0xd3, 0x1f, 0xb0, 0x1c, 0xfe, 0x80, 0x31, 0xb8, 0xfa, 0x87, 0xe2, 0xce, 0xec, 0x19, 0x44,
	0xdb, 0xfe, 0x5c, 0x35, 0xad, 0xab, 0xce, 0xc4, 0x34, 0xb3, 0x97, 0x70, 0xdd, 0xe0, 0x51, 0x4e,
	0xfe, 0xdc, 0xa1, 0x57, 0x0d, 0x1e, 0x3f, 0x0f, 0xd2, 0xc3, 0xfa, 0xfb, 0xcd, 0x7f, 0xb7, 0x2d,
	0x16, 0xee, 0xe5, 0xde, 0xff, 0x09, 0x00, 0x00, 0xff, 0xff, 0x8e, 0xb0, 0xc7, 0xb9, 0xcf, 0x02,
	0x00, 0x00,
}
