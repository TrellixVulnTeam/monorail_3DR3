// Code generated by protoc-gen-go. DO NOT EDIT.
// source: infra/unifiedfleet/api/v1/rpc/fleet.proto

package ufspb

import prpc "go.chromium.org/luci/grpc/prpc"

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	status "google.golang.org/genproto/googleapis/rpc/status"
	field_mask "google.golang.org/genproto/protobuf/field_mask"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status1 "google.golang.org/grpc/status"
	proto1 "infra/unifiedfleet/api/v1/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Contains the required information for creating a ChromePlatform represented in
// the database.
type CreateChromePlatformRequest struct {
	// The chromePlatform to create.
	ChromePlatform *proto1.ChromePlatform `protobuf:"bytes,1,opt,name=chromePlatform,proto3" json:"chromePlatform,omitempty"`
	// The ID to use for the ChromePlatform, which will become the final component of
	// the ChromePlatform's resource name.
	//
	// This value should follow the regex "^[a-zA-Z0-9-_]{4,63}$" (4-63 characters,
	// contains only ASCII letters, numbers, dash and underscore.
	ChromePlatformId     string   `protobuf:"bytes,2,opt,name=chromePlatform_id,json=chromePlatformId,proto3" json:"chromePlatform_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CreateChromePlatformRequest) Reset()         { *m = CreateChromePlatformRequest{} }
func (m *CreateChromePlatformRequest) String() string { return proto.CompactTextString(m) }
func (*CreateChromePlatformRequest) ProtoMessage()    {}
func (*CreateChromePlatformRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_bfc37a625f56a717, []int{0}
}

func (m *CreateChromePlatformRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CreateChromePlatformRequest.Unmarshal(m, b)
}
func (m *CreateChromePlatformRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CreateChromePlatformRequest.Marshal(b, m, deterministic)
}
func (m *CreateChromePlatformRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateChromePlatformRequest.Merge(m, src)
}
func (m *CreateChromePlatformRequest) XXX_Size() int {
	return xxx_messageInfo_CreateChromePlatformRequest.Size(m)
}
func (m *CreateChromePlatformRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateChromePlatformRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CreateChromePlatformRequest proto.InternalMessageInfo

func (m *CreateChromePlatformRequest) GetChromePlatform() *proto1.ChromePlatform {
	if m != nil {
		return m.ChromePlatform
	}
	return nil
}

func (m *CreateChromePlatformRequest) GetChromePlatformId() string {
	if m != nil {
		return m.ChromePlatformId
	}
	return ""
}

type UpdateChromePlatformRequest struct {
	// The chromePlatform to update.
	ChromePlatform *proto1.ChromePlatform `protobuf:"bytes,1,opt,name=chromePlatform,proto3" json:"chromePlatform,omitempty"`
	// The list of fields to be updated.
	UpdateMask           *field_mask.FieldMask `protobuf:"bytes,2,opt,name=update_mask,json=updateMask,proto3" json:"update_mask,omitempty"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *UpdateChromePlatformRequest) Reset()         { *m = UpdateChromePlatformRequest{} }
func (m *UpdateChromePlatformRequest) String() string { return proto.CompactTextString(m) }
func (*UpdateChromePlatformRequest) ProtoMessage()    {}
func (*UpdateChromePlatformRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_bfc37a625f56a717, []int{1}
}

func (m *UpdateChromePlatformRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UpdateChromePlatformRequest.Unmarshal(m, b)
}
func (m *UpdateChromePlatformRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UpdateChromePlatformRequest.Marshal(b, m, deterministic)
}
func (m *UpdateChromePlatformRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateChromePlatformRequest.Merge(m, src)
}
func (m *UpdateChromePlatformRequest) XXX_Size() int {
	return xxx_messageInfo_UpdateChromePlatformRequest.Size(m)
}
func (m *UpdateChromePlatformRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateChromePlatformRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateChromePlatformRequest proto.InternalMessageInfo

func (m *UpdateChromePlatformRequest) GetChromePlatform() *proto1.ChromePlatform {
	if m != nil {
		return m.ChromePlatform
	}
	return nil
}

func (m *UpdateChromePlatformRequest) GetUpdateMask() *field_mask.FieldMask {
	if m != nil {
		return m.UpdateMask
	}
	return nil
}

type GetChromePlatformRequest struct {
	// The name of the chromePlatform to retrieve.
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetChromePlatformRequest) Reset()         { *m = GetChromePlatformRequest{} }
func (m *GetChromePlatformRequest) String() string { return proto.CompactTextString(m) }
func (*GetChromePlatformRequest) ProtoMessage()    {}
func (*GetChromePlatformRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_bfc37a625f56a717, []int{2}
}

func (m *GetChromePlatformRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetChromePlatformRequest.Unmarshal(m, b)
}
func (m *GetChromePlatformRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetChromePlatformRequest.Marshal(b, m, deterministic)
}
func (m *GetChromePlatformRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetChromePlatformRequest.Merge(m, src)
}
func (m *GetChromePlatformRequest) XXX_Size() int {
	return xxx_messageInfo_GetChromePlatformRequest.Size(m)
}
func (m *GetChromePlatformRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetChromePlatformRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetChromePlatformRequest proto.InternalMessageInfo

func (m *GetChromePlatformRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type ListChromePlatformsRequest struct {
	// The maximum number of chromePlatforms to return. The service may return fewer than
	// this value.
	// If unspecified, at most 100 chromePlatforms will be returned.
	// The maximum value is 1000; values above 1000 will be coerced to 1000.
	PageSize int32 `protobuf:"varint,1,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// A page token, received from a previous `ListChromePlatforms` call.
	// Provide this to retrieve the subsequent page.
	//
	// When paginating, all other parameters provided to `ListChromePlatforms` must match
	// the call that provided the page token.
	PageToken            string   `protobuf:"bytes,2,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ListChromePlatformsRequest) Reset()         { *m = ListChromePlatformsRequest{} }
func (m *ListChromePlatformsRequest) String() string { return proto.CompactTextString(m) }
func (*ListChromePlatformsRequest) ProtoMessage()    {}
func (*ListChromePlatformsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_bfc37a625f56a717, []int{3}
}

func (m *ListChromePlatformsRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListChromePlatformsRequest.Unmarshal(m, b)
}
func (m *ListChromePlatformsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListChromePlatformsRequest.Marshal(b, m, deterministic)
}
func (m *ListChromePlatformsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListChromePlatformsRequest.Merge(m, src)
}
func (m *ListChromePlatformsRequest) XXX_Size() int {
	return xxx_messageInfo_ListChromePlatformsRequest.Size(m)
}
func (m *ListChromePlatformsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ListChromePlatformsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ListChromePlatformsRequest proto.InternalMessageInfo

func (m *ListChromePlatformsRequest) GetPageSize() int32 {
	if m != nil {
		return m.PageSize
	}
	return 0
}

func (m *ListChromePlatformsRequest) GetPageToken() string {
	if m != nil {
		return m.PageToken
	}
	return ""
}

type ListChromePlatformsResponse struct {
	// The chromePlatforms from datastore.
	ChromePlatforms []*proto1.ChromePlatform `protobuf:"bytes,1,rep,name=chromePlatforms,proto3" json:"chromePlatforms,omitempty"`
	// A token, which can be sent as `page_token` to retrieve the next page.
	// If this field is omitted, there are no subsequent pages.
	NextPageToken        string   `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ListChromePlatformsResponse) Reset()         { *m = ListChromePlatformsResponse{} }
func (m *ListChromePlatformsResponse) String() string { return proto.CompactTextString(m) }
func (*ListChromePlatformsResponse) ProtoMessage()    {}
func (*ListChromePlatformsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_bfc37a625f56a717, []int{4}
}

func (m *ListChromePlatformsResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListChromePlatformsResponse.Unmarshal(m, b)
}
func (m *ListChromePlatformsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListChromePlatformsResponse.Marshal(b, m, deterministic)
}
func (m *ListChromePlatformsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListChromePlatformsResponse.Merge(m, src)
}
func (m *ListChromePlatformsResponse) XXX_Size() int {
	return xxx_messageInfo_ListChromePlatformsResponse.Size(m)
}
func (m *ListChromePlatformsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ListChromePlatformsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ListChromePlatformsResponse proto.InternalMessageInfo

func (m *ListChromePlatformsResponse) GetChromePlatforms() []*proto1.ChromePlatform {
	if m != nil {
		return m.ChromePlatforms
	}
	return nil
}

func (m *ListChromePlatformsResponse) GetNextPageToken() string {
	if m != nil {
		return m.NextPageToken
	}
	return ""
}

type DeleteChromePlatformRequest struct {
	// The name of the ChromePlatform to delete
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DeleteChromePlatformRequest) Reset()         { *m = DeleteChromePlatformRequest{} }
func (m *DeleteChromePlatformRequest) String() string { return proto.CompactTextString(m) }
func (*DeleteChromePlatformRequest) ProtoMessage()    {}
func (*DeleteChromePlatformRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_bfc37a625f56a717, []int{5}
}

func (m *DeleteChromePlatformRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DeleteChromePlatformRequest.Unmarshal(m, b)
}
func (m *DeleteChromePlatformRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DeleteChromePlatformRequest.Marshal(b, m, deterministic)
}
func (m *DeleteChromePlatformRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteChromePlatformRequest.Merge(m, src)
}
func (m *DeleteChromePlatformRequest) XXX_Size() int {
	return xxx_messageInfo_DeleteChromePlatformRequest.Size(m)
}
func (m *DeleteChromePlatformRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteChromePlatformRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteChromePlatformRequest proto.InternalMessageInfo

func (m *DeleteChromePlatformRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type ImportChromePlatformsRequest struct {
	// Types that are valid to be assigned to Source:
	//	*ImportChromePlatformsRequest_MachineDbSource
	//	*ImportChromePlatformsRequest_ConfigSource
	Source               isImportChromePlatformsRequest_Source `protobuf_oneof:"source"`
	XXX_NoUnkeyedLiteral struct{}                              `json:"-"`
	XXX_unrecognized     []byte                                `json:"-"`
	XXX_sizecache        int32                                 `json:"-"`
}

func (m *ImportChromePlatformsRequest) Reset()         { *m = ImportChromePlatformsRequest{} }
func (m *ImportChromePlatformsRequest) String() string { return proto.CompactTextString(m) }
func (*ImportChromePlatformsRequest) ProtoMessage()    {}
func (*ImportChromePlatformsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_bfc37a625f56a717, []int{6}
}

func (m *ImportChromePlatformsRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ImportChromePlatformsRequest.Unmarshal(m, b)
}
func (m *ImportChromePlatformsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ImportChromePlatformsRequest.Marshal(b, m, deterministic)
}
func (m *ImportChromePlatformsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ImportChromePlatformsRequest.Merge(m, src)
}
func (m *ImportChromePlatformsRequest) XXX_Size() int {
	return xxx_messageInfo_ImportChromePlatformsRequest.Size(m)
}
func (m *ImportChromePlatformsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ImportChromePlatformsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ImportChromePlatformsRequest proto.InternalMessageInfo

type isImportChromePlatformsRequest_Source interface {
	isImportChromePlatformsRequest_Source()
}

type ImportChromePlatformsRequest_MachineDbSource struct {
	MachineDbSource *MachineDBSource `protobuf:"bytes,1,opt,name=machine_db_source,json=machineDbSource,proto3,oneof"`
}

type ImportChromePlatformsRequest_ConfigSource struct {
	ConfigSource *ConfigSource `protobuf:"bytes,2,opt,name=config_source,json=configSource,proto3,oneof"`
}

func (*ImportChromePlatformsRequest_MachineDbSource) isImportChromePlatformsRequest_Source() {}

func (*ImportChromePlatformsRequest_ConfigSource) isImportChromePlatformsRequest_Source() {}

func (m *ImportChromePlatformsRequest) GetSource() isImportChromePlatformsRequest_Source {
	if m != nil {
		return m.Source
	}
	return nil
}

func (m *ImportChromePlatformsRequest) GetMachineDbSource() *MachineDBSource {
	if x, ok := m.GetSource().(*ImportChromePlatformsRequest_MachineDbSource); ok {
		return x.MachineDbSource
	}
	return nil
}

func (m *ImportChromePlatformsRequest) GetConfigSource() *ConfigSource {
	if x, ok := m.GetSource().(*ImportChromePlatformsRequest_ConfigSource); ok {
		return x.ConfigSource
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*ImportChromePlatformsRequest) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*ImportChromePlatformsRequest_MachineDbSource)(nil),
		(*ImportChromePlatformsRequest_ConfigSource)(nil),
	}
}

type ImportChromePlatformsResponse struct {
	Passed               []*ChromePlatformResult `protobuf:"bytes,1,rep,name=passed,proto3" json:"passed,omitempty"`
	Failed               []*ChromePlatformResult `protobuf:"bytes,2,rep,name=failed,proto3" json:"failed,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                `json:"-"`
	XXX_unrecognized     []byte                  `json:"-"`
	XXX_sizecache        int32                   `json:"-"`
}

func (m *ImportChromePlatformsResponse) Reset()         { *m = ImportChromePlatformsResponse{} }
func (m *ImportChromePlatformsResponse) String() string { return proto.CompactTextString(m) }
func (*ImportChromePlatformsResponse) ProtoMessage()    {}
func (*ImportChromePlatformsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_bfc37a625f56a717, []int{7}
}

func (m *ImportChromePlatformsResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ImportChromePlatformsResponse.Unmarshal(m, b)
}
func (m *ImportChromePlatformsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ImportChromePlatformsResponse.Marshal(b, m, deterministic)
}
func (m *ImportChromePlatformsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ImportChromePlatformsResponse.Merge(m, src)
}
func (m *ImportChromePlatformsResponse) XXX_Size() int {
	return xxx_messageInfo_ImportChromePlatformsResponse.Size(m)
}
func (m *ImportChromePlatformsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ImportChromePlatformsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ImportChromePlatformsResponse proto.InternalMessageInfo

func (m *ImportChromePlatformsResponse) GetPassed() []*ChromePlatformResult {
	if m != nil {
		return m.Passed
	}
	return nil
}

func (m *ImportChromePlatformsResponse) GetFailed() []*ChromePlatformResult {
	if m != nil {
		return m.Failed
	}
	return nil
}

type ChromePlatformResult struct {
	Platform             *proto1.ChromePlatform `protobuf:"bytes,1,opt,name=platform,proto3" json:"platform,omitempty"`
	ErrorMsg             string                 `protobuf:"bytes,2,opt,name=error_msg,json=errorMsg,proto3" json:"error_msg,omitempty"`
	XXX_NoUnkeyedLiteral struct{}               `json:"-"`
	XXX_unrecognized     []byte                 `json:"-"`
	XXX_sizecache        int32                  `json:"-"`
}

func (m *ChromePlatformResult) Reset()         { *m = ChromePlatformResult{} }
func (m *ChromePlatformResult) String() string { return proto.CompactTextString(m) }
func (*ChromePlatformResult) ProtoMessage()    {}
func (*ChromePlatformResult) Descriptor() ([]byte, []int) {
	return fileDescriptor_bfc37a625f56a717, []int{8}
}

func (m *ChromePlatformResult) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ChromePlatformResult.Unmarshal(m, b)
}
func (m *ChromePlatformResult) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ChromePlatformResult.Marshal(b, m, deterministic)
}
func (m *ChromePlatformResult) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChromePlatformResult.Merge(m, src)
}
func (m *ChromePlatformResult) XXX_Size() int {
	return xxx_messageInfo_ChromePlatformResult.Size(m)
}
func (m *ChromePlatformResult) XXX_DiscardUnknown() {
	xxx_messageInfo_ChromePlatformResult.DiscardUnknown(m)
}

var xxx_messageInfo_ChromePlatformResult proto.InternalMessageInfo

func (m *ChromePlatformResult) GetPlatform() *proto1.ChromePlatform {
	if m != nil {
		return m.Platform
	}
	return nil
}

func (m *ChromePlatformResult) GetErrorMsg() string {
	if m != nil {
		return m.ErrorMsg
	}
	return ""
}

// Contains the required information for creating a MachineLSEPrototype represented in
// the database.
type CreateMachineLSEPrototypeRequest struct {
	// The MachineLSEPrototype to create.
	MachineLSEPrototype *proto1.MachineLSEPrototype `protobuf:"bytes,1,opt,name=machineLSEPrototype,proto3" json:"machineLSEPrototype,omitempty"`
	// The ID to use for the MachineLSEPrototype, which will become the final component of
	// the MachineLSEPrototype's resource name.
	//
	// This value should follow the regex "^[a-zA-Z0-9-_]{4,63}$" (4-63 characters,
	// contains only ASCII letters, numbers, dash and underscore.
	MachineLSEPrototypeId string   `protobuf:"bytes,2,opt,name=machineLSEPrototype_id,json=machineLSEPrototypeId,proto3" json:"machineLSEPrototype_id,omitempty"`
	XXX_NoUnkeyedLiteral  struct{} `json:"-"`
	XXX_unrecognized      []byte   `json:"-"`
	XXX_sizecache         int32    `json:"-"`
}

func (m *CreateMachineLSEPrototypeRequest) Reset()         { *m = CreateMachineLSEPrototypeRequest{} }
func (m *CreateMachineLSEPrototypeRequest) String() string { return proto.CompactTextString(m) }
func (*CreateMachineLSEPrototypeRequest) ProtoMessage()    {}
func (*CreateMachineLSEPrototypeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_bfc37a625f56a717, []int{9}
}

func (m *CreateMachineLSEPrototypeRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CreateMachineLSEPrototypeRequest.Unmarshal(m, b)
}
func (m *CreateMachineLSEPrototypeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CreateMachineLSEPrototypeRequest.Marshal(b, m, deterministic)
}
func (m *CreateMachineLSEPrototypeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateMachineLSEPrototypeRequest.Merge(m, src)
}
func (m *CreateMachineLSEPrototypeRequest) XXX_Size() int {
	return xxx_messageInfo_CreateMachineLSEPrototypeRequest.Size(m)
}
func (m *CreateMachineLSEPrototypeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateMachineLSEPrototypeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CreateMachineLSEPrototypeRequest proto.InternalMessageInfo

func (m *CreateMachineLSEPrototypeRequest) GetMachineLSEPrototype() *proto1.MachineLSEPrototype {
	if m != nil {
		return m.MachineLSEPrototype
	}
	return nil
}

func (m *CreateMachineLSEPrototypeRequest) GetMachineLSEPrototypeId() string {
	if m != nil {
		return m.MachineLSEPrototypeId
	}
	return ""
}

type UpdateMachineLSEPrototypeRequest struct {
	// The MachineLSEPrototype to update.
	MachineLSEPrototype *proto1.MachineLSEPrototype `protobuf:"bytes,1,opt,name=machineLSEPrototype,proto3" json:"machineLSEPrototype,omitempty"`
	// The list of fields to be updated.
	UpdateMask           *field_mask.FieldMask `protobuf:"bytes,2,opt,name=update_mask,json=updateMask,proto3" json:"update_mask,omitempty"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *UpdateMachineLSEPrototypeRequest) Reset()         { *m = UpdateMachineLSEPrototypeRequest{} }
func (m *UpdateMachineLSEPrototypeRequest) String() string { return proto.CompactTextString(m) }
func (*UpdateMachineLSEPrototypeRequest) ProtoMessage()    {}
func (*UpdateMachineLSEPrototypeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_bfc37a625f56a717, []int{10}
}

func (m *UpdateMachineLSEPrototypeRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UpdateMachineLSEPrototypeRequest.Unmarshal(m, b)
}
func (m *UpdateMachineLSEPrototypeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UpdateMachineLSEPrototypeRequest.Marshal(b, m, deterministic)
}
func (m *UpdateMachineLSEPrototypeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateMachineLSEPrototypeRequest.Merge(m, src)
}
func (m *UpdateMachineLSEPrototypeRequest) XXX_Size() int {
	return xxx_messageInfo_UpdateMachineLSEPrototypeRequest.Size(m)
}
func (m *UpdateMachineLSEPrototypeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateMachineLSEPrototypeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateMachineLSEPrototypeRequest proto.InternalMessageInfo

func (m *UpdateMachineLSEPrototypeRequest) GetMachineLSEPrototype() *proto1.MachineLSEPrototype {
	if m != nil {
		return m.MachineLSEPrototype
	}
	return nil
}

func (m *UpdateMachineLSEPrototypeRequest) GetUpdateMask() *field_mask.FieldMask {
	if m != nil {
		return m.UpdateMask
	}
	return nil
}

type GetMachineLSEPrototypeRequest struct {
	// The name of the MachineLSEPrototype to retrieve.
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetMachineLSEPrototypeRequest) Reset()         { *m = GetMachineLSEPrototypeRequest{} }
func (m *GetMachineLSEPrototypeRequest) String() string { return proto.CompactTextString(m) }
func (*GetMachineLSEPrototypeRequest) ProtoMessage()    {}
func (*GetMachineLSEPrototypeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_bfc37a625f56a717, []int{11}
}

func (m *GetMachineLSEPrototypeRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetMachineLSEPrototypeRequest.Unmarshal(m, b)
}
func (m *GetMachineLSEPrototypeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetMachineLSEPrototypeRequest.Marshal(b, m, deterministic)
}
func (m *GetMachineLSEPrototypeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetMachineLSEPrototypeRequest.Merge(m, src)
}
func (m *GetMachineLSEPrototypeRequest) XXX_Size() int {
	return xxx_messageInfo_GetMachineLSEPrototypeRequest.Size(m)
}
func (m *GetMachineLSEPrototypeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetMachineLSEPrototypeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetMachineLSEPrototypeRequest proto.InternalMessageInfo

func (m *GetMachineLSEPrototypeRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type ListMachineLSEPrototypesRequest struct {
	// The maximum number of MachineLSEPrototypes to return. The service may return fewer than
	// this value.
	// If unspecified, at most 100 MachineLSEPrototypes will be returned.
	// The maximum value is 1000; values above 1000 will be coerced to 1000.
	PageSize int32 `protobuf:"varint,1,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// A page token, received from a previous `ListMachineLSEPrototypes` call.
	// Provide this to retrieve the subsequent page.
	//
	// When paginating, all other parameters provided to `ListMachineLSEPrototypes` must match
	// the call that provided the page token.
	PageToken            string   `protobuf:"bytes,2,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ListMachineLSEPrototypesRequest) Reset()         { *m = ListMachineLSEPrototypesRequest{} }
func (m *ListMachineLSEPrototypesRequest) String() string { return proto.CompactTextString(m) }
func (*ListMachineLSEPrototypesRequest) ProtoMessage()    {}
func (*ListMachineLSEPrototypesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_bfc37a625f56a717, []int{12}
}

func (m *ListMachineLSEPrototypesRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListMachineLSEPrototypesRequest.Unmarshal(m, b)
}
func (m *ListMachineLSEPrototypesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListMachineLSEPrototypesRequest.Marshal(b, m, deterministic)
}
func (m *ListMachineLSEPrototypesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListMachineLSEPrototypesRequest.Merge(m, src)
}
func (m *ListMachineLSEPrototypesRequest) XXX_Size() int {
	return xxx_messageInfo_ListMachineLSEPrototypesRequest.Size(m)
}
func (m *ListMachineLSEPrototypesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ListMachineLSEPrototypesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ListMachineLSEPrototypesRequest proto.InternalMessageInfo

func (m *ListMachineLSEPrototypesRequest) GetPageSize() int32 {
	if m != nil {
		return m.PageSize
	}
	return 0
}

func (m *ListMachineLSEPrototypesRequest) GetPageToken() string {
	if m != nil {
		return m.PageToken
	}
	return ""
}

type ListMachineLSEPrototypesResponse struct {
	// The MachineLSEPrototypes from datastore.
	MachineLSEPrototypes []*proto1.MachineLSEPrototype `protobuf:"bytes,1,rep,name=machineLSEPrototypes,proto3" json:"machineLSEPrototypes,omitempty"`
	// A token, which can be sent as `page_token` to retrieve the next page.
	// If this field is omitted, there are no subsequent pages.
	NextPageToken        string   `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ListMachineLSEPrototypesResponse) Reset()         { *m = ListMachineLSEPrototypesResponse{} }
func (m *ListMachineLSEPrototypesResponse) String() string { return proto.CompactTextString(m) }
func (*ListMachineLSEPrototypesResponse) ProtoMessage()    {}
func (*ListMachineLSEPrototypesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_bfc37a625f56a717, []int{13}
}

func (m *ListMachineLSEPrototypesResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListMachineLSEPrototypesResponse.Unmarshal(m, b)
}
func (m *ListMachineLSEPrototypesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListMachineLSEPrototypesResponse.Marshal(b, m, deterministic)
}
func (m *ListMachineLSEPrototypesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListMachineLSEPrototypesResponse.Merge(m, src)
}
func (m *ListMachineLSEPrototypesResponse) XXX_Size() int {
	return xxx_messageInfo_ListMachineLSEPrototypesResponse.Size(m)
}
func (m *ListMachineLSEPrototypesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ListMachineLSEPrototypesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ListMachineLSEPrototypesResponse proto.InternalMessageInfo

func (m *ListMachineLSEPrototypesResponse) GetMachineLSEPrototypes() []*proto1.MachineLSEPrototype {
	if m != nil {
		return m.MachineLSEPrototypes
	}
	return nil
}

func (m *ListMachineLSEPrototypesResponse) GetNextPageToken() string {
	if m != nil {
		return m.NextPageToken
	}
	return ""
}

type DeleteMachineLSEPrototypeRequest struct {
	// The name of the MachineLSEPrototype to delete
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DeleteMachineLSEPrototypeRequest) Reset()         { *m = DeleteMachineLSEPrototypeRequest{} }
func (m *DeleteMachineLSEPrototypeRequest) String() string { return proto.CompactTextString(m) }
func (*DeleteMachineLSEPrototypeRequest) ProtoMessage()    {}
func (*DeleteMachineLSEPrototypeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_bfc37a625f56a717, []int{14}
}

func (m *DeleteMachineLSEPrototypeRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DeleteMachineLSEPrototypeRequest.Unmarshal(m, b)
}
func (m *DeleteMachineLSEPrototypeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DeleteMachineLSEPrototypeRequest.Marshal(b, m, deterministic)
}
func (m *DeleteMachineLSEPrototypeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteMachineLSEPrototypeRequest.Merge(m, src)
}
func (m *DeleteMachineLSEPrototypeRequest) XXX_Size() int {
	return xxx_messageInfo_DeleteMachineLSEPrototypeRequest.Size(m)
}
func (m *DeleteMachineLSEPrototypeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteMachineLSEPrototypeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteMachineLSEPrototypeRequest proto.InternalMessageInfo

func (m *DeleteMachineLSEPrototypeRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

// Contains the required information for creating a RackLSEPrototype represented in
// the database.
type CreateRackLSEPrototypeRequest struct {
	// The RackLSEPrototype to create.
	RackLSEPrototype *proto1.RackLSEPrototype `protobuf:"bytes,1,opt,name=rackLSEPrototype,proto3" json:"rackLSEPrototype,omitempty"`
	// The ID to use for the RackLSEPrototype, which will become the final component of
	// the RackLSEPrototype's resource name.
	//
	// This value should follow the regex "^[a-zA-Z0-9-_]{4,63}$" (4-63 characters,
	// contains only ASCII letters, numbers, dash and underscore.
	RackLSEPrototypeId   string   `protobuf:"bytes,2,opt,name=rackLSEPrototype_id,json=rackLSEPrototypeId,proto3" json:"rackLSEPrototype_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CreateRackLSEPrototypeRequest) Reset()         { *m = CreateRackLSEPrototypeRequest{} }
func (m *CreateRackLSEPrototypeRequest) String() string { return proto.CompactTextString(m) }
func (*CreateRackLSEPrototypeRequest) ProtoMessage()    {}
func (*CreateRackLSEPrototypeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_bfc37a625f56a717, []int{15}
}

func (m *CreateRackLSEPrototypeRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CreateRackLSEPrototypeRequest.Unmarshal(m, b)
}
func (m *CreateRackLSEPrototypeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CreateRackLSEPrototypeRequest.Marshal(b, m, deterministic)
}
func (m *CreateRackLSEPrototypeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateRackLSEPrototypeRequest.Merge(m, src)
}
func (m *CreateRackLSEPrototypeRequest) XXX_Size() int {
	return xxx_messageInfo_CreateRackLSEPrototypeRequest.Size(m)
}
func (m *CreateRackLSEPrototypeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateRackLSEPrototypeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CreateRackLSEPrototypeRequest proto.InternalMessageInfo

func (m *CreateRackLSEPrototypeRequest) GetRackLSEPrototype() *proto1.RackLSEPrototype {
	if m != nil {
		return m.RackLSEPrototype
	}
	return nil
}

func (m *CreateRackLSEPrototypeRequest) GetRackLSEPrototypeId() string {
	if m != nil {
		return m.RackLSEPrototypeId
	}
	return ""
}

type UpdateRackLSEPrototypeRequest struct {
	// The RackLSEPrototype to update.
	RackLSEPrototype *proto1.RackLSEPrototype `protobuf:"bytes,1,opt,name=rackLSEPrototype,proto3" json:"rackLSEPrototype,omitempty"`
	// The list of fields to be updated.
	UpdateMask           *field_mask.FieldMask `protobuf:"bytes,2,opt,name=update_mask,json=updateMask,proto3" json:"update_mask,omitempty"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *UpdateRackLSEPrototypeRequest) Reset()         { *m = UpdateRackLSEPrototypeRequest{} }
func (m *UpdateRackLSEPrototypeRequest) String() string { return proto.CompactTextString(m) }
func (*UpdateRackLSEPrototypeRequest) ProtoMessage()    {}
func (*UpdateRackLSEPrototypeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_bfc37a625f56a717, []int{16}
}

func (m *UpdateRackLSEPrototypeRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UpdateRackLSEPrototypeRequest.Unmarshal(m, b)
}
func (m *UpdateRackLSEPrototypeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UpdateRackLSEPrototypeRequest.Marshal(b, m, deterministic)
}
func (m *UpdateRackLSEPrototypeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateRackLSEPrototypeRequest.Merge(m, src)
}
func (m *UpdateRackLSEPrototypeRequest) XXX_Size() int {
	return xxx_messageInfo_UpdateRackLSEPrototypeRequest.Size(m)
}
func (m *UpdateRackLSEPrototypeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateRackLSEPrototypeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateRackLSEPrototypeRequest proto.InternalMessageInfo

func (m *UpdateRackLSEPrototypeRequest) GetRackLSEPrototype() *proto1.RackLSEPrototype {
	if m != nil {
		return m.RackLSEPrototype
	}
	return nil
}

func (m *UpdateRackLSEPrototypeRequest) GetUpdateMask() *field_mask.FieldMask {
	if m != nil {
		return m.UpdateMask
	}
	return nil
}

type GetRackLSEPrototypeRequest struct {
	// The name of the RackLSEPrototype to retrieve.
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetRackLSEPrototypeRequest) Reset()         { *m = GetRackLSEPrototypeRequest{} }
func (m *GetRackLSEPrototypeRequest) String() string { return proto.CompactTextString(m) }
func (*GetRackLSEPrototypeRequest) ProtoMessage()    {}
func (*GetRackLSEPrototypeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_bfc37a625f56a717, []int{17}
}

func (m *GetRackLSEPrototypeRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetRackLSEPrototypeRequest.Unmarshal(m, b)
}
func (m *GetRackLSEPrototypeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetRackLSEPrototypeRequest.Marshal(b, m, deterministic)
}
func (m *GetRackLSEPrototypeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetRackLSEPrototypeRequest.Merge(m, src)
}
func (m *GetRackLSEPrototypeRequest) XXX_Size() int {
	return xxx_messageInfo_GetRackLSEPrototypeRequest.Size(m)
}
func (m *GetRackLSEPrototypeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetRackLSEPrototypeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetRackLSEPrototypeRequest proto.InternalMessageInfo

func (m *GetRackLSEPrototypeRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type ListRackLSEPrototypesRequest struct {
	// The maximum number of RackLSEPrototypes to return. The service may return fewer than
	// this value.
	// If unspecified, at most 100 RackLSEPrototypes will be returned.
	// The maximum value is 1000; values above 1000 will be coerced to 1000.
	PageSize int32 `protobuf:"varint,1,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// A page token, received from a previous `ListRackLSEPrototypes` call.
	// Provide this to retrieve the subsequent page.
	//
	// When paginating, all other parameters provided to `ListRackLSEPrototypes` must match
	// the call that provided the page token.
	PageToken            string   `protobuf:"bytes,2,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ListRackLSEPrototypesRequest) Reset()         { *m = ListRackLSEPrototypesRequest{} }
func (m *ListRackLSEPrototypesRequest) String() string { return proto.CompactTextString(m) }
func (*ListRackLSEPrototypesRequest) ProtoMessage()    {}
func (*ListRackLSEPrototypesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_bfc37a625f56a717, []int{18}
}

func (m *ListRackLSEPrototypesRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListRackLSEPrototypesRequest.Unmarshal(m, b)
}
func (m *ListRackLSEPrototypesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListRackLSEPrototypesRequest.Marshal(b, m, deterministic)
}
func (m *ListRackLSEPrototypesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListRackLSEPrototypesRequest.Merge(m, src)
}
func (m *ListRackLSEPrototypesRequest) XXX_Size() int {
	return xxx_messageInfo_ListRackLSEPrototypesRequest.Size(m)
}
func (m *ListRackLSEPrototypesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ListRackLSEPrototypesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ListRackLSEPrototypesRequest proto.InternalMessageInfo

func (m *ListRackLSEPrototypesRequest) GetPageSize() int32 {
	if m != nil {
		return m.PageSize
	}
	return 0
}

func (m *ListRackLSEPrototypesRequest) GetPageToken() string {
	if m != nil {
		return m.PageToken
	}
	return ""
}

type ListRackLSEPrototypesResponse struct {
	// The RackLSEPrototypes from datastore.
	RackLSEPrototypes []*proto1.RackLSEPrototype `protobuf:"bytes,1,rep,name=rackLSEPrototypes,proto3" json:"rackLSEPrototypes,omitempty"`
	// A token, which can be sent as `page_token` to retrieve the next page.
	// If this field is omitted, there are no subsequent pages.
	NextPageToken        string   `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ListRackLSEPrototypesResponse) Reset()         { *m = ListRackLSEPrototypesResponse{} }
func (m *ListRackLSEPrototypesResponse) String() string { return proto.CompactTextString(m) }
func (*ListRackLSEPrototypesResponse) ProtoMessage()    {}
func (*ListRackLSEPrototypesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_bfc37a625f56a717, []int{19}
}

func (m *ListRackLSEPrototypesResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListRackLSEPrototypesResponse.Unmarshal(m, b)
}
func (m *ListRackLSEPrototypesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListRackLSEPrototypesResponse.Marshal(b, m, deterministic)
}
func (m *ListRackLSEPrototypesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListRackLSEPrototypesResponse.Merge(m, src)
}
func (m *ListRackLSEPrototypesResponse) XXX_Size() int {
	return xxx_messageInfo_ListRackLSEPrototypesResponse.Size(m)
}
func (m *ListRackLSEPrototypesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ListRackLSEPrototypesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ListRackLSEPrototypesResponse proto.InternalMessageInfo

func (m *ListRackLSEPrototypesResponse) GetRackLSEPrototypes() []*proto1.RackLSEPrototype {
	if m != nil {
		return m.RackLSEPrototypes
	}
	return nil
}

func (m *ListRackLSEPrototypesResponse) GetNextPageToken() string {
	if m != nil {
		return m.NextPageToken
	}
	return ""
}

type DeleteRackLSEPrototypeRequest struct {
	// The name of the RackLSEPrototype to delete
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DeleteRackLSEPrototypeRequest) Reset()         { *m = DeleteRackLSEPrototypeRequest{} }
func (m *DeleteRackLSEPrototypeRequest) String() string { return proto.CompactTextString(m) }
func (*DeleteRackLSEPrototypeRequest) ProtoMessage()    {}
func (*DeleteRackLSEPrototypeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_bfc37a625f56a717, []int{20}
}

func (m *DeleteRackLSEPrototypeRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DeleteRackLSEPrototypeRequest.Unmarshal(m, b)
}
func (m *DeleteRackLSEPrototypeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DeleteRackLSEPrototypeRequest.Marshal(b, m, deterministic)
}
func (m *DeleteRackLSEPrototypeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteRackLSEPrototypeRequest.Merge(m, src)
}
func (m *DeleteRackLSEPrototypeRequest) XXX_Size() int {
	return xxx_messageInfo_DeleteRackLSEPrototypeRequest.Size(m)
}
func (m *DeleteRackLSEPrototypeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteRackLSEPrototypeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteRackLSEPrototypeRequest proto.InternalMessageInfo

func (m *DeleteRackLSEPrototypeRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

// Contains the required information for creating a Machine represented in
// the database.
type CreateMachineRequest struct {
	// The machine to create.
	Machine *proto1.Machine `protobuf:"bytes,1,opt,name=machine,proto3" json:"machine,omitempty"`
	// The ID to use for the Machine, which will become the final component of
	// the Machine's resource name.
	//
	// This value should follow the regex "^[a-zA-Z0-9-_]{4,63}$" (4-63 characters,
	// contains only ASCII letters, numbers, dash and underscore.
	MachineId            string   `protobuf:"bytes,2,opt,name=machine_id,json=machineId,proto3" json:"machine_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CreateMachineRequest) Reset()         { *m = CreateMachineRequest{} }
func (m *CreateMachineRequest) String() string { return proto.CompactTextString(m) }
func (*CreateMachineRequest) ProtoMessage()    {}
func (*CreateMachineRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_bfc37a625f56a717, []int{21}
}

func (m *CreateMachineRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CreateMachineRequest.Unmarshal(m, b)
}
func (m *CreateMachineRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CreateMachineRequest.Marshal(b, m, deterministic)
}
func (m *CreateMachineRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateMachineRequest.Merge(m, src)
}
func (m *CreateMachineRequest) XXX_Size() int {
	return xxx_messageInfo_CreateMachineRequest.Size(m)
}
func (m *CreateMachineRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateMachineRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CreateMachineRequest proto.InternalMessageInfo

func (m *CreateMachineRequest) GetMachine() *proto1.Machine {
	if m != nil {
		return m.Machine
	}
	return nil
}

func (m *CreateMachineRequest) GetMachineId() string {
	if m != nil {
		return m.MachineId
	}
	return ""
}

type UpdateMachineRequest struct {
	// The machine to update.
	Machine *proto1.Machine `protobuf:"bytes,1,opt,name=machine,proto3" json:"machine,omitempty"`
	// The list of fields to be updated.
	UpdateMask           *field_mask.FieldMask `protobuf:"bytes,2,opt,name=update_mask,json=updateMask,proto3" json:"update_mask,omitempty"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *UpdateMachineRequest) Reset()         { *m = UpdateMachineRequest{} }
func (m *UpdateMachineRequest) String() string { return proto.CompactTextString(m) }
func (*UpdateMachineRequest) ProtoMessage()    {}
func (*UpdateMachineRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_bfc37a625f56a717, []int{22}
}

func (m *UpdateMachineRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UpdateMachineRequest.Unmarshal(m, b)
}
func (m *UpdateMachineRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UpdateMachineRequest.Marshal(b, m, deterministic)
}
func (m *UpdateMachineRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateMachineRequest.Merge(m, src)
}
func (m *UpdateMachineRequest) XXX_Size() int {
	return xxx_messageInfo_UpdateMachineRequest.Size(m)
}
func (m *UpdateMachineRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateMachineRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateMachineRequest proto.InternalMessageInfo

func (m *UpdateMachineRequest) GetMachine() *proto1.Machine {
	if m != nil {
		return m.Machine
	}
	return nil
}

func (m *UpdateMachineRequest) GetUpdateMask() *field_mask.FieldMask {
	if m != nil {
		return m.UpdateMask
	}
	return nil
}

type GetMachineRequest struct {
	// The name of the machine to retrieve.
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetMachineRequest) Reset()         { *m = GetMachineRequest{} }
func (m *GetMachineRequest) String() string { return proto.CompactTextString(m) }
func (*GetMachineRequest) ProtoMessage()    {}
func (*GetMachineRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_bfc37a625f56a717, []int{23}
}

func (m *GetMachineRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetMachineRequest.Unmarshal(m, b)
}
func (m *GetMachineRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetMachineRequest.Marshal(b, m, deterministic)
}
func (m *GetMachineRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetMachineRequest.Merge(m, src)
}
func (m *GetMachineRequest) XXX_Size() int {
	return xxx_messageInfo_GetMachineRequest.Size(m)
}
func (m *GetMachineRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetMachineRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetMachineRequest proto.InternalMessageInfo

func (m *GetMachineRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type ListMachinesRequest struct {
	// The maximum number of machines to return. The service may return fewer than
	// this value.
	// If unspecified, at most 100 machines will be returned.
	// The maximum value is 1000; values above 1000 will be coerced to 1000.
	PageSize int32 `protobuf:"varint,1,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// A page token, received from a previous `ListMachines` call.
	// Provide this to retrieve the subsequent page.
	//
	// When paginating, all other parameters provided to `ListMachines` must match
	// the call that provided the page token.
	PageToken            string   `protobuf:"bytes,2,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ListMachinesRequest) Reset()         { *m = ListMachinesRequest{} }
func (m *ListMachinesRequest) String() string { return proto.CompactTextString(m) }
func (*ListMachinesRequest) ProtoMessage()    {}
func (*ListMachinesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_bfc37a625f56a717, []int{24}
}

func (m *ListMachinesRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListMachinesRequest.Unmarshal(m, b)
}
func (m *ListMachinesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListMachinesRequest.Marshal(b, m, deterministic)
}
func (m *ListMachinesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListMachinesRequest.Merge(m, src)
}
func (m *ListMachinesRequest) XXX_Size() int {
	return xxx_messageInfo_ListMachinesRequest.Size(m)
}
func (m *ListMachinesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ListMachinesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ListMachinesRequest proto.InternalMessageInfo

func (m *ListMachinesRequest) GetPageSize() int32 {
	if m != nil {
		return m.PageSize
	}
	return 0
}

func (m *ListMachinesRequest) GetPageToken() string {
	if m != nil {
		return m.PageToken
	}
	return ""
}

type ListMachinesResponse struct {
	// The machines from datastore.
	Machines []*proto1.Machine `protobuf:"bytes,1,rep,name=machines,proto3" json:"machines,omitempty"`
	// A token, which can be sent as `page_token` to retrieve the next page.
	// If this field is omitted, there are no subsequent pages.
	NextPageToken        string   `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ListMachinesResponse) Reset()         { *m = ListMachinesResponse{} }
func (m *ListMachinesResponse) String() string { return proto.CompactTextString(m) }
func (*ListMachinesResponse) ProtoMessage()    {}
func (*ListMachinesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_bfc37a625f56a717, []int{25}
}

func (m *ListMachinesResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListMachinesResponse.Unmarshal(m, b)
}
func (m *ListMachinesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListMachinesResponse.Marshal(b, m, deterministic)
}
func (m *ListMachinesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListMachinesResponse.Merge(m, src)
}
func (m *ListMachinesResponse) XXX_Size() int {
	return xxx_messageInfo_ListMachinesResponse.Size(m)
}
func (m *ListMachinesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ListMachinesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ListMachinesResponse proto.InternalMessageInfo

func (m *ListMachinesResponse) GetMachines() []*proto1.Machine {
	if m != nil {
		return m.Machines
	}
	return nil
}

func (m *ListMachinesResponse) GetNextPageToken() string {
	if m != nil {
		return m.NextPageToken
	}
	return ""
}

type DeleteMachineRequest struct {
	// The name of the Machine to delete
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DeleteMachineRequest) Reset()         { *m = DeleteMachineRequest{} }
func (m *DeleteMachineRequest) String() string { return proto.CompactTextString(m) }
func (*DeleteMachineRequest) ProtoMessage()    {}
func (*DeleteMachineRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_bfc37a625f56a717, []int{26}
}

func (m *DeleteMachineRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DeleteMachineRequest.Unmarshal(m, b)
}
func (m *DeleteMachineRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DeleteMachineRequest.Marshal(b, m, deterministic)
}
func (m *DeleteMachineRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteMachineRequest.Merge(m, src)
}
func (m *DeleteMachineRequest) XXX_Size() int {
	return xxx_messageInfo_DeleteMachineRequest.Size(m)
}
func (m *DeleteMachineRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteMachineRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteMachineRequest proto.InternalMessageInfo

func (m *DeleteMachineRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type ImportMachinesRequest struct {
	// Types that are valid to be assigned to Source:
	//	*ImportMachinesRequest_MachineDbSource
	//	*ImportMachinesRequest_ConfigSource
	Source               isImportMachinesRequest_Source `protobuf_oneof:"source"`
	XXX_NoUnkeyedLiteral struct{}                       `json:"-"`
	XXX_unrecognized     []byte                         `json:"-"`
	XXX_sizecache        int32                          `json:"-"`
}

func (m *ImportMachinesRequest) Reset()         { *m = ImportMachinesRequest{} }
func (m *ImportMachinesRequest) String() string { return proto.CompactTextString(m) }
func (*ImportMachinesRequest) ProtoMessage()    {}
func (*ImportMachinesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_bfc37a625f56a717, []int{27}
}

func (m *ImportMachinesRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ImportMachinesRequest.Unmarshal(m, b)
}
func (m *ImportMachinesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ImportMachinesRequest.Marshal(b, m, deterministic)
}
func (m *ImportMachinesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ImportMachinesRequest.Merge(m, src)
}
func (m *ImportMachinesRequest) XXX_Size() int {
	return xxx_messageInfo_ImportMachinesRequest.Size(m)
}
func (m *ImportMachinesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ImportMachinesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ImportMachinesRequest proto.InternalMessageInfo

type isImportMachinesRequest_Source interface {
	isImportMachinesRequest_Source()
}

type ImportMachinesRequest_MachineDbSource struct {
	MachineDbSource *MachineDBSource `protobuf:"bytes,1,opt,name=machine_db_source,json=machineDbSource,proto3,oneof"`
}

type ImportMachinesRequest_ConfigSource struct {
	ConfigSource *ConfigSource `protobuf:"bytes,2,opt,name=config_source,json=configSource,proto3,oneof"`
}

func (*ImportMachinesRequest_MachineDbSource) isImportMachinesRequest_Source() {}

func (*ImportMachinesRequest_ConfigSource) isImportMachinesRequest_Source() {}

func (m *ImportMachinesRequest) GetSource() isImportMachinesRequest_Source {
	if m != nil {
		return m.Source
	}
	return nil
}

func (m *ImportMachinesRequest) GetMachineDbSource() *MachineDBSource {
	if x, ok := m.GetSource().(*ImportMachinesRequest_MachineDbSource); ok {
		return x.MachineDbSource
	}
	return nil
}

func (m *ImportMachinesRequest) GetConfigSource() *ConfigSource {
	if x, ok := m.GetSource().(*ImportMachinesRequest_ConfigSource); ok {
		return x.ConfigSource
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*ImportMachinesRequest) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*ImportMachinesRequest_MachineDbSource)(nil),
		(*ImportMachinesRequest_ConfigSource)(nil),
	}
}

type MachineDBSource struct {
	Host                 string   `protobuf:"bytes,1,opt,name=host,proto3" json:"host,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MachineDBSource) Reset()         { *m = MachineDBSource{} }
func (m *MachineDBSource) String() string { return proto.CompactTextString(m) }
func (*MachineDBSource) ProtoMessage()    {}
func (*MachineDBSource) Descriptor() ([]byte, []int) {
	return fileDescriptor_bfc37a625f56a717, []int{28}
}

func (m *MachineDBSource) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MachineDBSource.Unmarshal(m, b)
}
func (m *MachineDBSource) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MachineDBSource.Marshal(b, m, deterministic)
}
func (m *MachineDBSource) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MachineDBSource.Merge(m, src)
}
func (m *MachineDBSource) XXX_Size() int {
	return xxx_messageInfo_MachineDBSource.Size(m)
}
func (m *MachineDBSource) XXX_DiscardUnknown() {
	xxx_messageInfo_MachineDBSource.DiscardUnknown(m)
}

var xxx_messageInfo_MachineDBSource proto.InternalMessageInfo

func (m *MachineDBSource) GetHost() string {
	if m != nil {
		return m.Host
	}
	return ""
}

type ConfigSource struct {
	// Empty config_service means it's local file.
	ConfigServiceName    string   `protobuf:"bytes,1,opt,name=config_service_name,json=configServiceName,proto3" json:"config_service_name,omitempty"`
	FileName             string   `protobuf:"bytes,2,opt,name=file_name,json=fileName,proto3" json:"file_name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ConfigSource) Reset()         { *m = ConfigSource{} }
func (m *ConfigSource) String() string { return proto.CompactTextString(m) }
func (*ConfigSource) ProtoMessage()    {}
func (*ConfigSource) Descriptor() ([]byte, []int) {
	return fileDescriptor_bfc37a625f56a717, []int{29}
}

func (m *ConfigSource) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ConfigSource.Unmarshal(m, b)
}
func (m *ConfigSource) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ConfigSource.Marshal(b, m, deterministic)
}
func (m *ConfigSource) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ConfigSource.Merge(m, src)
}
func (m *ConfigSource) XXX_Size() int {
	return xxx_messageInfo_ConfigSource.Size(m)
}
func (m *ConfigSource) XXX_DiscardUnknown() {
	xxx_messageInfo_ConfigSource.DiscardUnknown(m)
}

var xxx_messageInfo_ConfigSource proto.InternalMessageInfo

func (m *ConfigSource) GetConfigServiceName() string {
	if m != nil {
		return m.ConfigServiceName
	}
	return ""
}

func (m *ConfigSource) GetFileName() string {
	if m != nil {
		return m.FileName
	}
	return ""
}

// Contains the required information for creating a Rack represented in
// the database.
type CreateRackRequest struct {
	// The rack to create.
	Rack *proto1.Rack `protobuf:"bytes,1,opt,name=rack,proto3" json:"rack,omitempty"`
	// The ID to use for the Rack, which will become the final component of
	// the Rack's resource name.
	//
	// This value should follow the regex "^[a-zA-Z0-9-_]{4,63}$" (4-63 characters,
	// contains only ASCII letters, numbers, dash and underscore.
	RackId               string   `protobuf:"bytes,2,opt,name=rack_id,json=rackId,proto3" json:"rack_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CreateRackRequest) Reset()         { *m = CreateRackRequest{} }
func (m *CreateRackRequest) String() string { return proto.CompactTextString(m) }
func (*CreateRackRequest) ProtoMessage()    {}
func (*CreateRackRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_bfc37a625f56a717, []int{30}
}

func (m *CreateRackRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CreateRackRequest.Unmarshal(m, b)
}
func (m *CreateRackRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CreateRackRequest.Marshal(b, m, deterministic)
}
func (m *CreateRackRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateRackRequest.Merge(m, src)
}
func (m *CreateRackRequest) XXX_Size() int {
	return xxx_messageInfo_CreateRackRequest.Size(m)
}
func (m *CreateRackRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateRackRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CreateRackRequest proto.InternalMessageInfo

func (m *CreateRackRequest) GetRack() *proto1.Rack {
	if m != nil {
		return m.Rack
	}
	return nil
}

func (m *CreateRackRequest) GetRackId() string {
	if m != nil {
		return m.RackId
	}
	return ""
}

type UpdateRackRequest struct {
	// The rack to update.
	Rack *proto1.Rack `protobuf:"bytes,1,opt,name=rack,proto3" json:"rack,omitempty"`
	// The list of fields to be updated.
	UpdateMask           *field_mask.FieldMask `protobuf:"bytes,2,opt,name=update_mask,json=updateMask,proto3" json:"update_mask,omitempty"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *UpdateRackRequest) Reset()         { *m = UpdateRackRequest{} }
func (m *UpdateRackRequest) String() string { return proto.CompactTextString(m) }
func (*UpdateRackRequest) ProtoMessage()    {}
func (*UpdateRackRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_bfc37a625f56a717, []int{31}
}

func (m *UpdateRackRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UpdateRackRequest.Unmarshal(m, b)
}
func (m *UpdateRackRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UpdateRackRequest.Marshal(b, m, deterministic)
}
func (m *UpdateRackRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateRackRequest.Merge(m, src)
}
func (m *UpdateRackRequest) XXX_Size() int {
	return xxx_messageInfo_UpdateRackRequest.Size(m)
}
func (m *UpdateRackRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateRackRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateRackRequest proto.InternalMessageInfo

func (m *UpdateRackRequest) GetRack() *proto1.Rack {
	if m != nil {
		return m.Rack
	}
	return nil
}

func (m *UpdateRackRequest) GetUpdateMask() *field_mask.FieldMask {
	if m != nil {
		return m.UpdateMask
	}
	return nil
}

type GetRackRequest struct {
	// The name of the rack to retrieve.
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetRackRequest) Reset()         { *m = GetRackRequest{} }
func (m *GetRackRequest) String() string { return proto.CompactTextString(m) }
func (*GetRackRequest) ProtoMessage()    {}
func (*GetRackRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_bfc37a625f56a717, []int{32}
}

func (m *GetRackRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetRackRequest.Unmarshal(m, b)
}
func (m *GetRackRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetRackRequest.Marshal(b, m, deterministic)
}
func (m *GetRackRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetRackRequest.Merge(m, src)
}
func (m *GetRackRequest) XXX_Size() int {
	return xxx_messageInfo_GetRackRequest.Size(m)
}
func (m *GetRackRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetRackRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetRackRequest proto.InternalMessageInfo

func (m *GetRackRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type ListRacksRequest struct {
	// The maximum number of racks to return. The service may return fewer than
	// this value.
	// If unspecified, at most 100 racks will be returned.
	// The maximum value is 1000; values above 1000 will be coerced to 1000.
	PageSize int32 `protobuf:"varint,1,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// A page token, received from a previous `ListRacks` call.
	// Provide this to retrieve the subsequent page.
	//
	// When paginating, all other parameters provided to `ListRacks` must match
	// the call that provided the page token.
	PageToken            string   `protobuf:"bytes,2,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ListRacksRequest) Reset()         { *m = ListRacksRequest{} }
func (m *ListRacksRequest) String() string { return proto.CompactTextString(m) }
func (*ListRacksRequest) ProtoMessage()    {}
func (*ListRacksRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_bfc37a625f56a717, []int{33}
}

func (m *ListRacksRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListRacksRequest.Unmarshal(m, b)
}
func (m *ListRacksRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListRacksRequest.Marshal(b, m, deterministic)
}
func (m *ListRacksRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListRacksRequest.Merge(m, src)
}
func (m *ListRacksRequest) XXX_Size() int {
	return xxx_messageInfo_ListRacksRequest.Size(m)
}
func (m *ListRacksRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ListRacksRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ListRacksRequest proto.InternalMessageInfo

func (m *ListRacksRequest) GetPageSize() int32 {
	if m != nil {
		return m.PageSize
	}
	return 0
}

func (m *ListRacksRequest) GetPageToken() string {
	if m != nil {
		return m.PageToken
	}
	return ""
}

type ListRacksResponse struct {
	// The racks from datastore.
	Racks []*proto1.Rack `protobuf:"bytes,1,rep,name=racks,proto3" json:"racks,omitempty"`
	// A token, which can be sent as `page_token` to retrieve the next page.
	// If this field is omitted, there are no subsequent pages.
	NextPageToken        string   `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ListRacksResponse) Reset()         { *m = ListRacksResponse{} }
func (m *ListRacksResponse) String() string { return proto.CompactTextString(m) }
func (*ListRacksResponse) ProtoMessage()    {}
func (*ListRacksResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_bfc37a625f56a717, []int{34}
}

func (m *ListRacksResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListRacksResponse.Unmarshal(m, b)
}
func (m *ListRacksResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListRacksResponse.Marshal(b, m, deterministic)
}
func (m *ListRacksResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListRacksResponse.Merge(m, src)
}
func (m *ListRacksResponse) XXX_Size() int {
	return xxx_messageInfo_ListRacksResponse.Size(m)
}
func (m *ListRacksResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ListRacksResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ListRacksResponse proto.InternalMessageInfo

func (m *ListRacksResponse) GetRacks() []*proto1.Rack {
	if m != nil {
		return m.Racks
	}
	return nil
}

func (m *ListRacksResponse) GetNextPageToken() string {
	if m != nil {
		return m.NextPageToken
	}
	return ""
}

type DeleteRackRequest struct {
	// The name of the Rack to delete
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DeleteRackRequest) Reset()         { *m = DeleteRackRequest{} }
func (m *DeleteRackRequest) String() string { return proto.CompactTextString(m) }
func (*DeleteRackRequest) ProtoMessage()    {}
func (*DeleteRackRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_bfc37a625f56a717, []int{35}
}

func (m *DeleteRackRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DeleteRackRequest.Unmarshal(m, b)
}
func (m *DeleteRackRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DeleteRackRequest.Marshal(b, m, deterministic)
}
func (m *DeleteRackRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteRackRequest.Merge(m, src)
}
func (m *DeleteRackRequest) XXX_Size() int {
	return xxx_messageInfo_DeleteRackRequest.Size(m)
}
func (m *DeleteRackRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteRackRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteRackRequest proto.InternalMessageInfo

func (m *DeleteRackRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

// Contains the required information for creating a MachineLSE represented in
// the database.
type CreateMachineLSERequest struct {
	// The machineLSE to create.
	MachineLSE *proto1.MachineLSE `protobuf:"bytes,1,opt,name=machineLSE,proto3" json:"machineLSE,omitempty"`
	// The ID to use for the MachineLSE, which will become the final component of
	// the MachineLSE's resource name.
	//
	// This value should follow the regex "^[a-zA-Z0-9-_]{4,63}$" (4-63 characters,
	// contains only ASCII letters, numbers, dash and underscore.
	MachineLSEId         string   `protobuf:"bytes,2,opt,name=machineLSE_id,json=machineLSEId,proto3" json:"machineLSE_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CreateMachineLSERequest) Reset()         { *m = CreateMachineLSERequest{} }
func (m *CreateMachineLSERequest) String() string { return proto.CompactTextString(m) }
func (*CreateMachineLSERequest) ProtoMessage()    {}
func (*CreateMachineLSERequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_bfc37a625f56a717, []int{36}
}

func (m *CreateMachineLSERequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CreateMachineLSERequest.Unmarshal(m, b)
}
func (m *CreateMachineLSERequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CreateMachineLSERequest.Marshal(b, m, deterministic)
}
func (m *CreateMachineLSERequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateMachineLSERequest.Merge(m, src)
}
func (m *CreateMachineLSERequest) XXX_Size() int {
	return xxx_messageInfo_CreateMachineLSERequest.Size(m)
}
func (m *CreateMachineLSERequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateMachineLSERequest.DiscardUnknown(m)
}

var xxx_messageInfo_CreateMachineLSERequest proto.InternalMessageInfo

func (m *CreateMachineLSERequest) GetMachineLSE() *proto1.MachineLSE {
	if m != nil {
		return m.MachineLSE
	}
	return nil
}

func (m *CreateMachineLSERequest) GetMachineLSEId() string {
	if m != nil {
		return m.MachineLSEId
	}
	return ""
}

type UpdateMachineLSERequest struct {
	// The machineLSE to update.
	MachineLSE *proto1.MachineLSE `protobuf:"bytes,1,opt,name=machineLSE,proto3" json:"machineLSE,omitempty"`
	// The list of fields to be updated.
	UpdateMask           *field_mask.FieldMask `protobuf:"bytes,2,opt,name=update_mask,json=updateMask,proto3" json:"update_mask,omitempty"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *UpdateMachineLSERequest) Reset()         { *m = UpdateMachineLSERequest{} }
func (m *UpdateMachineLSERequest) String() string { return proto.CompactTextString(m) }
func (*UpdateMachineLSERequest) ProtoMessage()    {}
func (*UpdateMachineLSERequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_bfc37a625f56a717, []int{37}
}

func (m *UpdateMachineLSERequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UpdateMachineLSERequest.Unmarshal(m, b)
}
func (m *UpdateMachineLSERequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UpdateMachineLSERequest.Marshal(b, m, deterministic)
}
func (m *UpdateMachineLSERequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateMachineLSERequest.Merge(m, src)
}
func (m *UpdateMachineLSERequest) XXX_Size() int {
	return xxx_messageInfo_UpdateMachineLSERequest.Size(m)
}
func (m *UpdateMachineLSERequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateMachineLSERequest.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateMachineLSERequest proto.InternalMessageInfo

func (m *UpdateMachineLSERequest) GetMachineLSE() *proto1.MachineLSE {
	if m != nil {
		return m.MachineLSE
	}
	return nil
}

func (m *UpdateMachineLSERequest) GetUpdateMask() *field_mask.FieldMask {
	if m != nil {
		return m.UpdateMask
	}
	return nil
}

type GetMachineLSERequest struct {
	// The name of the machineLSE to retrieve.
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetMachineLSERequest) Reset()         { *m = GetMachineLSERequest{} }
func (m *GetMachineLSERequest) String() string { return proto.CompactTextString(m) }
func (*GetMachineLSERequest) ProtoMessage()    {}
func (*GetMachineLSERequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_bfc37a625f56a717, []int{38}
}

func (m *GetMachineLSERequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetMachineLSERequest.Unmarshal(m, b)
}
func (m *GetMachineLSERequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetMachineLSERequest.Marshal(b, m, deterministic)
}
func (m *GetMachineLSERequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetMachineLSERequest.Merge(m, src)
}
func (m *GetMachineLSERequest) XXX_Size() int {
	return xxx_messageInfo_GetMachineLSERequest.Size(m)
}
func (m *GetMachineLSERequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetMachineLSERequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetMachineLSERequest proto.InternalMessageInfo

func (m *GetMachineLSERequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type ListMachineLSEsRequest struct {
	// The maximum number of machineLSEs to return. The service may return fewer than
	// this value.
	// If unspecified, at most 100 machineLSEs will be returned.
	// The maximum value is 1000; values above 1000 will be coerced to 1000.
	PageSize int32 `protobuf:"varint,1,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// A page token, received from a previous `ListMachineLSEs` call.
	// Provide this to retrieve the subsequent page.
	//
	// When paginating, all other parameters provided to `ListMachineLSEs` must match
	// the call that provided the page token.
	PageToken            string   `protobuf:"bytes,2,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ListMachineLSEsRequest) Reset()         { *m = ListMachineLSEsRequest{} }
func (m *ListMachineLSEsRequest) String() string { return proto.CompactTextString(m) }
func (*ListMachineLSEsRequest) ProtoMessage()    {}
func (*ListMachineLSEsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_bfc37a625f56a717, []int{39}
}

func (m *ListMachineLSEsRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListMachineLSEsRequest.Unmarshal(m, b)
}
func (m *ListMachineLSEsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListMachineLSEsRequest.Marshal(b, m, deterministic)
}
func (m *ListMachineLSEsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListMachineLSEsRequest.Merge(m, src)
}
func (m *ListMachineLSEsRequest) XXX_Size() int {
	return xxx_messageInfo_ListMachineLSEsRequest.Size(m)
}
func (m *ListMachineLSEsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ListMachineLSEsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ListMachineLSEsRequest proto.InternalMessageInfo

func (m *ListMachineLSEsRequest) GetPageSize() int32 {
	if m != nil {
		return m.PageSize
	}
	return 0
}

func (m *ListMachineLSEsRequest) GetPageToken() string {
	if m != nil {
		return m.PageToken
	}
	return ""
}

type ListMachineLSEsResponse struct {
	// The machineLSEs from datastore.
	MachineLSEs []*proto1.MachineLSE `protobuf:"bytes,1,rep,name=machineLSEs,proto3" json:"machineLSEs,omitempty"`
	// A token, which can be sent as `page_token` to retrieve the next page.
	// If this field is omitted, there are no subsequent pages.
	NextPageToken        string   `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ListMachineLSEsResponse) Reset()         { *m = ListMachineLSEsResponse{} }
func (m *ListMachineLSEsResponse) String() string { return proto.CompactTextString(m) }
func (*ListMachineLSEsResponse) ProtoMessage()    {}
func (*ListMachineLSEsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_bfc37a625f56a717, []int{40}
}

func (m *ListMachineLSEsResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListMachineLSEsResponse.Unmarshal(m, b)
}
func (m *ListMachineLSEsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListMachineLSEsResponse.Marshal(b, m, deterministic)
}
func (m *ListMachineLSEsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListMachineLSEsResponse.Merge(m, src)
}
func (m *ListMachineLSEsResponse) XXX_Size() int {
	return xxx_messageInfo_ListMachineLSEsResponse.Size(m)
}
func (m *ListMachineLSEsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ListMachineLSEsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ListMachineLSEsResponse proto.InternalMessageInfo

func (m *ListMachineLSEsResponse) GetMachineLSEs() []*proto1.MachineLSE {
	if m != nil {
		return m.MachineLSEs
	}
	return nil
}

func (m *ListMachineLSEsResponse) GetNextPageToken() string {
	if m != nil {
		return m.NextPageToken
	}
	return ""
}

type DeleteMachineLSERequest struct {
	// The name of the MachineLSE to delete
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DeleteMachineLSERequest) Reset()         { *m = DeleteMachineLSERequest{} }
func (m *DeleteMachineLSERequest) String() string { return proto.CompactTextString(m) }
func (*DeleteMachineLSERequest) ProtoMessage()    {}
func (*DeleteMachineLSERequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_bfc37a625f56a717, []int{41}
}

func (m *DeleteMachineLSERequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DeleteMachineLSERequest.Unmarshal(m, b)
}
func (m *DeleteMachineLSERequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DeleteMachineLSERequest.Marshal(b, m, deterministic)
}
func (m *DeleteMachineLSERequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteMachineLSERequest.Merge(m, src)
}
func (m *DeleteMachineLSERequest) XXX_Size() int {
	return xxx_messageInfo_DeleteMachineLSERequest.Size(m)
}
func (m *DeleteMachineLSERequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteMachineLSERequest.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteMachineLSERequest proto.InternalMessageInfo

func (m *DeleteMachineLSERequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type ImportMachineLSEsRequest struct {
	// Types that are valid to be assigned to Source:
	//	*ImportMachineLSEsRequest_MachineDbSource
	//	*ImportMachineLSEsRequest_ConfigSource
	Source               isImportMachineLSEsRequest_Source `protobuf_oneof:"source"`
	XXX_NoUnkeyedLiteral struct{}                          `json:"-"`
	XXX_unrecognized     []byte                            `json:"-"`
	XXX_sizecache        int32                             `json:"-"`
}

func (m *ImportMachineLSEsRequest) Reset()         { *m = ImportMachineLSEsRequest{} }
func (m *ImportMachineLSEsRequest) String() string { return proto.CompactTextString(m) }
func (*ImportMachineLSEsRequest) ProtoMessage()    {}
func (*ImportMachineLSEsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_bfc37a625f56a717, []int{42}
}

func (m *ImportMachineLSEsRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ImportMachineLSEsRequest.Unmarshal(m, b)
}
func (m *ImportMachineLSEsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ImportMachineLSEsRequest.Marshal(b, m, deterministic)
}
func (m *ImportMachineLSEsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ImportMachineLSEsRequest.Merge(m, src)
}
func (m *ImportMachineLSEsRequest) XXX_Size() int {
	return xxx_messageInfo_ImportMachineLSEsRequest.Size(m)
}
func (m *ImportMachineLSEsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ImportMachineLSEsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ImportMachineLSEsRequest proto.InternalMessageInfo

type isImportMachineLSEsRequest_Source interface {
	isImportMachineLSEsRequest_Source()
}

type ImportMachineLSEsRequest_MachineDbSource struct {
	MachineDbSource *MachineDBSource `protobuf:"bytes,1,opt,name=machine_db_source,json=machineDbSource,proto3,oneof"`
}

type ImportMachineLSEsRequest_ConfigSource struct {
	ConfigSource *ConfigSource `protobuf:"bytes,2,opt,name=config_source,json=configSource,proto3,oneof"`
}

func (*ImportMachineLSEsRequest_MachineDbSource) isImportMachineLSEsRequest_Source() {}

func (*ImportMachineLSEsRequest_ConfigSource) isImportMachineLSEsRequest_Source() {}

func (m *ImportMachineLSEsRequest) GetSource() isImportMachineLSEsRequest_Source {
	if m != nil {
		return m.Source
	}
	return nil
}

func (m *ImportMachineLSEsRequest) GetMachineDbSource() *MachineDBSource {
	if x, ok := m.GetSource().(*ImportMachineLSEsRequest_MachineDbSource); ok {
		return x.MachineDbSource
	}
	return nil
}

func (m *ImportMachineLSEsRequest) GetConfigSource() *ConfigSource {
	if x, ok := m.GetSource().(*ImportMachineLSEsRequest_ConfigSource); ok {
		return x.ConfigSource
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*ImportMachineLSEsRequest) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*ImportMachineLSEsRequest_MachineDbSource)(nil),
		(*ImportMachineLSEsRequest_ConfigSource)(nil),
	}
}

// Contains the required information for creating a RackLSE represented in
// the database.
type CreateRackLSERequest struct {
	// The rackLSE to create.
	RackLSE *proto1.RackLSE `protobuf:"bytes,1,opt,name=rackLSE,proto3" json:"rackLSE,omitempty"`
	// The ID to use for the RackLSE, which will become the final component of
	// the RackLSE's resource name.
	//
	// This value should follow the regex "^[a-zA-Z0-9-_]{4,63}$" (4-63 characters,
	// contains only ASCII letters, numbers, dash and underscore.
	RackLSEId            string   `protobuf:"bytes,2,opt,name=rackLSE_id,json=rackLSEId,proto3" json:"rackLSE_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CreateRackLSERequest) Reset()         { *m = CreateRackLSERequest{} }
func (m *CreateRackLSERequest) String() string { return proto.CompactTextString(m) }
func (*CreateRackLSERequest) ProtoMessage()    {}
func (*CreateRackLSERequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_bfc37a625f56a717, []int{43}
}

func (m *CreateRackLSERequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CreateRackLSERequest.Unmarshal(m, b)
}
func (m *CreateRackLSERequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CreateRackLSERequest.Marshal(b, m, deterministic)
}
func (m *CreateRackLSERequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateRackLSERequest.Merge(m, src)
}
func (m *CreateRackLSERequest) XXX_Size() int {
	return xxx_messageInfo_CreateRackLSERequest.Size(m)
}
func (m *CreateRackLSERequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateRackLSERequest.DiscardUnknown(m)
}

var xxx_messageInfo_CreateRackLSERequest proto.InternalMessageInfo

func (m *CreateRackLSERequest) GetRackLSE() *proto1.RackLSE {
	if m != nil {
		return m.RackLSE
	}
	return nil
}

func (m *CreateRackLSERequest) GetRackLSEId() string {
	if m != nil {
		return m.RackLSEId
	}
	return ""
}

type UpdateRackLSERequest struct {
	// The rackLSE to update.
	RackLSE *proto1.RackLSE `protobuf:"bytes,1,opt,name=rackLSE,proto3" json:"rackLSE,omitempty"`
	// The list of fields to be updated.
	UpdateMask           *field_mask.FieldMask `protobuf:"bytes,2,opt,name=update_mask,json=updateMask,proto3" json:"update_mask,omitempty"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *UpdateRackLSERequest) Reset()         { *m = UpdateRackLSERequest{} }
func (m *UpdateRackLSERequest) String() string { return proto.CompactTextString(m) }
func (*UpdateRackLSERequest) ProtoMessage()    {}
func (*UpdateRackLSERequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_bfc37a625f56a717, []int{44}
}

func (m *UpdateRackLSERequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UpdateRackLSERequest.Unmarshal(m, b)
}
func (m *UpdateRackLSERequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UpdateRackLSERequest.Marshal(b, m, deterministic)
}
func (m *UpdateRackLSERequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateRackLSERequest.Merge(m, src)
}
func (m *UpdateRackLSERequest) XXX_Size() int {
	return xxx_messageInfo_UpdateRackLSERequest.Size(m)
}
func (m *UpdateRackLSERequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateRackLSERequest.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateRackLSERequest proto.InternalMessageInfo

func (m *UpdateRackLSERequest) GetRackLSE() *proto1.RackLSE {
	if m != nil {
		return m.RackLSE
	}
	return nil
}

func (m *UpdateRackLSERequest) GetUpdateMask() *field_mask.FieldMask {
	if m != nil {
		return m.UpdateMask
	}
	return nil
}

type GetRackLSERequest struct {
	// The name of the rackLSE to retrieve.
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetRackLSERequest) Reset()         { *m = GetRackLSERequest{} }
func (m *GetRackLSERequest) String() string { return proto.CompactTextString(m) }
func (*GetRackLSERequest) ProtoMessage()    {}
func (*GetRackLSERequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_bfc37a625f56a717, []int{45}
}

func (m *GetRackLSERequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetRackLSERequest.Unmarshal(m, b)
}
func (m *GetRackLSERequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetRackLSERequest.Marshal(b, m, deterministic)
}
func (m *GetRackLSERequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetRackLSERequest.Merge(m, src)
}
func (m *GetRackLSERequest) XXX_Size() int {
	return xxx_messageInfo_GetRackLSERequest.Size(m)
}
func (m *GetRackLSERequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetRackLSERequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetRackLSERequest proto.InternalMessageInfo

func (m *GetRackLSERequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type ListRackLSEsRequest struct {
	// The maximum number of rackLSEs to return. The service may return fewer than
	// this value.
	// If unspecified, at most 100 rackLSEs will be returned.
	// The maximum value is 1000; values above 1000 will be coerced to 1000.
	PageSize int32 `protobuf:"varint,1,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// A page token, received from a previous `ListRackLSEs` call.
	// Provide this to retrieve the subsequent page.
	//
	// When paginating, all other parameters provided to `ListRackLSEs` must match
	// the call that provided the page token.
	PageToken            string   `protobuf:"bytes,2,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ListRackLSEsRequest) Reset()         { *m = ListRackLSEsRequest{} }
func (m *ListRackLSEsRequest) String() string { return proto.CompactTextString(m) }
func (*ListRackLSEsRequest) ProtoMessage()    {}
func (*ListRackLSEsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_bfc37a625f56a717, []int{46}
}

func (m *ListRackLSEsRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListRackLSEsRequest.Unmarshal(m, b)
}
func (m *ListRackLSEsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListRackLSEsRequest.Marshal(b, m, deterministic)
}
func (m *ListRackLSEsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListRackLSEsRequest.Merge(m, src)
}
func (m *ListRackLSEsRequest) XXX_Size() int {
	return xxx_messageInfo_ListRackLSEsRequest.Size(m)
}
func (m *ListRackLSEsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ListRackLSEsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ListRackLSEsRequest proto.InternalMessageInfo

func (m *ListRackLSEsRequest) GetPageSize() int32 {
	if m != nil {
		return m.PageSize
	}
	return 0
}

func (m *ListRackLSEsRequest) GetPageToken() string {
	if m != nil {
		return m.PageToken
	}
	return ""
}

type ListRackLSEsResponse struct {
	// The rackLSEs from datastore.
	RackLSEs []*proto1.RackLSE `protobuf:"bytes,1,rep,name=rackLSEs,proto3" json:"rackLSEs,omitempty"`
	// A token, which can be sent as `page_token` to retrieve the next page.
	// If this field is omitted, there are no subsequent pages.
	NextPageToken        string   `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ListRackLSEsResponse) Reset()         { *m = ListRackLSEsResponse{} }
func (m *ListRackLSEsResponse) String() string { return proto.CompactTextString(m) }
func (*ListRackLSEsResponse) ProtoMessage()    {}
func (*ListRackLSEsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_bfc37a625f56a717, []int{47}
}

func (m *ListRackLSEsResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListRackLSEsResponse.Unmarshal(m, b)
}
func (m *ListRackLSEsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListRackLSEsResponse.Marshal(b, m, deterministic)
}
func (m *ListRackLSEsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListRackLSEsResponse.Merge(m, src)
}
func (m *ListRackLSEsResponse) XXX_Size() int {
	return xxx_messageInfo_ListRackLSEsResponse.Size(m)
}
func (m *ListRackLSEsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ListRackLSEsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ListRackLSEsResponse proto.InternalMessageInfo

func (m *ListRackLSEsResponse) GetRackLSEs() []*proto1.RackLSE {
	if m != nil {
		return m.RackLSEs
	}
	return nil
}

func (m *ListRackLSEsResponse) GetNextPageToken() string {
	if m != nil {
		return m.NextPageToken
	}
	return ""
}

type DeleteRackLSERequest struct {
	// The name of the RackLSE to delete
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DeleteRackLSERequest) Reset()         { *m = DeleteRackLSERequest{} }
func (m *DeleteRackLSERequest) String() string { return proto.CompactTextString(m) }
func (*DeleteRackLSERequest) ProtoMessage()    {}
func (*DeleteRackLSERequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_bfc37a625f56a717, []int{48}
}

func (m *DeleteRackLSERequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DeleteRackLSERequest.Unmarshal(m, b)
}
func (m *DeleteRackLSERequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DeleteRackLSERequest.Marshal(b, m, deterministic)
}
func (m *DeleteRackLSERequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteRackLSERequest.Merge(m, src)
}
func (m *DeleteRackLSERequest) XXX_Size() int {
	return xxx_messageInfo_DeleteRackLSERequest.Size(m)
}
func (m *DeleteRackLSERequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteRackLSERequest.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteRackLSERequest proto.InternalMessageInfo

func (m *DeleteRackLSERequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

// Contains the required information for creating a Nic represented in
// the database.
type CreateNicRequest struct {
	// The nic to create.
	Nic *proto1.Nic `protobuf:"bytes,1,opt,name=nic,proto3" json:"nic,omitempty"`
	// The ID to use for the Nic, which will become the final component of
	// the Nic's resource name.
	//
	// This value should follow the regex "^[a-zA-Z0-9-_]{4,63}$" (4-63 characters,
	// contains only ASCII letters, numbers, dash and underscore.
	NicId                string   `protobuf:"bytes,2,opt,name=nic_id,json=nicId,proto3" json:"nic_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CreateNicRequest) Reset()         { *m = CreateNicRequest{} }
func (m *CreateNicRequest) String() string { return proto.CompactTextString(m) }
func (*CreateNicRequest) ProtoMessage()    {}
func (*CreateNicRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_bfc37a625f56a717, []int{49}
}

func (m *CreateNicRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CreateNicRequest.Unmarshal(m, b)
}
func (m *CreateNicRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CreateNicRequest.Marshal(b, m, deterministic)
}
func (m *CreateNicRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateNicRequest.Merge(m, src)
}
func (m *CreateNicRequest) XXX_Size() int {
	return xxx_messageInfo_CreateNicRequest.Size(m)
}
func (m *CreateNicRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateNicRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CreateNicRequest proto.InternalMessageInfo

func (m *CreateNicRequest) GetNic() *proto1.Nic {
	if m != nil {
		return m.Nic
	}
	return nil
}

func (m *CreateNicRequest) GetNicId() string {
	if m != nil {
		return m.NicId
	}
	return ""
}

type UpdateNicRequest struct {
	// The nic to update.
	Nic *proto1.Nic `protobuf:"bytes,1,opt,name=nic,proto3" json:"nic,omitempty"`
	// The list of fields to be updated.
	UpdateMask           *field_mask.FieldMask `protobuf:"bytes,2,opt,name=update_mask,json=updateMask,proto3" json:"update_mask,omitempty"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *UpdateNicRequest) Reset()         { *m = UpdateNicRequest{} }
func (m *UpdateNicRequest) String() string { return proto.CompactTextString(m) }
func (*UpdateNicRequest) ProtoMessage()    {}
func (*UpdateNicRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_bfc37a625f56a717, []int{50}
}

func (m *UpdateNicRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UpdateNicRequest.Unmarshal(m, b)
}
func (m *UpdateNicRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UpdateNicRequest.Marshal(b, m, deterministic)
}
func (m *UpdateNicRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateNicRequest.Merge(m, src)
}
func (m *UpdateNicRequest) XXX_Size() int {
	return xxx_messageInfo_UpdateNicRequest.Size(m)
}
func (m *UpdateNicRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateNicRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateNicRequest proto.InternalMessageInfo

func (m *UpdateNicRequest) GetNic() *proto1.Nic {
	if m != nil {
		return m.Nic
	}
	return nil
}

func (m *UpdateNicRequest) GetUpdateMask() *field_mask.FieldMask {
	if m != nil {
		return m.UpdateMask
	}
	return nil
}

type GetNicRequest struct {
	// The name of the nic to retrieve.
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetNicRequest) Reset()         { *m = GetNicRequest{} }
func (m *GetNicRequest) String() string { return proto.CompactTextString(m) }
func (*GetNicRequest) ProtoMessage()    {}
func (*GetNicRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_bfc37a625f56a717, []int{51}
}

func (m *GetNicRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetNicRequest.Unmarshal(m, b)
}
func (m *GetNicRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetNicRequest.Marshal(b, m, deterministic)
}
func (m *GetNicRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetNicRequest.Merge(m, src)
}
func (m *GetNicRequest) XXX_Size() int {
	return xxx_messageInfo_GetNicRequest.Size(m)
}
func (m *GetNicRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetNicRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetNicRequest proto.InternalMessageInfo

func (m *GetNicRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type ListNicsRequest struct {
	// The maximum number of nics to return. The service may return fewer than
	// this value.
	// If unspecified, at most 100 nics will be returned.
	// The maximum value is 1000; values above 1000 will be coerced to 1000.
	PageSize int32 `protobuf:"varint,1,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// A page token, received from a previous `ListNics` call.
	// Provide this to retrieve the subsequent page.
	//
	// When paginating, all other parameters provided to `ListNics` must match
	// the call that provided the page token.
	PageToken            string   `protobuf:"bytes,2,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ListNicsRequest) Reset()         { *m = ListNicsRequest{} }
func (m *ListNicsRequest) String() string { return proto.CompactTextString(m) }
func (*ListNicsRequest) ProtoMessage()    {}
func (*ListNicsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_bfc37a625f56a717, []int{52}
}

func (m *ListNicsRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListNicsRequest.Unmarshal(m, b)
}
func (m *ListNicsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListNicsRequest.Marshal(b, m, deterministic)
}
func (m *ListNicsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListNicsRequest.Merge(m, src)
}
func (m *ListNicsRequest) XXX_Size() int {
	return xxx_messageInfo_ListNicsRequest.Size(m)
}
func (m *ListNicsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ListNicsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ListNicsRequest proto.InternalMessageInfo

func (m *ListNicsRequest) GetPageSize() int32 {
	if m != nil {
		return m.PageSize
	}
	return 0
}

func (m *ListNicsRequest) GetPageToken() string {
	if m != nil {
		return m.PageToken
	}
	return ""
}

type ListNicsResponse struct {
	// The nics from datastore.
	Nics []*proto1.Nic `protobuf:"bytes,1,rep,name=nics,proto3" json:"nics,omitempty"`
	// A token, which can be sent as `page_token` to retrieve the next page.
	// If this field is omitted, there are no subsequent pages.
	NextPageToken        string   `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ListNicsResponse) Reset()         { *m = ListNicsResponse{} }
func (m *ListNicsResponse) String() string { return proto.CompactTextString(m) }
func (*ListNicsResponse) ProtoMessage()    {}
func (*ListNicsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_bfc37a625f56a717, []int{53}
}

func (m *ListNicsResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListNicsResponse.Unmarshal(m, b)
}
func (m *ListNicsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListNicsResponse.Marshal(b, m, deterministic)
}
func (m *ListNicsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListNicsResponse.Merge(m, src)
}
func (m *ListNicsResponse) XXX_Size() int {
	return xxx_messageInfo_ListNicsResponse.Size(m)
}
func (m *ListNicsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ListNicsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ListNicsResponse proto.InternalMessageInfo

func (m *ListNicsResponse) GetNics() []*proto1.Nic {
	if m != nil {
		return m.Nics
	}
	return nil
}

func (m *ListNicsResponse) GetNextPageToken() string {
	if m != nil {
		return m.NextPageToken
	}
	return ""
}

type DeleteNicRequest struct {
	// The name of the Nic to delete
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DeleteNicRequest) Reset()         { *m = DeleteNicRequest{} }
func (m *DeleteNicRequest) String() string { return proto.CompactTextString(m) }
func (*DeleteNicRequest) ProtoMessage()    {}
func (*DeleteNicRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_bfc37a625f56a717, []int{54}
}

func (m *DeleteNicRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DeleteNicRequest.Unmarshal(m, b)
}
func (m *DeleteNicRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DeleteNicRequest.Marshal(b, m, deterministic)
}
func (m *DeleteNicRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteNicRequest.Merge(m, src)
}
func (m *DeleteNicRequest) XXX_Size() int {
	return xxx_messageInfo_DeleteNicRequest.Size(m)
}
func (m *DeleteNicRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteNicRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteNicRequest proto.InternalMessageInfo

func (m *DeleteNicRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type ImportNicsRequest struct {
	// Types that are valid to be assigned to Source:
	//	*ImportNicsRequest_MachineDbSource
	//	*ImportNicsRequest_ConfigSource
	Source               isImportNicsRequest_Source `protobuf_oneof:"source"`
	XXX_NoUnkeyedLiteral struct{}                   `json:"-"`
	XXX_unrecognized     []byte                     `json:"-"`
	XXX_sizecache        int32                      `json:"-"`
}

func (m *ImportNicsRequest) Reset()         { *m = ImportNicsRequest{} }
func (m *ImportNicsRequest) String() string { return proto.CompactTextString(m) }
func (*ImportNicsRequest) ProtoMessage()    {}
func (*ImportNicsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_bfc37a625f56a717, []int{55}
}

func (m *ImportNicsRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ImportNicsRequest.Unmarshal(m, b)
}
func (m *ImportNicsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ImportNicsRequest.Marshal(b, m, deterministic)
}
func (m *ImportNicsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ImportNicsRequest.Merge(m, src)
}
func (m *ImportNicsRequest) XXX_Size() int {
	return xxx_messageInfo_ImportNicsRequest.Size(m)
}
func (m *ImportNicsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ImportNicsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ImportNicsRequest proto.InternalMessageInfo

type isImportNicsRequest_Source interface {
	isImportNicsRequest_Source()
}

type ImportNicsRequest_MachineDbSource struct {
	MachineDbSource *MachineDBSource `protobuf:"bytes,1,opt,name=machine_db_source,json=machineDbSource,proto3,oneof"`
}

type ImportNicsRequest_ConfigSource struct {
	ConfigSource *ConfigSource `protobuf:"bytes,2,opt,name=config_source,json=configSource,proto3,oneof"`
}

func (*ImportNicsRequest_MachineDbSource) isImportNicsRequest_Source() {}

func (*ImportNicsRequest_ConfigSource) isImportNicsRequest_Source() {}

func (m *ImportNicsRequest) GetSource() isImportNicsRequest_Source {
	if m != nil {
		return m.Source
	}
	return nil
}

func (m *ImportNicsRequest) GetMachineDbSource() *MachineDBSource {
	if x, ok := m.GetSource().(*ImportNicsRequest_MachineDbSource); ok {
		return x.MachineDbSource
	}
	return nil
}

func (m *ImportNicsRequest) GetConfigSource() *ConfigSource {
	if x, ok := m.GetSource().(*ImportNicsRequest_ConfigSource); ok {
		return x.ConfigSource
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*ImportNicsRequest) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*ImportNicsRequest_MachineDbSource)(nil),
		(*ImportNicsRequest_ConfigSource)(nil),
	}
}

type ImportDatacentersRequest struct {
	// Types that are valid to be assigned to Source:
	//	*ImportDatacentersRequest_MachineDbSource
	//	*ImportDatacentersRequest_ConfigSource
	Source               isImportDatacentersRequest_Source `protobuf_oneof:"source"`
	XXX_NoUnkeyedLiteral struct{}                          `json:"-"`
	XXX_unrecognized     []byte                            `json:"-"`
	XXX_sizecache        int32                             `json:"-"`
}

func (m *ImportDatacentersRequest) Reset()         { *m = ImportDatacentersRequest{} }
func (m *ImportDatacentersRequest) String() string { return proto.CompactTextString(m) }
func (*ImportDatacentersRequest) ProtoMessage()    {}
func (*ImportDatacentersRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_bfc37a625f56a717, []int{56}
}

func (m *ImportDatacentersRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ImportDatacentersRequest.Unmarshal(m, b)
}
func (m *ImportDatacentersRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ImportDatacentersRequest.Marshal(b, m, deterministic)
}
func (m *ImportDatacentersRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ImportDatacentersRequest.Merge(m, src)
}
func (m *ImportDatacentersRequest) XXX_Size() int {
	return xxx_messageInfo_ImportDatacentersRequest.Size(m)
}
func (m *ImportDatacentersRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ImportDatacentersRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ImportDatacentersRequest proto.InternalMessageInfo

type isImportDatacentersRequest_Source interface {
	isImportDatacentersRequest_Source()
}

type ImportDatacentersRequest_MachineDbSource struct {
	MachineDbSource *MachineDBSource `protobuf:"bytes,1,opt,name=machine_db_source,json=machineDbSource,proto3,oneof"`
}

type ImportDatacentersRequest_ConfigSource struct {
	ConfigSource *ConfigSource `protobuf:"bytes,2,opt,name=config_source,json=configSource,proto3,oneof"`
}

func (*ImportDatacentersRequest_MachineDbSource) isImportDatacentersRequest_Source() {}

func (*ImportDatacentersRequest_ConfigSource) isImportDatacentersRequest_Source() {}

func (m *ImportDatacentersRequest) GetSource() isImportDatacentersRequest_Source {
	if m != nil {
		return m.Source
	}
	return nil
}

func (m *ImportDatacentersRequest) GetMachineDbSource() *MachineDBSource {
	if x, ok := m.GetSource().(*ImportDatacentersRequest_MachineDbSource); ok {
		return x.MachineDbSource
	}
	return nil
}

func (m *ImportDatacentersRequest) GetConfigSource() *ConfigSource {
	if x, ok := m.GetSource().(*ImportDatacentersRequest_ConfigSource); ok {
		return x.ConfigSource
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*ImportDatacentersRequest) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*ImportDatacentersRequest_MachineDbSource)(nil),
		(*ImportDatacentersRequest_ConfigSource)(nil),
	}
}

// Contains the required information for creating a KVM represented in
// the database.
type CreateKVMRequest struct {
	// The KVM to create.
	KVM *proto1.KVM `protobuf:"bytes,1,opt,name=KVM,proto3" json:"KVM,omitempty"`
	// The ID to use for the KVM, which will become the final component of
	// the KVM's resource name.
	//
	// This value should follow the regex "^[a-zA-Z0-9-_]{4,63}$" (4-63 characters,
	// contains only ASCII letters, numbers, dash and underscore.
	KVMId                string   `protobuf:"bytes,2,opt,name=KVM_id,json=KVMId,proto3" json:"KVM_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CreateKVMRequest) Reset()         { *m = CreateKVMRequest{} }
func (m *CreateKVMRequest) String() string { return proto.CompactTextString(m) }
func (*CreateKVMRequest) ProtoMessage()    {}
func (*CreateKVMRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_bfc37a625f56a717, []int{57}
}

func (m *CreateKVMRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CreateKVMRequest.Unmarshal(m, b)
}
func (m *CreateKVMRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CreateKVMRequest.Marshal(b, m, deterministic)
}
func (m *CreateKVMRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateKVMRequest.Merge(m, src)
}
func (m *CreateKVMRequest) XXX_Size() int {
	return xxx_messageInfo_CreateKVMRequest.Size(m)
}
func (m *CreateKVMRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateKVMRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CreateKVMRequest proto.InternalMessageInfo

func (m *CreateKVMRequest) GetKVM() *proto1.KVM {
	if m != nil {
		return m.KVM
	}
	return nil
}

func (m *CreateKVMRequest) GetKVMId() string {
	if m != nil {
		return m.KVMId
	}
	return ""
}

type UpdateKVMRequest struct {
	// The KVM to update.
	KVM *proto1.KVM `protobuf:"bytes,1,opt,name=KVM,proto3" json:"KVM,omitempty"`
	// The list of fields to be updated.
	UpdateMask           *field_mask.FieldMask `protobuf:"bytes,2,opt,name=update_mask,json=updateMask,proto3" json:"update_mask,omitempty"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *UpdateKVMRequest) Reset()         { *m = UpdateKVMRequest{} }
func (m *UpdateKVMRequest) String() string { return proto.CompactTextString(m) }
func (*UpdateKVMRequest) ProtoMessage()    {}
func (*UpdateKVMRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_bfc37a625f56a717, []int{58}
}

func (m *UpdateKVMRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UpdateKVMRequest.Unmarshal(m, b)
}
func (m *UpdateKVMRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UpdateKVMRequest.Marshal(b, m, deterministic)
}
func (m *UpdateKVMRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateKVMRequest.Merge(m, src)
}
func (m *UpdateKVMRequest) XXX_Size() int {
	return xxx_messageInfo_UpdateKVMRequest.Size(m)
}
func (m *UpdateKVMRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateKVMRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateKVMRequest proto.InternalMessageInfo

func (m *UpdateKVMRequest) GetKVM() *proto1.KVM {
	if m != nil {
		return m.KVM
	}
	return nil
}

func (m *UpdateKVMRequest) GetUpdateMask() *field_mask.FieldMask {
	if m != nil {
		return m.UpdateMask
	}
	return nil
}

type GetKVMRequest struct {
	// The name of the KVM to retrieve.
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetKVMRequest) Reset()         { *m = GetKVMRequest{} }
func (m *GetKVMRequest) String() string { return proto.CompactTextString(m) }
func (*GetKVMRequest) ProtoMessage()    {}
func (*GetKVMRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_bfc37a625f56a717, []int{59}
}

func (m *GetKVMRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetKVMRequest.Unmarshal(m, b)
}
func (m *GetKVMRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetKVMRequest.Marshal(b, m, deterministic)
}
func (m *GetKVMRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetKVMRequest.Merge(m, src)
}
func (m *GetKVMRequest) XXX_Size() int {
	return xxx_messageInfo_GetKVMRequest.Size(m)
}
func (m *GetKVMRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetKVMRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetKVMRequest proto.InternalMessageInfo

func (m *GetKVMRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type ListKVMsRequest struct {
	// The maximum number of KVMs to return. The service may return fewer than
	// this value.
	// If unspecified, at most 100 KVMs will be returned.
	// The maximum value is 1000; values above 1000 will be coerced to 1000.
	PageSize int32 `protobuf:"varint,1,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// A page token, received from a previous `ListKVMs` call.
	// Provide this to retrieve the subsequent page.
	//
	// When paginating, all other parameters provided to `ListKVMs` must match
	// the call that provided the page token.
	PageToken            string   `protobuf:"bytes,2,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ListKVMsRequest) Reset()         { *m = ListKVMsRequest{} }
func (m *ListKVMsRequest) String() string { return proto.CompactTextString(m) }
func (*ListKVMsRequest) ProtoMessage()    {}
func (*ListKVMsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_bfc37a625f56a717, []int{60}
}

func (m *ListKVMsRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListKVMsRequest.Unmarshal(m, b)
}
func (m *ListKVMsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListKVMsRequest.Marshal(b, m, deterministic)
}
func (m *ListKVMsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListKVMsRequest.Merge(m, src)
}
func (m *ListKVMsRequest) XXX_Size() int {
	return xxx_messageInfo_ListKVMsRequest.Size(m)
}
func (m *ListKVMsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ListKVMsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ListKVMsRequest proto.InternalMessageInfo

func (m *ListKVMsRequest) GetPageSize() int32 {
	if m != nil {
		return m.PageSize
	}
	return 0
}

func (m *ListKVMsRequest) GetPageToken() string {
	if m != nil {
		return m.PageToken
	}
	return ""
}

type ListKVMsResponse struct {
	// The KVMs from datastore.
	KVMs []*proto1.KVM `protobuf:"bytes,1,rep,name=KVMs,proto3" json:"KVMs,omitempty"`
	// A token, which can be sent as `page_token` to retrieve the next page.
	// If this field is omitted, there are no subsequent pages.
	NextPageToken        string   `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ListKVMsResponse) Reset()         { *m = ListKVMsResponse{} }
func (m *ListKVMsResponse) String() string { return proto.CompactTextString(m) }
func (*ListKVMsResponse) ProtoMessage()    {}
func (*ListKVMsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_bfc37a625f56a717, []int{61}
}

func (m *ListKVMsResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListKVMsResponse.Unmarshal(m, b)
}
func (m *ListKVMsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListKVMsResponse.Marshal(b, m, deterministic)
}
func (m *ListKVMsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListKVMsResponse.Merge(m, src)
}
func (m *ListKVMsResponse) XXX_Size() int {
	return xxx_messageInfo_ListKVMsResponse.Size(m)
}
func (m *ListKVMsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ListKVMsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ListKVMsResponse proto.InternalMessageInfo

func (m *ListKVMsResponse) GetKVMs() []*proto1.KVM {
	if m != nil {
		return m.KVMs
	}
	return nil
}

func (m *ListKVMsResponse) GetNextPageToken() string {
	if m != nil {
		return m.NextPageToken
	}
	return ""
}

type DeleteKVMRequest struct {
	// The name of the KVM to delete
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DeleteKVMRequest) Reset()         { *m = DeleteKVMRequest{} }
func (m *DeleteKVMRequest) String() string { return proto.CompactTextString(m) }
func (*DeleteKVMRequest) ProtoMessage()    {}
func (*DeleteKVMRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_bfc37a625f56a717, []int{62}
}

func (m *DeleteKVMRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DeleteKVMRequest.Unmarshal(m, b)
}
func (m *DeleteKVMRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DeleteKVMRequest.Marshal(b, m, deterministic)
}
func (m *DeleteKVMRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteKVMRequest.Merge(m, src)
}
func (m *DeleteKVMRequest) XXX_Size() int {
	return xxx_messageInfo_DeleteKVMRequest.Size(m)
}
func (m *DeleteKVMRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteKVMRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteKVMRequest proto.InternalMessageInfo

func (m *DeleteKVMRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

// Contains the required information for creating a RPM represented in
// the database.
type CreateRPMRequest struct {
	// The RPM to create.
	RPM *proto1.RPM `protobuf:"bytes,1,opt,name=RPM,proto3" json:"RPM,omitempty"`
	// The ID to use for the RPM, which will become the final component of
	// the RPM's resource name.
	//
	// This value should follow the regex "^[a-zA-Z0-9-_]{4,63}$" (4-63 characters,
	// contains only ASCII letters, numbers, dash and underscore.
	RPMId                string   `protobuf:"bytes,2,opt,name=RPM_id,json=RPMId,proto3" json:"RPM_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CreateRPMRequest) Reset()         { *m = CreateRPMRequest{} }
func (m *CreateRPMRequest) String() string { return proto.CompactTextString(m) }
func (*CreateRPMRequest) ProtoMessage()    {}
func (*CreateRPMRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_bfc37a625f56a717, []int{63}
}

func (m *CreateRPMRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CreateRPMRequest.Unmarshal(m, b)
}
func (m *CreateRPMRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CreateRPMRequest.Marshal(b, m, deterministic)
}
func (m *CreateRPMRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateRPMRequest.Merge(m, src)
}
func (m *CreateRPMRequest) XXX_Size() int {
	return xxx_messageInfo_CreateRPMRequest.Size(m)
}
func (m *CreateRPMRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateRPMRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CreateRPMRequest proto.InternalMessageInfo

func (m *CreateRPMRequest) GetRPM() *proto1.RPM {
	if m != nil {
		return m.RPM
	}
	return nil
}

func (m *CreateRPMRequest) GetRPMId() string {
	if m != nil {
		return m.RPMId
	}
	return ""
}

type UpdateRPMRequest struct {
	// The RPM to update.
	RPM *proto1.RPM `protobuf:"bytes,1,opt,name=RPM,proto3" json:"RPM,omitempty"`
	// The list of fields to be updated.
	UpdateMask           *field_mask.FieldMask `protobuf:"bytes,2,opt,name=update_mask,json=updateMask,proto3" json:"update_mask,omitempty"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *UpdateRPMRequest) Reset()         { *m = UpdateRPMRequest{} }
func (m *UpdateRPMRequest) String() string { return proto.CompactTextString(m) }
func (*UpdateRPMRequest) ProtoMessage()    {}
func (*UpdateRPMRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_bfc37a625f56a717, []int{64}
}

func (m *UpdateRPMRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UpdateRPMRequest.Unmarshal(m, b)
}
func (m *UpdateRPMRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UpdateRPMRequest.Marshal(b, m, deterministic)
}
func (m *UpdateRPMRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateRPMRequest.Merge(m, src)
}
func (m *UpdateRPMRequest) XXX_Size() int {
	return xxx_messageInfo_UpdateRPMRequest.Size(m)
}
func (m *UpdateRPMRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateRPMRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateRPMRequest proto.InternalMessageInfo

func (m *UpdateRPMRequest) GetRPM() *proto1.RPM {
	if m != nil {
		return m.RPM
	}
	return nil
}

func (m *UpdateRPMRequest) GetUpdateMask() *field_mask.FieldMask {
	if m != nil {
		return m.UpdateMask
	}
	return nil
}

type GetRPMRequest struct {
	// The name of the RPM to retrieve.
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetRPMRequest) Reset()         { *m = GetRPMRequest{} }
func (m *GetRPMRequest) String() string { return proto.CompactTextString(m) }
func (*GetRPMRequest) ProtoMessage()    {}
func (*GetRPMRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_bfc37a625f56a717, []int{65}
}

func (m *GetRPMRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetRPMRequest.Unmarshal(m, b)
}
func (m *GetRPMRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetRPMRequest.Marshal(b, m, deterministic)
}
func (m *GetRPMRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetRPMRequest.Merge(m, src)
}
func (m *GetRPMRequest) XXX_Size() int {
	return xxx_messageInfo_GetRPMRequest.Size(m)
}
func (m *GetRPMRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetRPMRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetRPMRequest proto.InternalMessageInfo

func (m *GetRPMRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type ListRPMsRequest struct {
	// The maximum number of RPMs to return. The service may return fewer than
	// this value.
	// If unspecified, at most 100 RPMs will be returned.
	// The maximum value is 1000; values above 1000 will be coerced to 1000.
	PageSize int32 `protobuf:"varint,1,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// A page token, received from a previous `ListRPMs` call.
	// Provide this to retrieve the subsequent page.
	//
	// When paginating, all other parameters provided to `ListRPMs` must match
	// the call that provided the page token.
	PageToken            string   `protobuf:"bytes,2,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ListRPMsRequest) Reset()         { *m = ListRPMsRequest{} }
func (m *ListRPMsRequest) String() string { return proto.CompactTextString(m) }
func (*ListRPMsRequest) ProtoMessage()    {}
func (*ListRPMsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_bfc37a625f56a717, []int{66}
}

func (m *ListRPMsRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListRPMsRequest.Unmarshal(m, b)
}
func (m *ListRPMsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListRPMsRequest.Marshal(b, m, deterministic)
}
func (m *ListRPMsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListRPMsRequest.Merge(m, src)
}
func (m *ListRPMsRequest) XXX_Size() int {
	return xxx_messageInfo_ListRPMsRequest.Size(m)
}
func (m *ListRPMsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ListRPMsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ListRPMsRequest proto.InternalMessageInfo

func (m *ListRPMsRequest) GetPageSize() int32 {
	if m != nil {
		return m.PageSize
	}
	return 0
}

func (m *ListRPMsRequest) GetPageToken() string {
	if m != nil {
		return m.PageToken
	}
	return ""
}

type ListRPMsResponse struct {
	// The RPMs from datastore.
	RPMs []*proto1.RPM `protobuf:"bytes,1,rep,name=RPMs,proto3" json:"RPMs,omitempty"`
	// A token, which can be sent as `page_token` to retrieve the next page.
	// If this field is omitted, there are no subsequent pages.
	NextPageToken        string   `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ListRPMsResponse) Reset()         { *m = ListRPMsResponse{} }
func (m *ListRPMsResponse) String() string { return proto.CompactTextString(m) }
func (*ListRPMsResponse) ProtoMessage()    {}
func (*ListRPMsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_bfc37a625f56a717, []int{67}
}

func (m *ListRPMsResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListRPMsResponse.Unmarshal(m, b)
}
func (m *ListRPMsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListRPMsResponse.Marshal(b, m, deterministic)
}
func (m *ListRPMsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListRPMsResponse.Merge(m, src)
}
func (m *ListRPMsResponse) XXX_Size() int {
	return xxx_messageInfo_ListRPMsResponse.Size(m)
}
func (m *ListRPMsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ListRPMsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ListRPMsResponse proto.InternalMessageInfo

func (m *ListRPMsResponse) GetRPMs() []*proto1.RPM {
	if m != nil {
		return m.RPMs
	}
	return nil
}

func (m *ListRPMsResponse) GetNextPageToken() string {
	if m != nil {
		return m.NextPageToken
	}
	return ""
}

type DeleteRPMRequest struct {
	// The name of the RPM to delete
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DeleteRPMRequest) Reset()         { *m = DeleteRPMRequest{} }
func (m *DeleteRPMRequest) String() string { return proto.CompactTextString(m) }
func (*DeleteRPMRequest) ProtoMessage()    {}
func (*DeleteRPMRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_bfc37a625f56a717, []int{68}
}

func (m *DeleteRPMRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DeleteRPMRequest.Unmarshal(m, b)
}
func (m *DeleteRPMRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DeleteRPMRequest.Marshal(b, m, deterministic)
}
func (m *DeleteRPMRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteRPMRequest.Merge(m, src)
}
func (m *DeleteRPMRequest) XXX_Size() int {
	return xxx_messageInfo_DeleteRPMRequest.Size(m)
}
func (m *DeleteRPMRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteRPMRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteRPMRequest proto.InternalMessageInfo

func (m *DeleteRPMRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

// Contains the required information for creating a Drac represented in
// the database.
type CreateDracRequest struct {
	// The drac to create.
	Drac *proto1.Drac `protobuf:"bytes,1,opt,name=drac,proto3" json:"drac,omitempty"`
	// The ID to use for the Drac, which will become the final component of
	// the Drac's resource name.
	//
	// This value should follow the regex "^[a-zA-Z0-9-_]{4,63}$" (4-63 characters,
	// contains only ASCII letters, numbers, dash and underscore.
	DracId               string   `protobuf:"bytes,2,opt,name=drac_id,json=dracId,proto3" json:"drac_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CreateDracRequest) Reset()         { *m = CreateDracRequest{} }
func (m *CreateDracRequest) String() string { return proto.CompactTextString(m) }
func (*CreateDracRequest) ProtoMessage()    {}
func (*CreateDracRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_bfc37a625f56a717, []int{69}
}

func (m *CreateDracRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CreateDracRequest.Unmarshal(m, b)
}
func (m *CreateDracRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CreateDracRequest.Marshal(b, m, deterministic)
}
func (m *CreateDracRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateDracRequest.Merge(m, src)
}
func (m *CreateDracRequest) XXX_Size() int {
	return xxx_messageInfo_CreateDracRequest.Size(m)
}
func (m *CreateDracRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateDracRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CreateDracRequest proto.InternalMessageInfo

func (m *CreateDracRequest) GetDrac() *proto1.Drac {
	if m != nil {
		return m.Drac
	}
	return nil
}

func (m *CreateDracRequest) GetDracId() string {
	if m != nil {
		return m.DracId
	}
	return ""
}

type UpdateDracRequest struct {
	// The drac to update.
	Drac *proto1.Drac `protobuf:"bytes,1,opt,name=drac,proto3" json:"drac,omitempty"`
	// The list of fields to be updated.
	UpdateMask           *field_mask.FieldMask `protobuf:"bytes,2,opt,name=update_mask,json=updateMask,proto3" json:"update_mask,omitempty"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *UpdateDracRequest) Reset()         { *m = UpdateDracRequest{} }
func (m *UpdateDracRequest) String() string { return proto.CompactTextString(m) }
func (*UpdateDracRequest) ProtoMessage()    {}
func (*UpdateDracRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_bfc37a625f56a717, []int{70}
}

func (m *UpdateDracRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UpdateDracRequest.Unmarshal(m, b)
}
func (m *UpdateDracRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UpdateDracRequest.Marshal(b, m, deterministic)
}
func (m *UpdateDracRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateDracRequest.Merge(m, src)
}
func (m *UpdateDracRequest) XXX_Size() int {
	return xxx_messageInfo_UpdateDracRequest.Size(m)
}
func (m *UpdateDracRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateDracRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateDracRequest proto.InternalMessageInfo

func (m *UpdateDracRequest) GetDrac() *proto1.Drac {
	if m != nil {
		return m.Drac
	}
	return nil
}

func (m *UpdateDracRequest) GetUpdateMask() *field_mask.FieldMask {
	if m != nil {
		return m.UpdateMask
	}
	return nil
}

type GetDracRequest struct {
	// The name of the drac to retrieve.
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetDracRequest) Reset()         { *m = GetDracRequest{} }
func (m *GetDracRequest) String() string { return proto.CompactTextString(m) }
func (*GetDracRequest) ProtoMessage()    {}
func (*GetDracRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_bfc37a625f56a717, []int{71}
}

func (m *GetDracRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetDracRequest.Unmarshal(m, b)
}
func (m *GetDracRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetDracRequest.Marshal(b, m, deterministic)
}
func (m *GetDracRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetDracRequest.Merge(m, src)
}
func (m *GetDracRequest) XXX_Size() int {
	return xxx_messageInfo_GetDracRequest.Size(m)
}
func (m *GetDracRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetDracRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetDracRequest proto.InternalMessageInfo

func (m *GetDracRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type ListDracsRequest struct {
	// The maximum number of dracs to return. The service may return fewer than
	// this value.
	// If unspecified, at most 100 dracs will be returned.
	// The maximum value is 1000; values above 1000 will be coerced to 1000.
	PageSize int32 `protobuf:"varint,1,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// A page token, received from a previous `ListDracs` call.
	// Provide this to retrieve the subsequent page.
	//
	// When paginating, all other parameters provided to `ListDracs` must match
	// the call that provided the page token.
	PageToken            string   `protobuf:"bytes,2,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ListDracsRequest) Reset()         { *m = ListDracsRequest{} }
func (m *ListDracsRequest) String() string { return proto.CompactTextString(m) }
func (*ListDracsRequest) ProtoMessage()    {}
func (*ListDracsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_bfc37a625f56a717, []int{72}
}

func (m *ListDracsRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListDracsRequest.Unmarshal(m, b)
}
func (m *ListDracsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListDracsRequest.Marshal(b, m, deterministic)
}
func (m *ListDracsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListDracsRequest.Merge(m, src)
}
func (m *ListDracsRequest) XXX_Size() int {
	return xxx_messageInfo_ListDracsRequest.Size(m)
}
func (m *ListDracsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ListDracsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ListDracsRequest proto.InternalMessageInfo

func (m *ListDracsRequest) GetPageSize() int32 {
	if m != nil {
		return m.PageSize
	}
	return 0
}

func (m *ListDracsRequest) GetPageToken() string {
	if m != nil {
		return m.PageToken
	}
	return ""
}

type ListDracsResponse struct {
	// The dracs from datastore.
	Dracs []*proto1.Drac `protobuf:"bytes,1,rep,name=dracs,proto3" json:"dracs,omitempty"`
	// A token, which can be sent as `page_token` to retrieve the next page.
	// If this field is omitted, there are no subsequent pages.
	NextPageToken        string   `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ListDracsResponse) Reset()         { *m = ListDracsResponse{} }
func (m *ListDracsResponse) String() string { return proto.CompactTextString(m) }
func (*ListDracsResponse) ProtoMessage()    {}
func (*ListDracsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_bfc37a625f56a717, []int{73}
}

func (m *ListDracsResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListDracsResponse.Unmarshal(m, b)
}
func (m *ListDracsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListDracsResponse.Marshal(b, m, deterministic)
}
func (m *ListDracsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListDracsResponse.Merge(m, src)
}
func (m *ListDracsResponse) XXX_Size() int {
	return xxx_messageInfo_ListDracsResponse.Size(m)
}
func (m *ListDracsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ListDracsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ListDracsResponse proto.InternalMessageInfo

func (m *ListDracsResponse) GetDracs() []*proto1.Drac {
	if m != nil {
		return m.Dracs
	}
	return nil
}

func (m *ListDracsResponse) GetNextPageToken() string {
	if m != nil {
		return m.NextPageToken
	}
	return ""
}

type DeleteDracRequest struct {
	// The name of the Drac to delete
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DeleteDracRequest) Reset()         { *m = DeleteDracRequest{} }
func (m *DeleteDracRequest) String() string { return proto.CompactTextString(m) }
func (*DeleteDracRequest) ProtoMessage()    {}
func (*DeleteDracRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_bfc37a625f56a717, []int{74}
}

func (m *DeleteDracRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DeleteDracRequest.Unmarshal(m, b)
}
func (m *DeleteDracRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DeleteDracRequest.Marshal(b, m, deterministic)
}
func (m *DeleteDracRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteDracRequest.Merge(m, src)
}
func (m *DeleteDracRequest) XXX_Size() int {
	return xxx_messageInfo_DeleteDracRequest.Size(m)
}
func (m *DeleteDracRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteDracRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteDracRequest proto.InternalMessageInfo

func (m *DeleteDracRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

// Contains the required information for creating a Switch represented in
// the database.
type CreateSwitchRequest struct {
	// The switch to create.
	Switch *proto1.Switch `protobuf:"bytes,1,opt,name=switch,proto3" json:"switch,omitempty"`
	// The ID to use for the Switch, which will become the final component of
	// the Switch's resource name.
	//
	// This value should follow the regex "^[a-zA-Z0-9-_]{4,63}$" (4-63 characters,
	// contains only ASCII letters, numbers, dash and underscore.
	SwitchId             string   `protobuf:"bytes,2,opt,name=switch_id,json=switchId,proto3" json:"switch_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CreateSwitchRequest) Reset()         { *m = CreateSwitchRequest{} }
func (m *CreateSwitchRequest) String() string { return proto.CompactTextString(m) }
func (*CreateSwitchRequest) ProtoMessage()    {}
func (*CreateSwitchRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_bfc37a625f56a717, []int{75}
}

func (m *CreateSwitchRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CreateSwitchRequest.Unmarshal(m, b)
}
func (m *CreateSwitchRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CreateSwitchRequest.Marshal(b, m, deterministic)
}
func (m *CreateSwitchRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateSwitchRequest.Merge(m, src)
}
func (m *CreateSwitchRequest) XXX_Size() int {
	return xxx_messageInfo_CreateSwitchRequest.Size(m)
}
func (m *CreateSwitchRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateSwitchRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CreateSwitchRequest proto.InternalMessageInfo

func (m *CreateSwitchRequest) GetSwitch() *proto1.Switch {
	if m != nil {
		return m.Switch
	}
	return nil
}

func (m *CreateSwitchRequest) GetSwitchId() string {
	if m != nil {
		return m.SwitchId
	}
	return ""
}

type UpdateSwitchRequest struct {
	// The switch to update.
	Switch *proto1.Switch `protobuf:"bytes,1,opt,name=switch,proto3" json:"switch,omitempty"`
	// The list of fields to be updated.
	UpdateMask           *field_mask.FieldMask `protobuf:"bytes,2,opt,name=update_mask,json=updateMask,proto3" json:"update_mask,omitempty"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *UpdateSwitchRequest) Reset()         { *m = UpdateSwitchRequest{} }
func (m *UpdateSwitchRequest) String() string { return proto.CompactTextString(m) }
func (*UpdateSwitchRequest) ProtoMessage()    {}
func (*UpdateSwitchRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_bfc37a625f56a717, []int{76}
}

func (m *UpdateSwitchRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UpdateSwitchRequest.Unmarshal(m, b)
}
func (m *UpdateSwitchRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UpdateSwitchRequest.Marshal(b, m, deterministic)
}
func (m *UpdateSwitchRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateSwitchRequest.Merge(m, src)
}
func (m *UpdateSwitchRequest) XXX_Size() int {
	return xxx_messageInfo_UpdateSwitchRequest.Size(m)
}
func (m *UpdateSwitchRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateSwitchRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateSwitchRequest proto.InternalMessageInfo

func (m *UpdateSwitchRequest) GetSwitch() *proto1.Switch {
	if m != nil {
		return m.Switch
	}
	return nil
}

func (m *UpdateSwitchRequest) GetUpdateMask() *field_mask.FieldMask {
	if m != nil {
		return m.UpdateMask
	}
	return nil
}

type GetSwitchRequest struct {
	// The name of the switch to retrieve.
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetSwitchRequest) Reset()         { *m = GetSwitchRequest{} }
func (m *GetSwitchRequest) String() string { return proto.CompactTextString(m) }
func (*GetSwitchRequest) ProtoMessage()    {}
func (*GetSwitchRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_bfc37a625f56a717, []int{77}
}

func (m *GetSwitchRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetSwitchRequest.Unmarshal(m, b)
}
func (m *GetSwitchRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetSwitchRequest.Marshal(b, m, deterministic)
}
func (m *GetSwitchRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetSwitchRequest.Merge(m, src)
}
func (m *GetSwitchRequest) XXX_Size() int {
	return xxx_messageInfo_GetSwitchRequest.Size(m)
}
func (m *GetSwitchRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetSwitchRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetSwitchRequest proto.InternalMessageInfo

func (m *GetSwitchRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type ListSwitchesRequest struct {
	// The maximum number of switches to return. The service may return fewer than
	// this value.
	// If unspecified, at most 100 switches will be returned.
	// The maximum value is 1000; values above 1000 will be coerced to 1000.
	PageSize int32 `protobuf:"varint,1,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// A page token, received from a previous `ListSwitches` call.
	// Provide this to retrieve the subsequent page.
	//
	// When paginating, all other parameters provided to `ListSwitches` must match
	// the call that provided the page token.
	PageToken            string   `protobuf:"bytes,2,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ListSwitchesRequest) Reset()         { *m = ListSwitchesRequest{} }
func (m *ListSwitchesRequest) String() string { return proto.CompactTextString(m) }
func (*ListSwitchesRequest) ProtoMessage()    {}
func (*ListSwitchesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_bfc37a625f56a717, []int{78}
}

func (m *ListSwitchesRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListSwitchesRequest.Unmarshal(m, b)
}
func (m *ListSwitchesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListSwitchesRequest.Marshal(b, m, deterministic)
}
func (m *ListSwitchesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListSwitchesRequest.Merge(m, src)
}
func (m *ListSwitchesRequest) XXX_Size() int {
	return xxx_messageInfo_ListSwitchesRequest.Size(m)
}
func (m *ListSwitchesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ListSwitchesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ListSwitchesRequest proto.InternalMessageInfo

func (m *ListSwitchesRequest) GetPageSize() int32 {
	if m != nil {
		return m.PageSize
	}
	return 0
}

func (m *ListSwitchesRequest) GetPageToken() string {
	if m != nil {
		return m.PageToken
	}
	return ""
}

type ListSwitchesResponse struct {
	// The switches from datastore.
	Switches []*proto1.Switch `protobuf:"bytes,1,rep,name=switches,proto3" json:"switches,omitempty"`
	// A token, which can be sent as `page_token` to retrieve the next page.
	// If this field is omitted, there are no subsequent pages.
	NextPageToken        string   `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ListSwitchesResponse) Reset()         { *m = ListSwitchesResponse{} }
func (m *ListSwitchesResponse) String() string { return proto.CompactTextString(m) }
func (*ListSwitchesResponse) ProtoMessage()    {}
func (*ListSwitchesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_bfc37a625f56a717, []int{79}
}

func (m *ListSwitchesResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListSwitchesResponse.Unmarshal(m, b)
}
func (m *ListSwitchesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListSwitchesResponse.Marshal(b, m, deterministic)
}
func (m *ListSwitchesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListSwitchesResponse.Merge(m, src)
}
func (m *ListSwitchesResponse) XXX_Size() int {
	return xxx_messageInfo_ListSwitchesResponse.Size(m)
}
func (m *ListSwitchesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ListSwitchesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ListSwitchesResponse proto.InternalMessageInfo

func (m *ListSwitchesResponse) GetSwitches() []*proto1.Switch {
	if m != nil {
		return m.Switches
	}
	return nil
}

func (m *ListSwitchesResponse) GetNextPageToken() string {
	if m != nil {
		return m.NextPageToken
	}
	return ""
}

type DeleteSwitchRequest struct {
	// The name of the Switch to delete
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DeleteSwitchRequest) Reset()         { *m = DeleteSwitchRequest{} }
func (m *DeleteSwitchRequest) String() string { return proto.CompactTextString(m) }
func (*DeleteSwitchRequest) ProtoMessage()    {}
func (*DeleteSwitchRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_bfc37a625f56a717, []int{80}
}

func (m *DeleteSwitchRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DeleteSwitchRequest.Unmarshal(m, b)
}
func (m *DeleteSwitchRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DeleteSwitchRequest.Marshal(b, m, deterministic)
}
func (m *DeleteSwitchRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteSwitchRequest.Merge(m, src)
}
func (m *DeleteSwitchRequest) XXX_Size() int {
	return xxx_messageInfo_DeleteSwitchRequest.Size(m)
}
func (m *DeleteSwitchRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteSwitchRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteSwitchRequest proto.InternalMessageInfo

func (m *DeleteSwitchRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

// Contains the required information for creating a Vlan represented in
// the database.
type CreateVlanRequest struct {
	// The vlan to create.
	Vlan *proto1.Vlan `protobuf:"bytes,1,opt,name=vlan,proto3" json:"vlan,omitempty"`
	// The ID to use for the Vlan, which will become the final component of
	// the Vlan's resource name.
	//
	// This value should follow the regex "^[a-zA-Z0-9-_]{4,63}$" (4-63 characters,
	// contains only ASCII letters, numbers, dash and underscore.
	VlanId               string   `protobuf:"bytes,2,opt,name=vlan_id,json=vlanId,proto3" json:"vlan_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CreateVlanRequest) Reset()         { *m = CreateVlanRequest{} }
func (m *CreateVlanRequest) String() string { return proto.CompactTextString(m) }
func (*CreateVlanRequest) ProtoMessage()    {}
func (*CreateVlanRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_bfc37a625f56a717, []int{81}
}

func (m *CreateVlanRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CreateVlanRequest.Unmarshal(m, b)
}
func (m *CreateVlanRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CreateVlanRequest.Marshal(b, m, deterministic)
}
func (m *CreateVlanRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateVlanRequest.Merge(m, src)
}
func (m *CreateVlanRequest) XXX_Size() int {
	return xxx_messageInfo_CreateVlanRequest.Size(m)
}
func (m *CreateVlanRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateVlanRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CreateVlanRequest proto.InternalMessageInfo

func (m *CreateVlanRequest) GetVlan() *proto1.Vlan {
	if m != nil {
		return m.Vlan
	}
	return nil
}

func (m *CreateVlanRequest) GetVlanId() string {
	if m != nil {
		return m.VlanId
	}
	return ""
}

type UpdateVlanRequest struct {
	// The vlan to update.
	Vlan *proto1.Vlan `protobuf:"bytes,1,opt,name=vlan,proto3" json:"vlan,omitempty"`
	// The list of fields to be updated.
	UpdateMask           *field_mask.FieldMask `protobuf:"bytes,2,opt,name=update_mask,json=updateMask,proto3" json:"update_mask,omitempty"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *UpdateVlanRequest) Reset()         { *m = UpdateVlanRequest{} }
func (m *UpdateVlanRequest) String() string { return proto.CompactTextString(m) }
func (*UpdateVlanRequest) ProtoMessage()    {}
func (*UpdateVlanRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_bfc37a625f56a717, []int{82}
}

func (m *UpdateVlanRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UpdateVlanRequest.Unmarshal(m, b)
}
func (m *UpdateVlanRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UpdateVlanRequest.Marshal(b, m, deterministic)
}
func (m *UpdateVlanRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateVlanRequest.Merge(m, src)
}
func (m *UpdateVlanRequest) XXX_Size() int {
	return xxx_messageInfo_UpdateVlanRequest.Size(m)
}
func (m *UpdateVlanRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateVlanRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateVlanRequest proto.InternalMessageInfo

func (m *UpdateVlanRequest) GetVlan() *proto1.Vlan {
	if m != nil {
		return m.Vlan
	}
	return nil
}

func (m *UpdateVlanRequest) GetUpdateMask() *field_mask.FieldMask {
	if m != nil {
		return m.UpdateMask
	}
	return nil
}

type GetVlanRequest struct {
	// The name of the vlan to retrieve.
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetVlanRequest) Reset()         { *m = GetVlanRequest{} }
func (m *GetVlanRequest) String() string { return proto.CompactTextString(m) }
func (*GetVlanRequest) ProtoMessage()    {}
func (*GetVlanRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_bfc37a625f56a717, []int{83}
}

func (m *GetVlanRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetVlanRequest.Unmarshal(m, b)
}
func (m *GetVlanRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetVlanRequest.Marshal(b, m, deterministic)
}
func (m *GetVlanRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetVlanRequest.Merge(m, src)
}
func (m *GetVlanRequest) XXX_Size() int {
	return xxx_messageInfo_GetVlanRequest.Size(m)
}
func (m *GetVlanRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetVlanRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetVlanRequest proto.InternalMessageInfo

func (m *GetVlanRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type ListVlansRequest struct {
	// The maximum number of vlans to return. The service may return fewer than
	// this value.
	// If unspecified, at most 100 vlans will be returned.
	// The maximum value is 1000; values above 1000 will be coerced to 1000.
	PageSize int32 `protobuf:"varint,1,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// A page token, received from a previous `ListVlans` call.
	// Provide this to retrieve the subsequent page.
	//
	// When paginating, all other parameters provided to `ListVlans` must match
	// the call that provided the page token.
	PageToken            string   `protobuf:"bytes,2,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ListVlansRequest) Reset()         { *m = ListVlansRequest{} }
func (m *ListVlansRequest) String() string { return proto.CompactTextString(m) }
func (*ListVlansRequest) ProtoMessage()    {}
func (*ListVlansRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_bfc37a625f56a717, []int{84}
}

func (m *ListVlansRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListVlansRequest.Unmarshal(m, b)
}
func (m *ListVlansRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListVlansRequest.Marshal(b, m, deterministic)
}
func (m *ListVlansRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListVlansRequest.Merge(m, src)
}
func (m *ListVlansRequest) XXX_Size() int {
	return xxx_messageInfo_ListVlansRequest.Size(m)
}
func (m *ListVlansRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ListVlansRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ListVlansRequest proto.InternalMessageInfo

func (m *ListVlansRequest) GetPageSize() int32 {
	if m != nil {
		return m.PageSize
	}
	return 0
}

func (m *ListVlansRequest) GetPageToken() string {
	if m != nil {
		return m.PageToken
	}
	return ""
}

type ListVlansResponse struct {
	// The vlans from datastore.
	Vlans []*proto1.Vlan `protobuf:"bytes,1,rep,name=vlans,proto3" json:"vlans,omitempty"`
	// A token, which can be sent as `page_token` to retrieve the next page.
	// If this field is omitted, there are no subsequent pages.
	NextPageToken        string   `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ListVlansResponse) Reset()         { *m = ListVlansResponse{} }
func (m *ListVlansResponse) String() string { return proto.CompactTextString(m) }
func (*ListVlansResponse) ProtoMessage()    {}
func (*ListVlansResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_bfc37a625f56a717, []int{85}
}

func (m *ListVlansResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListVlansResponse.Unmarshal(m, b)
}
func (m *ListVlansResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListVlansResponse.Marshal(b, m, deterministic)
}
func (m *ListVlansResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListVlansResponse.Merge(m, src)
}
func (m *ListVlansResponse) XXX_Size() int {
	return xxx_messageInfo_ListVlansResponse.Size(m)
}
func (m *ListVlansResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ListVlansResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ListVlansResponse proto.InternalMessageInfo

func (m *ListVlansResponse) GetVlans() []*proto1.Vlan {
	if m != nil {
		return m.Vlans
	}
	return nil
}

func (m *ListVlansResponse) GetNextPageToken() string {
	if m != nil {
		return m.NextPageToken
	}
	return ""
}

type DeleteVlanRequest struct {
	// The name of the Vlan to delete
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DeleteVlanRequest) Reset()         { *m = DeleteVlanRequest{} }
func (m *DeleteVlanRequest) String() string { return proto.CompactTextString(m) }
func (*DeleteVlanRequest) ProtoMessage()    {}
func (*DeleteVlanRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_bfc37a625f56a717, []int{86}
}

func (m *DeleteVlanRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DeleteVlanRequest.Unmarshal(m, b)
}
func (m *DeleteVlanRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DeleteVlanRequest.Marshal(b, m, deterministic)
}
func (m *DeleteVlanRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteVlanRequest.Merge(m, src)
}
func (m *DeleteVlanRequest) XXX_Size() int {
	return xxx_messageInfo_DeleteVlanRequest.Size(m)
}
func (m *DeleteVlanRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteVlanRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteVlanRequest proto.InternalMessageInfo

func (m *DeleteVlanRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type ImportVlansRequest struct {
	// Types that are valid to be assigned to Source:
	//	*ImportVlansRequest_MachineDbSource
	//	*ImportVlansRequest_ConfigSource
	Source               isImportVlansRequest_Source `protobuf_oneof:"source"`
	XXX_NoUnkeyedLiteral struct{}                    `json:"-"`
	XXX_unrecognized     []byte                      `json:"-"`
	XXX_sizecache        int32                       `json:"-"`
}

func (m *ImportVlansRequest) Reset()         { *m = ImportVlansRequest{} }
func (m *ImportVlansRequest) String() string { return proto.CompactTextString(m) }
func (*ImportVlansRequest) ProtoMessage()    {}
func (*ImportVlansRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_bfc37a625f56a717, []int{87}
}

func (m *ImportVlansRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ImportVlansRequest.Unmarshal(m, b)
}
func (m *ImportVlansRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ImportVlansRequest.Marshal(b, m, deterministic)
}
func (m *ImportVlansRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ImportVlansRequest.Merge(m, src)
}
func (m *ImportVlansRequest) XXX_Size() int {
	return xxx_messageInfo_ImportVlansRequest.Size(m)
}
func (m *ImportVlansRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ImportVlansRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ImportVlansRequest proto.InternalMessageInfo

type isImportVlansRequest_Source interface {
	isImportVlansRequest_Source()
}

type ImportVlansRequest_MachineDbSource struct {
	MachineDbSource *MachineDBSource `protobuf:"bytes,1,opt,name=machine_db_source,json=machineDbSource,proto3,oneof"`
}

type ImportVlansRequest_ConfigSource struct {
	ConfigSource *ConfigSource `protobuf:"bytes,2,opt,name=config_source,json=configSource,proto3,oneof"`
}

func (*ImportVlansRequest_MachineDbSource) isImportVlansRequest_Source() {}

func (*ImportVlansRequest_ConfigSource) isImportVlansRequest_Source() {}

func (m *ImportVlansRequest) GetSource() isImportVlansRequest_Source {
	if m != nil {
		return m.Source
	}
	return nil
}

func (m *ImportVlansRequest) GetMachineDbSource() *MachineDBSource {
	if x, ok := m.GetSource().(*ImportVlansRequest_MachineDbSource); ok {
		return x.MachineDbSource
	}
	return nil
}

func (m *ImportVlansRequest) GetConfigSource() *ConfigSource {
	if x, ok := m.GetSource().(*ImportVlansRequest_ConfigSource); ok {
		return x.ConfigSource
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*ImportVlansRequest) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*ImportVlansRequest_MachineDbSource)(nil),
		(*ImportVlansRequest_ConfigSource)(nil),
	}
}

type ImportStatesRequest struct {
	// Types that are valid to be assigned to Source:
	//	*ImportStatesRequest_MachineDbSource
	//	*ImportStatesRequest_ConfigSource
	Source               isImportStatesRequest_Source `protobuf_oneof:"source"`
	XXX_NoUnkeyedLiteral struct{}                     `json:"-"`
	XXX_unrecognized     []byte                       `json:"-"`
	XXX_sizecache        int32                        `json:"-"`
}

func (m *ImportStatesRequest) Reset()         { *m = ImportStatesRequest{} }
func (m *ImportStatesRequest) String() string { return proto.CompactTextString(m) }
func (*ImportStatesRequest) ProtoMessage()    {}
func (*ImportStatesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_bfc37a625f56a717, []int{88}
}

func (m *ImportStatesRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ImportStatesRequest.Unmarshal(m, b)
}
func (m *ImportStatesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ImportStatesRequest.Marshal(b, m, deterministic)
}
func (m *ImportStatesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ImportStatesRequest.Merge(m, src)
}
func (m *ImportStatesRequest) XXX_Size() int {
	return xxx_messageInfo_ImportStatesRequest.Size(m)
}
func (m *ImportStatesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ImportStatesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ImportStatesRequest proto.InternalMessageInfo

type isImportStatesRequest_Source interface {
	isImportStatesRequest_Source()
}

type ImportStatesRequest_MachineDbSource struct {
	MachineDbSource *MachineDBSource `protobuf:"bytes,1,opt,name=machine_db_source,json=machineDbSource,proto3,oneof"`
}

type ImportStatesRequest_ConfigSource struct {
	ConfigSource *ConfigSource `protobuf:"bytes,2,opt,name=config_source,json=configSource,proto3,oneof"`
}

func (*ImportStatesRequest_MachineDbSource) isImportStatesRequest_Source() {}

func (*ImportStatesRequest_ConfigSource) isImportStatesRequest_Source() {}

func (m *ImportStatesRequest) GetSource() isImportStatesRequest_Source {
	if m != nil {
		return m.Source
	}
	return nil
}

func (m *ImportStatesRequest) GetMachineDbSource() *MachineDBSource {
	if x, ok := m.GetSource().(*ImportStatesRequest_MachineDbSource); ok {
		return x.MachineDbSource
	}
	return nil
}

func (m *ImportStatesRequest) GetConfigSource() *ConfigSource {
	if x, ok := m.GetSource().(*ImportStatesRequest_ConfigSource); ok {
		return x.ConfigSource
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*ImportStatesRequest) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*ImportStatesRequest_MachineDbSource)(nil),
		(*ImportStatesRequest_ConfigSource)(nil),
	}
}

func init() {
	proto.RegisterType((*CreateChromePlatformRequest)(nil), "unifiedfleet.api.v1.rpc.CreateChromePlatformRequest")
	proto.RegisterType((*UpdateChromePlatformRequest)(nil), "unifiedfleet.api.v1.rpc.UpdateChromePlatformRequest")
	proto.RegisterType((*GetChromePlatformRequest)(nil), "unifiedfleet.api.v1.rpc.GetChromePlatformRequest")
	proto.RegisterType((*ListChromePlatformsRequest)(nil), "unifiedfleet.api.v1.rpc.ListChromePlatformsRequest")
	proto.RegisterType((*ListChromePlatformsResponse)(nil), "unifiedfleet.api.v1.rpc.ListChromePlatformsResponse")
	proto.RegisterType((*DeleteChromePlatformRequest)(nil), "unifiedfleet.api.v1.rpc.DeleteChromePlatformRequest")
	proto.RegisterType((*ImportChromePlatformsRequest)(nil), "unifiedfleet.api.v1.rpc.ImportChromePlatformsRequest")
	proto.RegisterType((*ImportChromePlatformsResponse)(nil), "unifiedfleet.api.v1.rpc.ImportChromePlatformsResponse")
	proto.RegisterType((*ChromePlatformResult)(nil), "unifiedfleet.api.v1.rpc.ChromePlatformResult")
	proto.RegisterType((*CreateMachineLSEPrototypeRequest)(nil), "unifiedfleet.api.v1.rpc.CreateMachineLSEPrototypeRequest")
	proto.RegisterType((*UpdateMachineLSEPrototypeRequest)(nil), "unifiedfleet.api.v1.rpc.UpdateMachineLSEPrototypeRequest")
	proto.RegisterType((*GetMachineLSEPrototypeRequest)(nil), "unifiedfleet.api.v1.rpc.GetMachineLSEPrototypeRequest")
	proto.RegisterType((*ListMachineLSEPrototypesRequest)(nil), "unifiedfleet.api.v1.rpc.ListMachineLSEPrototypesRequest")
	proto.RegisterType((*ListMachineLSEPrototypesResponse)(nil), "unifiedfleet.api.v1.rpc.ListMachineLSEPrototypesResponse")
	proto.RegisterType((*DeleteMachineLSEPrototypeRequest)(nil), "unifiedfleet.api.v1.rpc.DeleteMachineLSEPrototypeRequest")
	proto.RegisterType((*CreateRackLSEPrototypeRequest)(nil), "unifiedfleet.api.v1.rpc.CreateRackLSEPrototypeRequest")
	proto.RegisterType((*UpdateRackLSEPrototypeRequest)(nil), "unifiedfleet.api.v1.rpc.UpdateRackLSEPrototypeRequest")
	proto.RegisterType((*GetRackLSEPrototypeRequest)(nil), "unifiedfleet.api.v1.rpc.GetRackLSEPrototypeRequest")
	proto.RegisterType((*ListRackLSEPrototypesRequest)(nil), "unifiedfleet.api.v1.rpc.ListRackLSEPrototypesRequest")
	proto.RegisterType((*ListRackLSEPrototypesResponse)(nil), "unifiedfleet.api.v1.rpc.ListRackLSEPrototypesResponse")
	proto.RegisterType((*DeleteRackLSEPrototypeRequest)(nil), "unifiedfleet.api.v1.rpc.DeleteRackLSEPrototypeRequest")
	proto.RegisterType((*CreateMachineRequest)(nil), "unifiedfleet.api.v1.rpc.CreateMachineRequest")
	proto.RegisterType((*UpdateMachineRequest)(nil), "unifiedfleet.api.v1.rpc.UpdateMachineRequest")
	proto.RegisterType((*GetMachineRequest)(nil), "unifiedfleet.api.v1.rpc.GetMachineRequest")
	proto.RegisterType((*ListMachinesRequest)(nil), "unifiedfleet.api.v1.rpc.ListMachinesRequest")
	proto.RegisterType((*ListMachinesResponse)(nil), "unifiedfleet.api.v1.rpc.ListMachinesResponse")
	proto.RegisterType((*DeleteMachineRequest)(nil), "unifiedfleet.api.v1.rpc.DeleteMachineRequest")
	proto.RegisterType((*ImportMachinesRequest)(nil), "unifiedfleet.api.v1.rpc.ImportMachinesRequest")
	proto.RegisterType((*MachineDBSource)(nil), "unifiedfleet.api.v1.rpc.MachineDBSource")
	proto.RegisterType((*ConfigSource)(nil), "unifiedfleet.api.v1.rpc.ConfigSource")
	proto.RegisterType((*CreateRackRequest)(nil), "unifiedfleet.api.v1.rpc.CreateRackRequest")
	proto.RegisterType((*UpdateRackRequest)(nil), "unifiedfleet.api.v1.rpc.UpdateRackRequest")
	proto.RegisterType((*GetRackRequest)(nil), "unifiedfleet.api.v1.rpc.GetRackRequest")
	proto.RegisterType((*ListRacksRequest)(nil), "unifiedfleet.api.v1.rpc.ListRacksRequest")
	proto.RegisterType((*ListRacksResponse)(nil), "unifiedfleet.api.v1.rpc.ListRacksResponse")
	proto.RegisterType((*DeleteRackRequest)(nil), "unifiedfleet.api.v1.rpc.DeleteRackRequest")
	proto.RegisterType((*CreateMachineLSERequest)(nil), "unifiedfleet.api.v1.rpc.CreateMachineLSERequest")
	proto.RegisterType((*UpdateMachineLSERequest)(nil), "unifiedfleet.api.v1.rpc.UpdateMachineLSERequest")
	proto.RegisterType((*GetMachineLSERequest)(nil), "unifiedfleet.api.v1.rpc.GetMachineLSERequest")
	proto.RegisterType((*ListMachineLSEsRequest)(nil), "unifiedfleet.api.v1.rpc.ListMachineLSEsRequest")
	proto.RegisterType((*ListMachineLSEsResponse)(nil), "unifiedfleet.api.v1.rpc.ListMachineLSEsResponse")
	proto.RegisterType((*DeleteMachineLSERequest)(nil), "unifiedfleet.api.v1.rpc.DeleteMachineLSERequest")
	proto.RegisterType((*ImportMachineLSEsRequest)(nil), "unifiedfleet.api.v1.rpc.ImportMachineLSEsRequest")
	proto.RegisterType((*CreateRackLSERequest)(nil), "unifiedfleet.api.v1.rpc.CreateRackLSERequest")
	proto.RegisterType((*UpdateRackLSERequest)(nil), "unifiedfleet.api.v1.rpc.UpdateRackLSERequest")
	proto.RegisterType((*GetRackLSERequest)(nil), "unifiedfleet.api.v1.rpc.GetRackLSERequest")
	proto.RegisterType((*ListRackLSEsRequest)(nil), "unifiedfleet.api.v1.rpc.ListRackLSEsRequest")
	proto.RegisterType((*ListRackLSEsResponse)(nil), "unifiedfleet.api.v1.rpc.ListRackLSEsResponse")
	proto.RegisterType((*DeleteRackLSERequest)(nil), "unifiedfleet.api.v1.rpc.DeleteRackLSERequest")
	proto.RegisterType((*CreateNicRequest)(nil), "unifiedfleet.api.v1.rpc.CreateNicRequest")
	proto.RegisterType((*UpdateNicRequest)(nil), "unifiedfleet.api.v1.rpc.UpdateNicRequest")
	proto.RegisterType((*GetNicRequest)(nil), "unifiedfleet.api.v1.rpc.GetNicRequest")
	proto.RegisterType((*ListNicsRequest)(nil), "unifiedfleet.api.v1.rpc.ListNicsRequest")
	proto.RegisterType((*ListNicsResponse)(nil), "unifiedfleet.api.v1.rpc.ListNicsResponse")
	proto.RegisterType((*DeleteNicRequest)(nil), "unifiedfleet.api.v1.rpc.DeleteNicRequest")
	proto.RegisterType((*ImportNicsRequest)(nil), "unifiedfleet.api.v1.rpc.ImportNicsRequest")
	proto.RegisterType((*ImportDatacentersRequest)(nil), "unifiedfleet.api.v1.rpc.ImportDatacentersRequest")
	proto.RegisterType((*CreateKVMRequest)(nil), "unifiedfleet.api.v1.rpc.CreateKVMRequest")
	proto.RegisterType((*UpdateKVMRequest)(nil), "unifiedfleet.api.v1.rpc.UpdateKVMRequest")
	proto.RegisterType((*GetKVMRequest)(nil), "unifiedfleet.api.v1.rpc.GetKVMRequest")
	proto.RegisterType((*ListKVMsRequest)(nil), "unifiedfleet.api.v1.rpc.ListKVMsRequest")
	proto.RegisterType((*ListKVMsResponse)(nil), "unifiedfleet.api.v1.rpc.ListKVMsResponse")
	proto.RegisterType((*DeleteKVMRequest)(nil), "unifiedfleet.api.v1.rpc.DeleteKVMRequest")
	proto.RegisterType((*CreateRPMRequest)(nil), "unifiedfleet.api.v1.rpc.CreateRPMRequest")
	proto.RegisterType((*UpdateRPMRequest)(nil), "unifiedfleet.api.v1.rpc.UpdateRPMRequest")
	proto.RegisterType((*GetRPMRequest)(nil), "unifiedfleet.api.v1.rpc.GetRPMRequest")
	proto.RegisterType((*ListRPMsRequest)(nil), "unifiedfleet.api.v1.rpc.ListRPMsRequest")
	proto.RegisterType((*ListRPMsResponse)(nil), "unifiedfleet.api.v1.rpc.ListRPMsResponse")
	proto.RegisterType((*DeleteRPMRequest)(nil), "unifiedfleet.api.v1.rpc.DeleteRPMRequest")
	proto.RegisterType((*CreateDracRequest)(nil), "unifiedfleet.api.v1.rpc.CreateDracRequest")
	proto.RegisterType((*UpdateDracRequest)(nil), "unifiedfleet.api.v1.rpc.UpdateDracRequest")
	proto.RegisterType((*GetDracRequest)(nil), "unifiedfleet.api.v1.rpc.GetDracRequest")
	proto.RegisterType((*ListDracsRequest)(nil), "unifiedfleet.api.v1.rpc.ListDracsRequest")
	proto.RegisterType((*ListDracsResponse)(nil), "unifiedfleet.api.v1.rpc.ListDracsResponse")
	proto.RegisterType((*DeleteDracRequest)(nil), "unifiedfleet.api.v1.rpc.DeleteDracRequest")
	proto.RegisterType((*CreateSwitchRequest)(nil), "unifiedfleet.api.v1.rpc.CreateSwitchRequest")
	proto.RegisterType((*UpdateSwitchRequest)(nil), "unifiedfleet.api.v1.rpc.UpdateSwitchRequest")
	proto.RegisterType((*GetSwitchRequest)(nil), "unifiedfleet.api.v1.rpc.GetSwitchRequest")
	proto.RegisterType((*ListSwitchesRequest)(nil), "unifiedfleet.api.v1.rpc.ListSwitchesRequest")
	proto.RegisterType((*ListSwitchesResponse)(nil), "unifiedfleet.api.v1.rpc.ListSwitchesResponse")
	proto.RegisterType((*DeleteSwitchRequest)(nil), "unifiedfleet.api.v1.rpc.DeleteSwitchRequest")
	proto.RegisterType((*CreateVlanRequest)(nil), "unifiedfleet.api.v1.rpc.CreateVlanRequest")
	proto.RegisterType((*UpdateVlanRequest)(nil), "unifiedfleet.api.v1.rpc.UpdateVlanRequest")
	proto.RegisterType((*GetVlanRequest)(nil), "unifiedfleet.api.v1.rpc.GetVlanRequest")
	proto.RegisterType((*ListVlansRequest)(nil), "unifiedfleet.api.v1.rpc.ListVlansRequest")
	proto.RegisterType((*ListVlansResponse)(nil), "unifiedfleet.api.v1.rpc.ListVlansResponse")
	proto.RegisterType((*DeleteVlanRequest)(nil), "unifiedfleet.api.v1.rpc.DeleteVlanRequest")
	proto.RegisterType((*ImportVlansRequest)(nil), "unifiedfleet.api.v1.rpc.ImportVlansRequest")
	proto.RegisterType((*ImportStatesRequest)(nil), "unifiedfleet.api.v1.rpc.ImportStatesRequest")
}

func init() {
	proto.RegisterFile("infra/unifiedfleet/api/v1/rpc/fleet.proto", fileDescriptor_bfc37a625f56a717)
}

var fileDescriptor_bfc37a625f56a717 = []byte{
	// 2961 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xd4, 0x5c, 0x4b, 0x73, 0xdc, 0xc6,
	0xf1, 0xff, 0x43, 0x0f, 0x8a, 0x6c, 0x91, 0x12, 0x09, 0x52, 0x24, 0x0d, 0x9a, 0x7f, 0x33, 0xeb,
	0xe8, 0x6d, 0xee, 0x8a, 0x7a, 0x5a, 0xe5, 0xc4, 0x89, 0x24, 0xca, 0x0c, 0x43, 0x2d, 0x6b, 0x0d,
	0xca, 0x9b, 0x48, 0x51, 0x6a, 0x03, 0x62, 0xb1, 0x24, 0xc2, 0x7d, 0x09, 0x00, 0x29, 0x4b, 0x55,
	0x4e, 0xf9, 0xa4, 0x83, 0x2f, 0xa9, 0xca, 0x21, 0x87, 0x1c, 0x7d, 0x8f, 0x0f, 0x39, 0xe6, 0x94,
	0xaa, 0xbc, 0xaa, 0x72, 0xc8, 0x57, 0x88, 0x3f, 0x47, 0x4e, 0xa9, 0x79, 0x01, 0x03, 0x2c, 0x30,
	0x33, 0xe0, 0x42, 0x72, 0xf1, 0xc4, 0xdd, 0xc1, 0xcc, 0xaf, 0x07, 0xdd, 0xbf, 0xee, 0xe9, 0x9d,
	0xee, 0x22, 0x5c, 0x76, 0xbb, 0x2d, 0xcf, 0xaa, 0xec, 0x77, 0xdd, 0x96, 0xeb, 0x34, 0x5b, 0x6d,
	0xc7, 0x09, 0x2a, 0x56, 0xdf, 0xad, 0x1c, 0xac, 0x54, 0xbc, 0xbe, 0x5d, 0xc1, 0x03, 0xe5, 0xbe,
	0xd7, 0x0b, 0x7a, 0xfa, 0x1c, 0x3f, 0xa9, 0x6c, 0xf5, 0xdd, 0xf2, 0xc1, 0x4a, 0xd9, 0xeb, 0xdb,
	0xc6, 0xc2, 0x4e, 0xaf, 0xb7, 0xd3, 0x76, 0x2a, 0x78, 0xda, 0xf6, 0x7e, 0xab, 0xe2, 0x74, 0xfa,
	0xc1, 0x4b, 0xb2, 0xca, 0x58, 0x4a, 0x3e, 0x6c, 0xb9, 0x4e, 0xbb, 0xd9, 0xe8, 0x58, 0xfe, 0x1e,
	0x9d, 0xf1, 0xa3, 0x9d, 0x5e, 0xd9, 0xde, 0xf5, 0x7a, 0x1d, 0x77, 0xbf, 0x53, 0xee, 0x79, 0x3b,
	0x95, 0xf6, 0xbe, 0xed, 0x56, 0x76, 0x90, 0x78, 0x3c, 0xa1, 0x42, 0x11, 0xd0, 0xb6, 0xc8, 0xe2,
	0x6d, 0x67, 0xd7, 0x3a, 0x70, 0x7b, 0x1e, 0x05, 0xb8, 0x9b, 0x03, 0xc0, 0x73, 0xfc, 0xde, 0xbe,
	0x67, 0x3b, 0x74, 0xe9, 0x1d, 0xc5, 0xa5, 0x68, 0xc0, 0x0f, 0xac, 0x60, 0xdf, 0xa7, 0x0b, 0x97,
	0xb3, 0xf5, 0x46, 0x16, 0x76, 0x2c, 0x7b, 0xd7, 0xed, 0x32, 0x39, 0x57, 0x64, 0xd3, 0x3d, 0xcb,
	0x66, 0xfa, 0xb8, 0x25, 0x9b, 0x8b, 0x37, 0xec, 0x34, 0xfa, 0x6d, 0x2b, 0x68, 0xf5, 0xbc, 0x0e,
	0x5d, 0xb6, 0xa2, 0xb8, 0xa3, 0x46, 0xdb, 0x67, 0xbb, 0x2a, 0xab, 0xec, 0x8a, 0x9b, 0x2f, 0x7d,
	0xe9, 0xae, 0x13, 0xbc, 0xe8, 0x79, 0x7b, 0xaa, 0x3b, 0xea, 0x3b, 0x9e, 0xdb, 0xdf, 0x75, 0x3c,
	0xab, 0xcd, 0xd4, 0x7a, 0x43, 0xb6, 0xa4, 0xed, 0x3b, 0x0d, 0xfc, 0x29, 0x78, 0xd9, 0xa7, 0xdb,
	0x2a, 0x7d, 0xad, 0xc1, 0xc2, 0x03, 0xcf, 0xb1, 0x02, 0xe7, 0x01, 0xd6, 0x4c, 0x8d, 0x2a, 0xc6,
	0x74, 0x9e, 0xef, 0x3b, 0x7e, 0xa0, 0xd7, 0xe1, 0x8c, 0x1d, 0x7b, 0x30, 0xaf, 0x2d, 0x69, 0x97,
	0x4e, 0x5f, 0xbf, 0x5c, 0x4e, 0x63, 0x34, 0xc6, 0x2c, 0xc7, 0x91, 0xee, 0x1f, 0xff, 0xf6, 0xde,
	0x31, 0x33, 0x81, 0xa2, 0x5f, 0x85, 0xa9, 0xf8, 0x48, 0xc3, 0x6d, 0xce, 0x1f, 0x5b, 0xd2, 0x2e,
	0x8d, 0x99, 0x93, 0xf1, 0x07, 0xeb, 0xcd, 0xd2, 0x9f, 0x34, 0x58, 0xf8, 0xac, 0xdf, 0x7c, 0xeb,
	0x9b, 0xfc, 0x08, 0x4e, 0xef, 0x63, 0xb1, 0xd8, 0xe5, 0xf0, 0xf6, 0x4e, 0x5f, 0x37, 0xca, 0x84,
	0xd7, 0x65, 0xe6, 0x95, 0xe5, 0x4f, 0x90, 0x63, 0x55, 0x2d, 0x7f, 0xcf, 0x04, 0x32, 0x1d, 0x7d,
	0x2e, 0xed, 0xc0, 0xfc, 0x9a, 0x13, 0xa4, 0x6f, 0x78, 0x03, 0x4e, 0x74, 0xad, 0x8e, 0x83, 0xb7,
	0x39, 0x76, 0xff, 0xce, 0xb7, 0xf7, 0x8e, 0xfd, 0xf7, 0xde, 0x0a, 0x30, 0xd3, 0x2d, 0xe3, 0xed,
	0x2e, 0xfb, 0x2f, 0xfd, 0xc0, 0xe9, 0x94, 0xad, 0x7e, 0xdf, 0xef, 0xf7, 0x82, 0xb2, 0xdd, 0xeb,
	0x54, 0x12, 0x68, 0x18, 0xa4, 0xf4, 0x73, 0x30, 0x1e, 0xb9, 0x7e, 0x42, 0x92, 0xcf, 0x44, 0x2d,
	0xc0, 0x58, 0xdf, 0xda, 0x71, 0x1a, 0xbe, 0xfb, 0x8a, 0xc8, 0x3b, 0x69, 0x8e, 0xa2, 0x81, 0x2d,
	0xf7, 0x95, 0xa3, 0x2f, 0x02, 0xe0, 0x87, 0x41, 0x6f, 0xcf, 0xe9, 0x52, 0xf5, 0xe3, 0xe9, 0x8f,
	0xd1, 0x40, 0xe9, 0x0f, 0x1a, 0x2c, 0xa4, 0x42, 0xfb, 0xfd, 0x5e, 0xd7, 0x77, 0xf4, 0x2d, 0x38,
	0x1b, 0xd7, 0x98, 0x3f, 0xaf, 0x2d, 0x1d, 0xcf, 0xa5, 0x78, 0x33, 0x89, 0xa0, 0x5f, 0x80, 0xb3,
	0x5d, 0xe7, 0xf3, 0xa0, 0x31, 0xb0, 0xb1, 0x09, 0x34, 0x5c, 0x0b, 0x37, 0xf7, 0x6b, 0x58, 0x58,
	0x75, 0xda, 0x4e, 0x16, 0x27, 0x0a, 0x55, 0xf1, 0xbf, 0x35, 0x78, 0x77, 0xbd, 0xd3, 0xef, 0x79,
	0x59, 0x5a, 0xae, 0xc3, 0x14, 0x0b, 0x11, 0xcd, 0xed, 0x06, 0x09, 0x93, 0x94, 0x84, 0x97, 0xca,
	0x19, 0xb1, 0xbf, 0x5c, 0x25, 0x2b, 0x56, 0xef, 0x6f, 0xe1, 0xf9, 0x3f, 0xf9, 0x3f, 0xf3, 0x2c,
	0x05, 0x59, 0xdd, 0x26, 0x43, 0xfa, 0x23, 0x98, 0xb0, 0x7b, 0xdd, 0x96, 0xbb, 0xc3, 0x30, 0x09,
	0x07, 0xcf, 0x67, 0x62, 0x3e, 0xc0, 0xb3, 0x43, 0xc0, 0x71, 0x9b, 0xfb, 0x7e, 0x7f, 0x14, 0x46,
	0x08, 0x4c, 0xe9, 0x8f, 0x1a, 0x2c, 0x66, 0xbc, 0x10, 0xb5, 0xed, 0x43, 0x18, 0xe9, 0x5b, 0xbe,
	0xef, 0x34, 0xa9, 0x49, 0x97, 0xb3, 0x45, 0x26, 0xf4, 0xef, 0xef, 0xb7, 0x03, 0x93, 0x2e, 0x46,
	0x30, 0x2d, 0xcb, 0x6d, 0x3b, 0xc8, 0xb9, 0x0f, 0x03, 0x43, 0x16, 0x97, 0x5e, 0xc1, 0x4c, 0xda,
	0x73, 0xfd, 0x21, 0x8c, 0xf6, 0x0f, 0xeb, 0xf3, 0x66, 0xb8, 0x14, 0x39, 0x89, 0xe3, 0x79, 0x3d,
	0xaf, 0xd1, 0xf1, 0x77, 0x28, 0xdb, 0x46, 0xf1, 0x40, 0xd5, 0xdf, 0x29, 0xfd, 0x45, 0x83, 0x25,
	0x12, 0x22, 0xa9, 0xc1, 0x1e, 0x6d, 0x3d, 0xac, 0xb1, 0x30, 0xca, 0x08, 0xe0, 0xc0, 0x74, 0x67,
	0xf0, 0x29, 0xdd, 0x53, 0x59, 0xb0, 0xa7, 0x14, 0x4c, 0x12, 0x8c, 0xd2, 0xf0, 0xf4, 0x5b, 0x30,
	0x9b, 0x32, 0x1c, 0xc5, 0xce, 0x73, 0x29, 0x4f, 0xd7, 0x9b, 0xa5, 0x7f, 0x68, 0xb0, 0xf4, 0x19,
	0x0d, 0x4d, 0xdf, 0xf5, 0x2b, 0x0c, 0x15, 0x54, 0x9f, 0xc3, 0xe2, 0x9a, 0x13, 0x08, 0x5e, 0xa2,
	0x16, 0x73, 0xfb, 0x1f, 0x60, 0xb7, 0xbf, 0x0d, 0x37, 0xa5, 0x6e, 0x9f, 0x06, 0x49, 0x7c, 0xff,
	0x97, 0xf0, 0x1e, 0x8a, 0x81, 0x29, 0x13, 0x0a, 0x89, 0xb1, 0xdf, 0x68, 0xb0, 0x94, 0x8d, 0x4f,
	0x9d, 0x71, 0x1b, 0x66, 0x52, 0x54, 0xc9, 0xa2, 0x6d, 0x4e, 0xdb, 0x98, 0xa9, 0x58, 0xca, 0x71,
	0x37, 0x80, 0x25, 0x12, 0x77, 0xdf, 0xaa, 0x15, 0xbe, 0xd1, 0x60, 0x91, 0x38, 0xa1, 0x69, 0xd9,
	0x7b, 0x69, 0x32, 0x9f, 0xc1, 0xa4, 0x97, 0x78, 0x44, 0xb9, 0x7b, 0x55, 0xa0, 0x9f, 0x24, 0x1a,
	0x21, 0xee, 0x00, 0x92, 0x5e, 0x81, 0xe9, 0xe4, 0x58, 0xe4, 0x75, 0x7a, 0xf2, 0xd1, 0x7a, 0xb3,
	0xf4, 0x67, 0x0d, 0x16, 0x89, 0xcb, 0x7d, 0x37, 0x1b, 0x1e, 0xca, 0xcd, 0xf6, 0xc0, 0x58, 0x73,
	0x82, 0xac, 0x8d, 0x57, 0x63, 0xd6, 0xbd, 0x8b, 0xad, 0x7b, 0x03, 0x56, 0xa4, 0xd6, 0x1d, 0xc0,
	0x23, 0xa6, 0x7d, 0x0a, 0xef, 0x22, 0x07, 0x48, 0x3e, 0x2d, 0xc4, 0xbb, 0xbe, 0xd6, 0x60, 0x31,
	0x03, 0x9c, 0xba, 0xd6, 0x13, 0x98, 0x4a, 0xea, 0x8e, 0xf9, 0x55, 0x1e, 0x33, 0x98, 0x83, 0x28,
	0xca, 0x1e, 0xd5, 0x85, 0x45, 0xe2, 0x51, 0x6f, 0x49, 0xe1, 0x9f, 0xc3, 0x4c, 0xec, 0x3c, 0x63,
	0x62, 0xee, 0xc1, 0x29, 0x1a, 0x19, 0x28, 0x0f, 0x4b, 0xf2, 0xc0, 0x42, 0xe8, 0xc7, 0xd6, 0x21,
	0x73, 0xb0, 0x3c, 0x28, 0xf4, 0x8e, 0x31, 0x3a, 0xb2, 0xde, 0x2c, 0xfd, 0x5e, 0x83, 0x99, 0xd8,
	0x39, 0x54, 0xa0, 0xe8, 0xa1, 0x08, 0xff, 0x04, 0xa6, 0xa2, 0x73, 0x85, 0x6d, 0x6a, 0x35, 0xa6,
	0xf6, 0x6b, 0x58, 0xed, 0x57, 0xe0, 0x92, 0x6a, 0x14, 0xa3, 0xda, 0xfe, 0x14, 0xa6, 0xb9, 0xf8,
	0x5e, 0x08, 0xab, 0x7f, 0x03, 0x33, 0x71, 0x48, 0xca, 0xe5, 0x8f, 0x61, 0x94, 0x6a, 0x83, 0x51,
	0x58, 0x41, 0x8d, 0x66, 0xb8, 0x46, 0x99, 0xb0, 0xcf, 0x60, 0x26, 0x76, 0x04, 0x14, 0xab, 0xb0,
	0x7f, 0x6a, 0x70, 0x8e, 0xe4, 0xa6, 0x49, 0x9d, 0x1d, 0xb5, 0x2c, 0xfb, 0x3c, 0x9c, 0x4d, 0x48,
	0xd7, 0x75, 0x38, 0xb1, 0xdb, 0xf3, 0x03, 0xa2, 0x22, 0x13, 0x7f, 0x2e, 0xfd, 0x02, 0xc6, 0x79,
	0x40, 0xbd, 0x0c, 0xd3, 0x6c, 0x3b, 0x8e, 0x77, 0xe0, 0xda, 0x4e, 0x23, 0xd2, 0xaa, 0x39, 0x45,
	0x65, 0x91, 0x27, 0x9b, 0x56, 0xc7, 0x41, 0x54, 0x6a, 0xb9, 0x6d, 0x3a, 0x8b, 0x66, 0xaf, 0x68,
	0x00, 0x3d, 0x2c, 0xb5, 0x60, 0x2a, 0x3a, 0x37, 0x99, 0x22, 0x3f, 0x84, 0x13, 0x28, 0x5c, 0x51,
	0xdd, 0xbd, 0x27, 0x89, 0x73, 0xc4, 0xd1, 0xf0, 0x0a, 0x7d, 0x0e, 0x4e, 0xe1, 0x8b, 0x8d, 0xd0,
	0xbb, 0x47, 0xd0, 0xd7, 0xf5, 0x66, 0xe9, 0x2b, 0x0d, 0xa6, 0xa2, 0xf3, 0x6e, 0x78, 0x41, 0x43,
	0xb9, 0xf3, 0x16, 0x9c, 0xa1, 0xe7, 0x57, 0x14, 0x60, 0x78, 0x6a, 0x2e, 0x63, 0x6a, 0x5e, 0x84,
	0xf3, 0x4a, 0x21, 0x94, 0xf2, 0x72, 0x13, 0x26, 0xd9, 0x51, 0x52, 0x88, 0x17, 0x7b, 0x30, 0xc5,
	0xe1, 0x51, 0x17, 0xbe, 0x05, 0x27, 0xd1, 0xeb, 0x33, 0xff, 0x95, 0x69, 0xcc, 0x24, 0xb3, 0x95,
	0x3d, 0xb7, 0x0e, 0x53, 0xd1, 0x51, 0x53, 0xa0, 0x6e, 0xbe, 0xd2, 0x60, 0x2e, 0xf9, 0x1b, 0x89,
	0xc1, 0xff, 0x34, 0x3c, 0x13, 0x1e, 0x6d, 0x3d, 0xa4, 0x4c, 0x38, 0xaf, 0x94, 0xb2, 0x12, 0x3e,
	0x70, 0xab, 0xf5, 0xf7, 0x61, 0x22, 0xfa, 0x16, 0x91, 0x70, 0x3c, 0x1a, 0x5c, 0x6f, 0xa2, 0x43,
	0x7f, 0x2e, 0xf9, 0x6b, 0xe7, 0x4d, 0x6c, 0x66, 0x28, 0x8a, 0x36, 0x60, 0x26, 0xf6, 0x4b, 0x86,
	0x6d, 0x70, 0x2d, 0x66, 0x8c, 0x1b, 0xd8, 0x18, 0xcb, 0x70, 0x35, 0x47, 0xea, 0x4c, 0x4d, 0xf2,
	0x18, 0x66, 0xe3, 0xbf, 0x2b, 0x0a, 0x21, 0x2d, 0x32, 0xf4, 0x00, 0x2c, 0xe5, 0xee, 0x1a, 0x9c,
	0x8e, 0xb4, 0xc3, 0x18, 0xac, 0xa6, 0x5c, 0x93, 0x5f, 0xa9, 0xcc, 0xe6, 0x6d, 0x98, 0x4b, 0xfe,
	0x14, 0x29, 0x5c, 0x8d, 0xff, 0xd2, 0x60, 0x3e, 0x76, 0x1a, 0xf1, 0x9a, 0x3c, 0x6a, 0x07, 0x52,
	0x98, 0xf9, 0xd1, 0xcc, 0x90, 0x4b, 0xbf, 0x68, 0xfa, 0xaa, 0x90, 0x7e, 0xd1, 0xb5, 0x34, 0xfd,
	0xa2, 0xeb, 0x10, 0x6f, 0xe8, 0x47, 0x2e, 0xf3, 0xa3, 0x23, 0xb1, 0xcc, 0xaf, 0x78, 0xd1, 0x05,
	0x64, 0x7e, 0x89, 0x4d, 0x1d, 0x36, 0x91, 0x61, 0x30, 0xb1, 0xcc, 0x8f, 0x0e, 0x16, 0x99, 0xf9,
	0x45, 0x90, 0x51, 0xe6, 0x47, 0xb5, 0xa1, 0x92, 0xf9, 0xb1, 0x6d, 0x86, 0x6b, 0xf2, 0x67, 0x7e,
	0x6f, 0x44, 0x61, 0xbf, 0x82, 0x49, 0x42, 0xcf, 0x4d, 0xd7, 0x66, 0xc8, 0xb7, 0xe0, 0x78, 0xd7,
	0xb5, 0x29, 0x37, 0xfe, 0x5f, 0xf0, 0x52, 0x9b, 0xae, 0x4d, 0x78, 0x81, 0xe6, 0xeb, 0xe7, 0x60,
	0xa4, 0xeb, 0xda, 0x11, 0x15, 0x4f, 0x76, 0x5d, 0x7b, 0xbd, 0x59, 0x7a, 0xad, 0xc1, 0x24, 0xa1,
	0xe1, 0xf0, 0x22, 0x86, 0xa2, 0xdd, 0xa7, 0x30, 0xb1, 0xe6, 0x04, 0xdc, 0x26, 0x7e, 0x1c, 0xd3,
	0xe0, 0x07, 0x58, 0x83, 0x17, 0xe0, 0xfb, 0x52, 0x0d, 0x22, 0x08, 0xa2, 0xbd, 0x2a, 0x9c, 0x45,
	0xdc, 0xd8, 0x74, 0xed, 0x42, 0xa8, 0xd6, 0x25, 0xe9, 0x0e, 0x81, 0xa3, 0x34, 0xbb, 0x0e, 0x27,
	0xba, 0xae, 0xcd, 0x28, 0x26, 0x51, 0x95, 0x89, 0xe7, 0x2a, 0x53, 0xeb, 0x31, 0x4c, 0x12, 0x6a,
	0x15, 0xaa, 0x94, 0xbf, 0x6a, 0x30, 0x45, 0xc2, 0x37, 0xaf, 0x97, 0xa3, 0x16, 0xb7, 0xa3, 0x43,
	0x68, 0xd5, 0x0a, 0x2c, 0xdb, 0xe9, 0x06, 0x8e, 0x77, 0x64, 0x5f, 0x26, 0xf4, 0xf2, 0x8d, 0x7a,
	0x95, 0x73, 0xc1, 0x8d, 0x7a, 0x55, 0xc1, 0x05, 0x37, 0xea, 0x55, 0xea, 0x82, 0x1b, 0xf5, 0x2a,
	0xf2, 0xf2, 0x8d, 0x7a, 0x95, 0xf3, 0xf2, 0x8d, 0x7a, 0x35, 0xe6, 0xe5, 0xc3, 0x8b, 0x28, 0xc0,
	0xcb, 0xb9, 0x4d, 0x1c, 0x96, 0xd0, 0x08, 0x22, 0xe6, 0xe5, 0x1b, 0xf5, 0x6a, 0x91, 0x5e, 0x4e,
	0xe0, 0x22, 0x2f, 0x47, 0xdf, 0x15, 0xbc, 0x1c, 0x6f, 0x0b, 0xcd, 0xcd, 0xef, 0xe5, 0x85, 0x2a,
	0x25, 0xa4, 0x94, 0x59, 0xe3, 0xed, 0x6d, 0xd6, 0x54, 0xec, 0x6d, 0xd6, 0x98, 0xbd, 0xcd, 0x1a,
	0xa6, 0x94, 0x59, 0xe3, 0x29, 0x65, 0xd6, 0xe2, 0x94, 0x1a, 0x5e, 0x44, 0x01, 0x94, 0xe2, 0x36,
	0x71, 0x58, 0xed, 0x21, 0x88, 0x18, 0xa5, 0xcc, 0x5a, 0xa1, 0x94, 0x22, 0x70, 0x11, 0xa5, 0xd0,
	0x77, 0x05, 0x4a, 0xe1, 0x6d, 0xa1, 0xb9, 0xf9, 0x29, 0x55, 0xa8, 0x52, 0xc2, 0x7b, 0x93, 0x55,
	0xcf, 0xb2, 0xb9, 0xeb, 0x8c, 0xa6, 0x67, 0xd9, 0x0a, 0xd7, 0x19, 0x68, 0x15, 0xbd, 0xce, 0x40,
	0x2b, 0xf4, 0x39, 0x38, 0x85, 0xfe, 0x72, 0xf7, 0x26, 0xe8, 0x6b, 0xec, 0xde, 0xa4, 0x18, 0x41,
	0x05, 0xdc, 0x9b, 0xf0, 0x1b, 0x39, 0xec, 0xdd, 0x00, 0xc6, 0x88, 0xdd, 0x9b, 0xa0, 0x91, 0x22,
	0xef, 0x4d, 0x28, 0x5e, 0x74, 0x6f, 0x82, 0x5e, 0x5f, 0xe5, 0xde, 0x04, 0x6f, 0x8d, 0xcc, 0xce,
	0x7f, 0x6f, 0x52, 0xb0, 0x6e, 0x3c, 0x98, 0x26, 0x2c, 0xdb, 0x7a, 0xe1, 0x06, 0xf6, 0x2e, 0x43,
	0xfe, 0x18, 0x46, 0x7c, 0x3c, 0x40, 0x09, 0xf0, 0x3d, 0xc1, 0xeb, 0x90, 0x95, 0x84, 0x02, 0x74,
	0x15, 0x52, 0x2f, 0xf9, 0x14, 0xf1, 0x6d, 0x94, 0x0c, 0xac, 0x37, 0x4b, 0xbf, 0xd3, 0x60, 0x9a,
	0x30, 0xae, 0x58, 0xa1, 0x43, 0x31, 0xef, 0x67, 0x30, 0xb9, 0xe6, 0x04, 0xf1, 0x0d, 0x3d, 0x88,
	0xe9, 0xb7, 0x82, 0xf5, 0x7b, 0x19, 0x2e, 0x4a, 0xf5, 0x4b, 0x51, 0x62, 0x3f, 0xc2, 0xc8, 0x58,
	0x31, 0xd7, 0xef, 0x5f, 0x90, 0x1f, 0x61, 0x11, 0x24, 0xe5, 0xe0, 0x0f, 0x81, 0x2a, 0x39, 0xbc,
	0x7e, 0x97, 0xab, 0xd0, 0x0c, 0x97, 0x28, 0x73, 0xf1, 0x29, 0x4c, 0x13, 0x2e, 0xbe, 0x01, 0x6d,
	0x85, 0x51, 0xaf, 0xde, 0xb6, 0xba, 0x5c, 0x30, 0x3a, 0x68, 0x5b, 0x5d, 0x85, 0x60, 0x84, 0x56,
	0xd1, 0x60, 0x84, 0x56, 0xa0, 0xa8, 0x87, 0xfe, 0x72, 0x51, 0x0f, 0x7d, 0x8d, 0x45, 0xbd, 0x62,
	0x04, 0x15, 0x10, 0xf5, 0xf8, 0x8d, 0x1c, 0xd6, 0xb3, 0x31, 0x46, 0x2c, 0xea, 0xa1, 0x91, 0x22,
	0xa3, 0x1e, 0xc5, 0x8b, 0xa2, 0x1e, 0x7a, 0x7d, 0x95, 0xa8, 0x87, 0xb7, 0x46, 0x66, 0xe7, 0x8f,
	0x7a, 0x05, 0xeb, 0xe6, 0x6f, 0x1a, 0xe8, 0xe4, 0xe7, 0x4c, 0x4c, 0x3d, 0x47, 0xed, 0x87, 0xcc,
	0xdf, 0x35, 0x98, 0x26, 0xaf, 0xb1, 0x15, 0x58, 0xc1, 0x91, 0x2d, 0x53, 0x5d, 0xff, 0xcf, 0x1d,
	0x38, 0xf9, 0x09, 0x5a, 0xab, 0xbf, 0x60, 0xf7, 0x83, 0xf1, 0x4e, 0x29, 0xfd, 0x66, 0xb6, 0x88,
	0xec, 0xde, 0x51, 0x43, 0xbd, 0x15, 0x0b, 0x09, 0x4e, 0x6b, 0xf0, 0x14, 0x08, 0x16, 0xf4, 0x83,
	0xe6, 0x11, 0xfc, 0x1c, 0x5f, 0xff, 0x25, 0x06, 0x57, 0x32, 0xa5, 0x66, 0x75, 0x74, 0xe6, 0x11,
	0xf9, 0xa5, 0x46, 0x8e, 0xa4, 0x44, 0xe7, 0x9d, 0x7e, 0x23, 0x53, 0x6a, 0x76, 0x7b, 0xa7, 0x71,
	0x33, 0xdf, 0x22, 0x1a, 0x37, 0x9a, 0xec, 0x1a, 0x4f, 0x59, 0xdd, 0x82, 0x56, 0x4b, 0x63, 0x76,
	0x20, 0xce, 0x3e, 0xec, 0xf4, 0x83, 0x97, 0xfa, 0x36, 0xab, 0xe3, 0x26, 0xdf, 0xf4, 0x56, 0xa6,
	0x18, 0x51, 0x93, 0xa5, 0xa1, 0x33, 0x39, 0x68, 0xe6, 0x16, 0xee, 0x28, 0xd7, 0x5f, 0x6b, 0xf0,
	0x4e, 0x66, 0x73, 0x9e, 0x7e, 0x57, 0xc2, 0xdb, 0xec, 0x16, 0x26, 0x23, 0x67, 0x53, 0x15, 0xde,
	0x48, 0x66, 0x8b, 0x9d, 0x60, 0x23, 0xb2, 0xb6, 0xbc, 0xdc, 0x1b, 0xf9, 0x52, 0x83, 0xd9, 0xf4,
	0x1e, 0x39, 0xfd, 0xb6, 0x88, 0xd7, 0x05, 0x6e, 0xe1, 0xb7, 0x1a, 0xcc, 0x67, 0xf5, 0xb4, 0xe9,
	0x1f, 0x0a, 0x19, 0x2b, 0x68, 0xb3, 0x33, 0xee, 0x1e, 0x62, 0x25, 0x25, 0x7c, 0x17, 0xde, 0xc9,
	0x6c, 0x5a, 0x13, 0x18, 0x47, 0xd6, 0xe8, 0x96, 0x49, 0xfd, 0x2f, 0x60, 0x36, 0xbd, 0x5b, 0x4d,
	0x60, 0x03, 0x61, 0x7b, 0x9b, 0x91, 0xa7, 0x19, 0x09, 0x89, 0x4f, 0xef, 0x3d, 0x13, 0x88, 0x17,
	0x36, 0xab, 0xe5, 0x13, 0xff, 0x02, 0xa6, 0x53, 0xda, 0xc7, 0x04, 0x01, 0x2e, 0xbb, 0xd9, 0x2c,
	0x9f, 0xe0, 0xd7, 0x1a, 0x9c, 0x4b, 0x6d, 0xf7, 0x12, 0x84, 0x1c, 0x51, 0xef, 0x99, 0x71, 0x3b,
	0xef, 0x32, 0xca, 0xb7, 0x5d, 0x98, 0x4d, 0x6f, 0xe9, 0x12, 0x18, 0x40, 0xd8, 0x03, 0x26, 0x08,
	0xb2, 0x13, 0xb1, 0x58, 0xa6, 0x2f, 0xab, 0xc5, 0x3c, 0x86, 0xab, 0xd0, 0x21, 0x84, 0x64, 0xc4,
	0xc2, 0x94, 0x40, 0x46, 0x5a, 0x77, 0x97, 0x92, 0x8c, 0x67, 0x00, 0x51, 0x10, 0xd2, 0xaf, 0x28,
	0x44, 0xaa, 0x3c, 0xe8, 0x7b, 0x30, 0xce, 0x77, 0x4c, 0xe9, 0x1f, 0xa8, 0x84, 0x92, 0x90, 0x05,
	0xcb, 0x8a, 0xb3, 0xa9, 0xf1, 0xeb, 0x30, 0x11, 0x0b, 0x1c, 0x02, 0x75, 0xa5, 0xb5, 0x51, 0x65,
	0x9a, 0xfa, 0x31, 0x9c, 0x89, 0xf7, 0x45, 0xe9, 0x65, 0xc9, 0x41, 0x9a, 0x7c, 0x91, 0xb4, 0x13,
	0xf4, 0x09, 0x40, 0x14, 0x79, 0x04, 0x8a, 0x1f, 0xe8, 0x22, 0x32, 0x64, 0xcd, 0x29, 0x08, 0x3a,
	0x8a, 0x2a, 0x02, 0xe8, 0x81, 0xbe, 0x21, 0x39, 0xf4, 0x16, 0x9c, 0xa2, 0x41, 0x43, 0xbf, 0x28,
	0x0b, 0x2b, 0xca, 0xa0, 0xdb, 0x30, 0x16, 0x76, 0xe4, 0xe8, 0x97, 0xa5, 0xae, 0x1f, 0xaa, 0xf5,
	0x8a, 0xca, 0x54, 0x4a, 0x8e, 0x1a, 0x40, 0xe4, 0xe8, 0x02, 0x9d, 0x0c, 0xb4, 0xe9, 0x64, 0xd2,
	0x62, 0x8f, 0x5d, 0x7e, 0x47, 0xe7, 0x94, 0x7e, 0x4d, 0x39, 0xf1, 0x61, 0xe8, 0x6a, 0x7d, 0x1a,
	0x48, 0x58, 0x32, 0x63, 0x11, 0x08, 0xcb, 0xe8, 0xc2, 0x51, 0x15, 0xe6, 0xe0, 0xbb, 0x6e, 0x6e,
	0x60, 0x59, 0x2d, 0x81, 0xc9, 0x29, 0x26, 0x20, 0xf7, 0xdf, 0x5c, 0x7f, 0x87, 0x5e, 0x51, 0x4c,
	0x35, 0x42, 0x0a, 0x5c, 0x53, 0x5f, 0x40, 0x89, 0xf0, 0x8c, 0x5d, 0x5b, 0x2b, 0x69, 0x32, 0xa3,
	0xcf, 0x25, 0x93, 0x14, 0x4f, 0x59, 0xd9, 0x93, 0x7f, 0xab, 0x15, 0xb5, 0x70, 0xc1, 0xbf, 0x57,
	0x5a, 0xc4, 0x08, 0x8f, 0x1c, 0x7a, 0x56, 0x49, 0x8f, 0x9c, 0x78, 0xb3, 0x80, 0xa1, 0xd0, 0x9a,
	0x10, 0x1d, 0x39, 0x72, 0x19, 0x69, 0x6d, 0x25, 0x4a, 0x32, 0xc8, 0x91, 0xc3, 0xbe, 0x5d, 0x51,
	0xc8, 0x4e, 0xf2, 0xa0, 0xd3, 0x23, 0x87, 0xb5, 0x6a, 0x48, 0x8e, 0x9c, 0x44, 0x93, 0x88, 0xe4,
	0xc8, 0x19, 0xe8, 0xff, 0x08, 0x8f, 0x1c, 0xb9, 0xba, 0xd2, 0xfa, 0x37, 0x32, 0x69, 0x54, 0x87,
	0xb1, 0xb0, 0x23, 0x43, 0x10, 0x11, 0x93, 0x5d, 0x1b, 0x86, 0xa4, 0x35, 0x00, 0xe1, 0x86, 0x6d,
	0x18, 0x02, 0xdc, 0x64, 0xab, 0x86, 0x14, 0xb7, 0x06, 0x23, 0xa4, 0xad, 0x42, 0xbf, 0x20, 0x32,
	0x67, 0x0e, 0xc4, 0x06, 0x8c, 0xb2, 0x36, 0x08, 0xfd, 0x92, 0xd0, 0x28, 0x5c, 0x83, 0x81, 0x71,
	0x59, 0x61, 0x26, 0x35, 0xdd, 0x26, 0x8c, 0x85, 0x7d, 0x0f, 0x02, 0x55, 0x24, 0x7b, 0x23, 0x32,
	0x4d, 0xf6, 0x08, 0x20, 0x6a, 0x78, 0x10, 0xb0, 0x7a, 0xa0, 0x2b, 0x22, 0xd5, 0xd7, 0xc3, 0x38,
	0xc2, 0x35, 0x1e, 0x48, 0xe3, 0xc8, 0x60, 0x93, 0x42, 0x2a, 0x76, 0x48, 0xae, 0x8d, 0x7a, 0x55,
	0x4a, 0xae, 0xa8, 0x5e, 0x6c, 0x48, 0x2a, 0xd2, 0x11, 0xb9, 0xc4, 0xb8, 0xc9, 0x0e, 0x01, 0x29,
	0x2e, 0x21, 0x17, 0xfa, 0x24, 0x24, 0x57, 0x0e, 0x44, 0x4a, 0x2e, 0x5c, 0x41, 0x17, 0x93, 0x8b,
	0xab, 0xf7, 0x4b, 0xc8, 0x15, 0x2b, 0xe5, 0x87, 0xe4, 0x12, 0xab, 0x22, 0x59, 0x92, 0x97, 0xc7,
	0x03, 0xb3, 0x26, 0x37, 0x59, 0x54, 0x8f, 0x35, 0x24, 0x15, 0xdf, 0xc8, 0x64, 0x62, 0xdc, 0x64,
	0x05, 0x5e, 0x8a, 0x4b, 0x4c, 0x86, 0x3e, 0x09, 0x4d, 0x96, 0x03, 0x91, 0x9a, 0x0c, 0x57, 0xa8,
	0xc5, 0x26, 0xe3, 0xea, 0xe9, 0x12, 0x93, 0xc5, 0x4a, 0xe5, 0xa1, 0xc9, 0xc4, 0xaa, 0x48, 0x96,
	0xbc, 0x33, 0x4d, 0x16, 0xe6, 0xf7, 0xab, 0x9e, 0x65, 0x4b, 0xf3, 0x7b, 0xae, 0xbe, 0x69, 0xc8,
	0x8a, 0xa8, 0x51, 0x7e, 0x2f, 0x81, 0x1e, 0xa8, 0x6f, 0xcb, 0xa1, 0x49, 0x7e, 0x8f, 0x3f, 0x0a,
	0xf3, 0xfb, 0x5c, 0xa0, 0x34, 0xbf, 0xc7, 0x95, 0x63, 0x49, 0x7e, 0xcf, 0x57, 0xab, 0x25, 0xf9,
	0x7d, 0xbc, 0x10, 0x1d, 0xe6, 0xf7, 0x12, 0x9d, 0x0c, 0x94, 0x93, 0x33, 0x0d, 0xd8, 0x80, 0x71,
	0xbe, 0x46, 0x2c, 0x48, 0x24, 0x52, 0x4a, 0xc9, 0x86, 0xbc, 0x04, 0x89, 0x04, 0xf0, 0xf5, 0x60,
	0x81, 0x80, 0x94, 0xb2, 0xb1, 0x8a, 0x80, 0x27, 0x30, 0x16, 0x16, 0x77, 0x05, 0x7a, 0x4f, 0x16,
	0x80, 0x55, 0xa0, 0x69, 0x96, 0xc5, 0x6a, 0xb1, 0x92, 0x2c, 0x2b, 0x51, 0x05, 0x96, 0x64, 0x59,
	0x03, 0x05, 0xde, 0xc7, 0x30, 0xce, 0x57, 0x5e, 0x05, 0xc2, 0x52, 0x0a, 0xb4, 0x72, 0x07, 0xad,
	0xb7, 0xad, 0xae, 0xd4, 0x41, 0xb9, 0x52, 0x9c, 0x21, 0xab, 0xf7, 0x45, 0x0e, 0x2a, 0x81, 0x1e,
	0x28, 0xc5, 0xca, 0xa1, 0x89, 0x83, 0xe2, 0x8f, 0x42, 0x07, 0xcd, 0x05, 0x4a, 0x1d, 0x14, 0x57,
	0x05, 0x25, 0x0e, 0xca, 0x57, 0x0e, 0x25, 0x0e, 0x1a, 0xaf, 0x99, 0x86, 0x0e, 0x2a, 0xd1, 0xc9,
	0x40, 0xe5, 0x33, 0xd3, 0x80, 0x9b, 0x70, 0x9a, 0xab, 0x66, 0xea, 0x57, 0x25, 0xd9, 0x51, 0x6c,
	0xe7, 0x69, 0x79, 0x51, 0x0d, 0xc6, 0xf9, 0xb2, 0xa2, 0x80, 0x66, 0x29, 0xd5, 0xc7, 0x34, 0xc4,
	0xfb, 0xe7, 0x9f, 0xbe, 0x2f, 0xfc, 0x5f, 0x45, 0x1f, 0xed, 0xb7, 0xfc, 0xfe, 0xf6, 0xf6, 0x08,
	0x7e, 0xb1, 0x1b, 0xff, 0x0b, 0x00, 0x00, 0xff, 0xff, 0x48, 0xeb, 0x22, 0x69, 0xd9, 0x48, 0x00,
	0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// FleetClient is the client API for Fleet service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type FleetClient interface {
	// CreateChromePlatform creates a new chromePlatform.
	CreateChromePlatform(ctx context.Context, in *CreateChromePlatformRequest, opts ...grpc.CallOption) (*proto1.ChromePlatform, error)
	// Update updates the chromePlatform
	UpdateChromePlatform(ctx context.Context, in *UpdateChromePlatformRequest, opts ...grpc.CallOption) (*proto1.ChromePlatform, error)
	// Get retrieves the details of the chromePlatform
	GetChromePlatform(ctx context.Context, in *GetChromePlatformRequest, opts ...grpc.CallOption) (*proto1.ChromePlatform, error)
	// List gets all the chromePlatforms
	ListChromePlatforms(ctx context.Context, in *ListChromePlatformsRequest, opts ...grpc.CallOption) (*ListChromePlatformsResponse, error)
	// Delete delete the chromePlatform
	DeleteChromePlatform(ctx context.Context, in *DeleteChromePlatformRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	// ImportChromePlatforms imports chrome platforms.
	ImportChromePlatforms(ctx context.Context, in *ImportChromePlatformsRequest, opts ...grpc.CallOption) (*status.Status, error)
	// CreateMachineLSEPrototype creates a new MachineLSEPrototype.
	CreateMachineLSEPrototype(ctx context.Context, in *CreateMachineLSEPrototypeRequest, opts ...grpc.CallOption) (*proto1.MachineLSEPrototype, error)
	// Update updates the MachineLSEPrototype
	UpdateMachineLSEPrototype(ctx context.Context, in *UpdateMachineLSEPrototypeRequest, opts ...grpc.CallOption) (*proto1.MachineLSEPrototype, error)
	// Get retrieves the details of the MachineLSEPrototype
	GetMachineLSEPrototype(ctx context.Context, in *GetMachineLSEPrototypeRequest, opts ...grpc.CallOption) (*proto1.MachineLSEPrototype, error)
	// List gets all the MachineLSEPrototypes
	ListMachineLSEPrototypes(ctx context.Context, in *ListMachineLSEPrototypesRequest, opts ...grpc.CallOption) (*ListMachineLSEPrototypesResponse, error)
	// Delete delete the MachineLSEPrototype
	DeleteMachineLSEPrototype(ctx context.Context, in *DeleteMachineLSEPrototypeRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	// CreateRackLSEPrototype creates a new RackLSEPrototype.
	CreateRackLSEPrototype(ctx context.Context, in *CreateRackLSEPrototypeRequest, opts ...grpc.CallOption) (*proto1.RackLSEPrototype, error)
	// Update updates the RackLSEPrototype
	UpdateRackLSEPrototype(ctx context.Context, in *UpdateRackLSEPrototypeRequest, opts ...grpc.CallOption) (*proto1.RackLSEPrototype, error)
	// Get retrieves the details of the RackLSEPrototype
	GetRackLSEPrototype(ctx context.Context, in *GetRackLSEPrototypeRequest, opts ...grpc.CallOption) (*proto1.RackLSEPrototype, error)
	// List gets all the RackLSEPrototypes
	ListRackLSEPrototypes(ctx context.Context, in *ListRackLSEPrototypesRequest, opts ...grpc.CallOption) (*ListRackLSEPrototypesResponse, error)
	// Delete delete the RackLSEPrototype
	DeleteRackLSEPrototype(ctx context.Context, in *DeleteRackLSEPrototypeRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	// CreateMachine creates a new machine.
	CreateMachine(ctx context.Context, in *CreateMachineRequest, opts ...grpc.CallOption) (*proto1.Machine, error)
	// Update updates the machine
	UpdateMachine(ctx context.Context, in *UpdateMachineRequest, opts ...grpc.CallOption) (*proto1.Machine, error)
	// Get retrieves the details of the machine
	GetMachine(ctx context.Context, in *GetMachineRequest, opts ...grpc.CallOption) (*proto1.Machine, error)
	// List gets all the machines
	ListMachines(ctx context.Context, in *ListMachinesRequest, opts ...grpc.CallOption) (*ListMachinesResponse, error)
	// Delete delete the machine
	DeleteMachine(ctx context.Context, in *DeleteMachineRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	// Import machines from sources
	//
	// This doesn't return google.longrunning.Operation as the corresponding
	// package is not imported into chops go package.
	ImportMachines(ctx context.Context, in *ImportMachinesRequest, opts ...grpc.CallOption) (*status.Status, error)
	// CreateRack creates a new rack
	CreateRack(ctx context.Context, in *CreateRackRequest, opts ...grpc.CallOption) (*proto1.Rack, error)
	// Update updates the rack
	UpdateRack(ctx context.Context, in *UpdateRackRequest, opts ...grpc.CallOption) (*proto1.Rack, error)
	// Get retrieves the details of the rack
	GetRack(ctx context.Context, in *GetRackRequest, opts ...grpc.CallOption) (*proto1.Rack, error)
	// List gets all the racks
	ListRacks(ctx context.Context, in *ListRacksRequest, opts ...grpc.CallOption) (*ListRacksResponse, error)
	// Delete delete the rack
	DeleteRack(ctx context.Context, in *DeleteRackRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	// CreateMachineLSE creates a new machineLSE
	CreateMachineLSE(ctx context.Context, in *CreateMachineLSERequest, opts ...grpc.CallOption) (*proto1.MachineLSE, error)
	// Update updates the machineLSE
	UpdateMachineLSE(ctx context.Context, in *UpdateMachineLSERequest, opts ...grpc.CallOption) (*proto1.MachineLSE, error)
	// Get retrieves the details of the machineLSE
	GetMachineLSE(ctx context.Context, in *GetMachineLSERequest, opts ...grpc.CallOption) (*proto1.MachineLSE, error)
	// List gets all the machineLSEs
	ListMachineLSEs(ctx context.Context, in *ListMachineLSEsRequest, opts ...grpc.CallOption) (*ListMachineLSEsResponse, error)
	// Delete delete the machineLSE
	DeleteMachineLSE(ctx context.Context, in *DeleteMachineLSERequest, opts ...grpc.CallOption) (*empty.Empty, error)
	// ImportMachineLSEs imports machine LSEs & all related infos.
	ImportMachineLSEs(ctx context.Context, in *ImportMachineLSEsRequest, opts ...grpc.CallOption) (*status.Status, error)
	// CreateRackLSE creates a new rackLSE
	CreateRackLSE(ctx context.Context, in *CreateRackLSERequest, opts ...grpc.CallOption) (*proto1.RackLSE, error)
	// Update updates the rackLSE
	UpdateRackLSE(ctx context.Context, in *UpdateRackLSERequest, opts ...grpc.CallOption) (*proto1.RackLSE, error)
	// Get retrieves the details of the rackLSE
	GetRackLSE(ctx context.Context, in *GetRackLSERequest, opts ...grpc.CallOption) (*proto1.RackLSE, error)
	// List gets all the rackLSEs
	ListRackLSEs(ctx context.Context, in *ListRackLSEsRequest, opts ...grpc.CallOption) (*ListRackLSEsResponse, error)
	// Delete delete the rackLSE
	DeleteRackLSE(ctx context.Context, in *DeleteRackLSERequest, opts ...grpc.CallOption) (*empty.Empty, error)
	// CreateNic creates a new nic
	CreateNic(ctx context.Context, in *CreateNicRequest, opts ...grpc.CallOption) (*proto1.Nic, error)
	// Update updates the nic
	UpdateNic(ctx context.Context, in *UpdateNicRequest, opts ...grpc.CallOption) (*proto1.Nic, error)
	// Get retrieves the details of the nic
	GetNic(ctx context.Context, in *GetNicRequest, opts ...grpc.CallOption) (*proto1.Nic, error)
	// List gets all the nics
	ListNics(ctx context.Context, in *ListNicsRequest, opts ...grpc.CallOption) (*ListNicsResponse, error)
	// Delete delete the nic
	DeleteNic(ctx context.Context, in *DeleteNicRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	// ImportNics imports nics info.
	ImportNics(ctx context.Context, in *ImportNicsRequest, opts ...grpc.CallOption) (*status.Status, error)
	// ImportDatacenters imports datacenter & its related info, including kvm & switch.
	ImportDatacenters(ctx context.Context, in *ImportDatacentersRequest, opts ...grpc.CallOption) (*status.Status, error)
	// CreateKVM creates a new KVM
	CreateKVM(ctx context.Context, in *CreateKVMRequest, opts ...grpc.CallOption) (*proto1.KVM, error)
	// Update updates the KVM
	UpdateKVM(ctx context.Context, in *UpdateKVMRequest, opts ...grpc.CallOption) (*proto1.KVM, error)
	// Get retrieves the details of the KVM
	GetKVM(ctx context.Context, in *GetKVMRequest, opts ...grpc.CallOption) (*proto1.KVM, error)
	// List gets all the KVMs
	ListKVMs(ctx context.Context, in *ListKVMsRequest, opts ...grpc.CallOption) (*ListKVMsResponse, error)
	// Delete delete the KVM
	DeleteKVM(ctx context.Context, in *DeleteKVMRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	// CreateRPM creates a new RPM
	CreateRPM(ctx context.Context, in *CreateRPMRequest, opts ...grpc.CallOption) (*proto1.RPM, error)
	// Update updates the RPM
	UpdateRPM(ctx context.Context, in *UpdateRPMRequest, opts ...grpc.CallOption) (*proto1.RPM, error)
	// Get retrieves the details of the RPM
	GetRPM(ctx context.Context, in *GetRPMRequest, opts ...grpc.CallOption) (*proto1.RPM, error)
	// List gets all the RPMs
	ListRPMs(ctx context.Context, in *ListRPMsRequest, opts ...grpc.CallOption) (*ListRPMsResponse, error)
	// Delete delete the RPM
	DeleteRPM(ctx context.Context, in *DeleteRPMRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	// CreateDrac creates a new drac
	CreateDrac(ctx context.Context, in *CreateDracRequest, opts ...grpc.CallOption) (*proto1.Drac, error)
	// Update updates the drac
	UpdateDrac(ctx context.Context, in *UpdateDracRequest, opts ...grpc.CallOption) (*proto1.Drac, error)
	// Get retrieves the details of the drac
	GetDrac(ctx context.Context, in *GetDracRequest, opts ...grpc.CallOption) (*proto1.Drac, error)
	// List gets all the dracs
	ListDracs(ctx context.Context, in *ListDracsRequest, opts ...grpc.CallOption) (*ListDracsResponse, error)
	// Delete delete the drac
	DeleteDrac(ctx context.Context, in *DeleteDracRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	// CreateSwitch creates a new switch
	CreateSwitch(ctx context.Context, in *CreateSwitchRequest, opts ...grpc.CallOption) (*proto1.Switch, error)
	// Update updates the switch
	UpdateSwitch(ctx context.Context, in *UpdateSwitchRequest, opts ...grpc.CallOption) (*proto1.Switch, error)
	// Get retrieves the details of the switch
	GetSwitch(ctx context.Context, in *GetSwitchRequest, opts ...grpc.CallOption) (*proto1.Switch, error)
	// List gets all the switches
	ListSwitches(ctx context.Context, in *ListSwitchesRequest, opts ...grpc.CallOption) (*ListSwitchesResponse, error)
	// Delete delete the switch
	DeleteSwitch(ctx context.Context, in *DeleteSwitchRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	// CreateVlan creates a new vlan
	CreateVlan(ctx context.Context, in *CreateVlanRequest, opts ...grpc.CallOption) (*proto1.Vlan, error)
	// Update updates the vlan
	UpdateVlan(ctx context.Context, in *UpdateVlanRequest, opts ...grpc.CallOption) (*proto1.Vlan, error)
	// Get retrieves the details of the vlan
	GetVlan(ctx context.Context, in *GetVlanRequest, opts ...grpc.CallOption) (*proto1.Vlan, error)
	// List gets all the vlans
	ListVlans(ctx context.Context, in *ListVlansRequest, opts ...grpc.CallOption) (*ListVlansResponse, error)
	// Delete delete the vlan
	DeleteVlan(ctx context.Context, in *DeleteVlanRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	// ImportVlans imports vlans & all IP-related infos.
	ImportVlans(ctx context.Context, in *ImportVlansRequest, opts ...grpc.CallOption) (*status.Status, error)
	// ImportStates imports states of all objects.
	ImportStates(ctx context.Context, in *ImportStatesRequest, opts ...grpc.CallOption) (*status.Status, error)
}
type fleetPRPCClient struct {
	client *prpc.Client
}

func NewFleetPRPCClient(client *prpc.Client) FleetClient {
	return &fleetPRPCClient{client}
}

func (c *fleetPRPCClient) CreateChromePlatform(ctx context.Context, in *CreateChromePlatformRequest, opts ...grpc.CallOption) (*proto1.ChromePlatform, error) {
	out := new(proto1.ChromePlatform)
	err := c.client.Call(ctx, "unifiedfleet.api.v1.rpc.Fleet", "CreateChromePlatform", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetPRPCClient) UpdateChromePlatform(ctx context.Context, in *UpdateChromePlatformRequest, opts ...grpc.CallOption) (*proto1.ChromePlatform, error) {
	out := new(proto1.ChromePlatform)
	err := c.client.Call(ctx, "unifiedfleet.api.v1.rpc.Fleet", "UpdateChromePlatform", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetPRPCClient) GetChromePlatform(ctx context.Context, in *GetChromePlatformRequest, opts ...grpc.CallOption) (*proto1.ChromePlatform, error) {
	out := new(proto1.ChromePlatform)
	err := c.client.Call(ctx, "unifiedfleet.api.v1.rpc.Fleet", "GetChromePlatform", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetPRPCClient) ListChromePlatforms(ctx context.Context, in *ListChromePlatformsRequest, opts ...grpc.CallOption) (*ListChromePlatformsResponse, error) {
	out := new(ListChromePlatformsResponse)
	err := c.client.Call(ctx, "unifiedfleet.api.v1.rpc.Fleet", "ListChromePlatforms", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetPRPCClient) DeleteChromePlatform(ctx context.Context, in *DeleteChromePlatformRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.client.Call(ctx, "unifiedfleet.api.v1.rpc.Fleet", "DeleteChromePlatform", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetPRPCClient) ImportChromePlatforms(ctx context.Context, in *ImportChromePlatformsRequest, opts ...grpc.CallOption) (*status.Status, error) {
	out := new(status.Status)
	err := c.client.Call(ctx, "unifiedfleet.api.v1.rpc.Fleet", "ImportChromePlatforms", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetPRPCClient) CreateMachineLSEPrototype(ctx context.Context, in *CreateMachineLSEPrototypeRequest, opts ...grpc.CallOption) (*proto1.MachineLSEPrototype, error) {
	out := new(proto1.MachineLSEPrototype)
	err := c.client.Call(ctx, "unifiedfleet.api.v1.rpc.Fleet", "CreateMachineLSEPrototype", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetPRPCClient) UpdateMachineLSEPrototype(ctx context.Context, in *UpdateMachineLSEPrototypeRequest, opts ...grpc.CallOption) (*proto1.MachineLSEPrototype, error) {
	out := new(proto1.MachineLSEPrototype)
	err := c.client.Call(ctx, "unifiedfleet.api.v1.rpc.Fleet", "UpdateMachineLSEPrototype", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetPRPCClient) GetMachineLSEPrototype(ctx context.Context, in *GetMachineLSEPrototypeRequest, opts ...grpc.CallOption) (*proto1.MachineLSEPrototype, error) {
	out := new(proto1.MachineLSEPrototype)
	err := c.client.Call(ctx, "unifiedfleet.api.v1.rpc.Fleet", "GetMachineLSEPrototype", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetPRPCClient) ListMachineLSEPrototypes(ctx context.Context, in *ListMachineLSEPrototypesRequest, opts ...grpc.CallOption) (*ListMachineLSEPrototypesResponse, error) {
	out := new(ListMachineLSEPrototypesResponse)
	err := c.client.Call(ctx, "unifiedfleet.api.v1.rpc.Fleet", "ListMachineLSEPrototypes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetPRPCClient) DeleteMachineLSEPrototype(ctx context.Context, in *DeleteMachineLSEPrototypeRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.client.Call(ctx, "unifiedfleet.api.v1.rpc.Fleet", "DeleteMachineLSEPrototype", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetPRPCClient) CreateRackLSEPrototype(ctx context.Context, in *CreateRackLSEPrototypeRequest, opts ...grpc.CallOption) (*proto1.RackLSEPrototype, error) {
	out := new(proto1.RackLSEPrototype)
	err := c.client.Call(ctx, "unifiedfleet.api.v1.rpc.Fleet", "CreateRackLSEPrototype", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetPRPCClient) UpdateRackLSEPrototype(ctx context.Context, in *UpdateRackLSEPrototypeRequest, opts ...grpc.CallOption) (*proto1.RackLSEPrototype, error) {
	out := new(proto1.RackLSEPrototype)
	err := c.client.Call(ctx, "unifiedfleet.api.v1.rpc.Fleet", "UpdateRackLSEPrototype", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetPRPCClient) GetRackLSEPrototype(ctx context.Context, in *GetRackLSEPrototypeRequest, opts ...grpc.CallOption) (*proto1.RackLSEPrototype, error) {
	out := new(proto1.RackLSEPrototype)
	err := c.client.Call(ctx, "unifiedfleet.api.v1.rpc.Fleet", "GetRackLSEPrototype", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetPRPCClient) ListRackLSEPrototypes(ctx context.Context, in *ListRackLSEPrototypesRequest, opts ...grpc.CallOption) (*ListRackLSEPrototypesResponse, error) {
	out := new(ListRackLSEPrototypesResponse)
	err := c.client.Call(ctx, "unifiedfleet.api.v1.rpc.Fleet", "ListRackLSEPrototypes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetPRPCClient) DeleteRackLSEPrototype(ctx context.Context, in *DeleteRackLSEPrototypeRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.client.Call(ctx, "unifiedfleet.api.v1.rpc.Fleet", "DeleteRackLSEPrototype", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetPRPCClient) CreateMachine(ctx context.Context, in *CreateMachineRequest, opts ...grpc.CallOption) (*proto1.Machine, error) {
	out := new(proto1.Machine)
	err := c.client.Call(ctx, "unifiedfleet.api.v1.rpc.Fleet", "CreateMachine", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetPRPCClient) UpdateMachine(ctx context.Context, in *UpdateMachineRequest, opts ...grpc.CallOption) (*proto1.Machine, error) {
	out := new(proto1.Machine)
	err := c.client.Call(ctx, "unifiedfleet.api.v1.rpc.Fleet", "UpdateMachine", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetPRPCClient) GetMachine(ctx context.Context, in *GetMachineRequest, opts ...grpc.CallOption) (*proto1.Machine, error) {
	out := new(proto1.Machine)
	err := c.client.Call(ctx, "unifiedfleet.api.v1.rpc.Fleet", "GetMachine", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetPRPCClient) ListMachines(ctx context.Context, in *ListMachinesRequest, opts ...grpc.CallOption) (*ListMachinesResponse, error) {
	out := new(ListMachinesResponse)
	err := c.client.Call(ctx, "unifiedfleet.api.v1.rpc.Fleet", "ListMachines", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetPRPCClient) DeleteMachine(ctx context.Context, in *DeleteMachineRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.client.Call(ctx, "unifiedfleet.api.v1.rpc.Fleet", "DeleteMachine", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetPRPCClient) ImportMachines(ctx context.Context, in *ImportMachinesRequest, opts ...grpc.CallOption) (*status.Status, error) {
	out := new(status.Status)
	err := c.client.Call(ctx, "unifiedfleet.api.v1.rpc.Fleet", "ImportMachines", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetPRPCClient) CreateRack(ctx context.Context, in *CreateRackRequest, opts ...grpc.CallOption) (*proto1.Rack, error) {
	out := new(proto1.Rack)
	err := c.client.Call(ctx, "unifiedfleet.api.v1.rpc.Fleet", "CreateRack", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetPRPCClient) UpdateRack(ctx context.Context, in *UpdateRackRequest, opts ...grpc.CallOption) (*proto1.Rack, error) {
	out := new(proto1.Rack)
	err := c.client.Call(ctx, "unifiedfleet.api.v1.rpc.Fleet", "UpdateRack", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetPRPCClient) GetRack(ctx context.Context, in *GetRackRequest, opts ...grpc.CallOption) (*proto1.Rack, error) {
	out := new(proto1.Rack)
	err := c.client.Call(ctx, "unifiedfleet.api.v1.rpc.Fleet", "GetRack", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetPRPCClient) ListRacks(ctx context.Context, in *ListRacksRequest, opts ...grpc.CallOption) (*ListRacksResponse, error) {
	out := new(ListRacksResponse)
	err := c.client.Call(ctx, "unifiedfleet.api.v1.rpc.Fleet", "ListRacks", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetPRPCClient) DeleteRack(ctx context.Context, in *DeleteRackRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.client.Call(ctx, "unifiedfleet.api.v1.rpc.Fleet", "DeleteRack", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetPRPCClient) CreateMachineLSE(ctx context.Context, in *CreateMachineLSERequest, opts ...grpc.CallOption) (*proto1.MachineLSE, error) {
	out := new(proto1.MachineLSE)
	err := c.client.Call(ctx, "unifiedfleet.api.v1.rpc.Fleet", "CreateMachineLSE", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetPRPCClient) UpdateMachineLSE(ctx context.Context, in *UpdateMachineLSERequest, opts ...grpc.CallOption) (*proto1.MachineLSE, error) {
	out := new(proto1.MachineLSE)
	err := c.client.Call(ctx, "unifiedfleet.api.v1.rpc.Fleet", "UpdateMachineLSE", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetPRPCClient) GetMachineLSE(ctx context.Context, in *GetMachineLSERequest, opts ...grpc.CallOption) (*proto1.MachineLSE, error) {
	out := new(proto1.MachineLSE)
	err := c.client.Call(ctx, "unifiedfleet.api.v1.rpc.Fleet", "GetMachineLSE", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetPRPCClient) ListMachineLSEs(ctx context.Context, in *ListMachineLSEsRequest, opts ...grpc.CallOption) (*ListMachineLSEsResponse, error) {
	out := new(ListMachineLSEsResponse)
	err := c.client.Call(ctx, "unifiedfleet.api.v1.rpc.Fleet", "ListMachineLSEs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetPRPCClient) DeleteMachineLSE(ctx context.Context, in *DeleteMachineLSERequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.client.Call(ctx, "unifiedfleet.api.v1.rpc.Fleet", "DeleteMachineLSE", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetPRPCClient) ImportMachineLSEs(ctx context.Context, in *ImportMachineLSEsRequest, opts ...grpc.CallOption) (*status.Status, error) {
	out := new(status.Status)
	err := c.client.Call(ctx, "unifiedfleet.api.v1.rpc.Fleet", "ImportMachineLSEs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetPRPCClient) CreateRackLSE(ctx context.Context, in *CreateRackLSERequest, opts ...grpc.CallOption) (*proto1.RackLSE, error) {
	out := new(proto1.RackLSE)
	err := c.client.Call(ctx, "unifiedfleet.api.v1.rpc.Fleet", "CreateRackLSE", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetPRPCClient) UpdateRackLSE(ctx context.Context, in *UpdateRackLSERequest, opts ...grpc.CallOption) (*proto1.RackLSE, error) {
	out := new(proto1.RackLSE)
	err := c.client.Call(ctx, "unifiedfleet.api.v1.rpc.Fleet", "UpdateRackLSE", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetPRPCClient) GetRackLSE(ctx context.Context, in *GetRackLSERequest, opts ...grpc.CallOption) (*proto1.RackLSE, error) {
	out := new(proto1.RackLSE)
	err := c.client.Call(ctx, "unifiedfleet.api.v1.rpc.Fleet", "GetRackLSE", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetPRPCClient) ListRackLSEs(ctx context.Context, in *ListRackLSEsRequest, opts ...grpc.CallOption) (*ListRackLSEsResponse, error) {
	out := new(ListRackLSEsResponse)
	err := c.client.Call(ctx, "unifiedfleet.api.v1.rpc.Fleet", "ListRackLSEs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetPRPCClient) DeleteRackLSE(ctx context.Context, in *DeleteRackLSERequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.client.Call(ctx, "unifiedfleet.api.v1.rpc.Fleet", "DeleteRackLSE", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetPRPCClient) CreateNic(ctx context.Context, in *CreateNicRequest, opts ...grpc.CallOption) (*proto1.Nic, error) {
	out := new(proto1.Nic)
	err := c.client.Call(ctx, "unifiedfleet.api.v1.rpc.Fleet", "CreateNic", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetPRPCClient) UpdateNic(ctx context.Context, in *UpdateNicRequest, opts ...grpc.CallOption) (*proto1.Nic, error) {
	out := new(proto1.Nic)
	err := c.client.Call(ctx, "unifiedfleet.api.v1.rpc.Fleet", "UpdateNic", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetPRPCClient) GetNic(ctx context.Context, in *GetNicRequest, opts ...grpc.CallOption) (*proto1.Nic, error) {
	out := new(proto1.Nic)
	err := c.client.Call(ctx, "unifiedfleet.api.v1.rpc.Fleet", "GetNic", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetPRPCClient) ListNics(ctx context.Context, in *ListNicsRequest, opts ...grpc.CallOption) (*ListNicsResponse, error) {
	out := new(ListNicsResponse)
	err := c.client.Call(ctx, "unifiedfleet.api.v1.rpc.Fleet", "ListNics", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetPRPCClient) DeleteNic(ctx context.Context, in *DeleteNicRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.client.Call(ctx, "unifiedfleet.api.v1.rpc.Fleet", "DeleteNic", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetPRPCClient) ImportNics(ctx context.Context, in *ImportNicsRequest, opts ...grpc.CallOption) (*status.Status, error) {
	out := new(status.Status)
	err := c.client.Call(ctx, "unifiedfleet.api.v1.rpc.Fleet", "ImportNics", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetPRPCClient) ImportDatacenters(ctx context.Context, in *ImportDatacentersRequest, opts ...grpc.CallOption) (*status.Status, error) {
	out := new(status.Status)
	err := c.client.Call(ctx, "unifiedfleet.api.v1.rpc.Fleet", "ImportDatacenters", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetPRPCClient) CreateKVM(ctx context.Context, in *CreateKVMRequest, opts ...grpc.CallOption) (*proto1.KVM, error) {
	out := new(proto1.KVM)
	err := c.client.Call(ctx, "unifiedfleet.api.v1.rpc.Fleet", "CreateKVM", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetPRPCClient) UpdateKVM(ctx context.Context, in *UpdateKVMRequest, opts ...grpc.CallOption) (*proto1.KVM, error) {
	out := new(proto1.KVM)
	err := c.client.Call(ctx, "unifiedfleet.api.v1.rpc.Fleet", "UpdateKVM", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetPRPCClient) GetKVM(ctx context.Context, in *GetKVMRequest, opts ...grpc.CallOption) (*proto1.KVM, error) {
	out := new(proto1.KVM)
	err := c.client.Call(ctx, "unifiedfleet.api.v1.rpc.Fleet", "GetKVM", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetPRPCClient) ListKVMs(ctx context.Context, in *ListKVMsRequest, opts ...grpc.CallOption) (*ListKVMsResponse, error) {
	out := new(ListKVMsResponse)
	err := c.client.Call(ctx, "unifiedfleet.api.v1.rpc.Fleet", "ListKVMs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetPRPCClient) DeleteKVM(ctx context.Context, in *DeleteKVMRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.client.Call(ctx, "unifiedfleet.api.v1.rpc.Fleet", "DeleteKVM", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetPRPCClient) CreateRPM(ctx context.Context, in *CreateRPMRequest, opts ...grpc.CallOption) (*proto1.RPM, error) {
	out := new(proto1.RPM)
	err := c.client.Call(ctx, "unifiedfleet.api.v1.rpc.Fleet", "CreateRPM", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetPRPCClient) UpdateRPM(ctx context.Context, in *UpdateRPMRequest, opts ...grpc.CallOption) (*proto1.RPM, error) {
	out := new(proto1.RPM)
	err := c.client.Call(ctx, "unifiedfleet.api.v1.rpc.Fleet", "UpdateRPM", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetPRPCClient) GetRPM(ctx context.Context, in *GetRPMRequest, opts ...grpc.CallOption) (*proto1.RPM, error) {
	out := new(proto1.RPM)
	err := c.client.Call(ctx, "unifiedfleet.api.v1.rpc.Fleet", "GetRPM", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetPRPCClient) ListRPMs(ctx context.Context, in *ListRPMsRequest, opts ...grpc.CallOption) (*ListRPMsResponse, error) {
	out := new(ListRPMsResponse)
	err := c.client.Call(ctx, "unifiedfleet.api.v1.rpc.Fleet", "ListRPMs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetPRPCClient) DeleteRPM(ctx context.Context, in *DeleteRPMRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.client.Call(ctx, "unifiedfleet.api.v1.rpc.Fleet", "DeleteRPM", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetPRPCClient) CreateDrac(ctx context.Context, in *CreateDracRequest, opts ...grpc.CallOption) (*proto1.Drac, error) {
	out := new(proto1.Drac)
	err := c.client.Call(ctx, "unifiedfleet.api.v1.rpc.Fleet", "CreateDrac", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetPRPCClient) UpdateDrac(ctx context.Context, in *UpdateDracRequest, opts ...grpc.CallOption) (*proto1.Drac, error) {
	out := new(proto1.Drac)
	err := c.client.Call(ctx, "unifiedfleet.api.v1.rpc.Fleet", "UpdateDrac", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetPRPCClient) GetDrac(ctx context.Context, in *GetDracRequest, opts ...grpc.CallOption) (*proto1.Drac, error) {
	out := new(proto1.Drac)
	err := c.client.Call(ctx, "unifiedfleet.api.v1.rpc.Fleet", "GetDrac", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetPRPCClient) ListDracs(ctx context.Context, in *ListDracsRequest, opts ...grpc.CallOption) (*ListDracsResponse, error) {
	out := new(ListDracsResponse)
	err := c.client.Call(ctx, "unifiedfleet.api.v1.rpc.Fleet", "ListDracs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetPRPCClient) DeleteDrac(ctx context.Context, in *DeleteDracRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.client.Call(ctx, "unifiedfleet.api.v1.rpc.Fleet", "DeleteDrac", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetPRPCClient) CreateSwitch(ctx context.Context, in *CreateSwitchRequest, opts ...grpc.CallOption) (*proto1.Switch, error) {
	out := new(proto1.Switch)
	err := c.client.Call(ctx, "unifiedfleet.api.v1.rpc.Fleet", "CreateSwitch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetPRPCClient) UpdateSwitch(ctx context.Context, in *UpdateSwitchRequest, opts ...grpc.CallOption) (*proto1.Switch, error) {
	out := new(proto1.Switch)
	err := c.client.Call(ctx, "unifiedfleet.api.v1.rpc.Fleet", "UpdateSwitch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetPRPCClient) GetSwitch(ctx context.Context, in *GetSwitchRequest, opts ...grpc.CallOption) (*proto1.Switch, error) {
	out := new(proto1.Switch)
	err := c.client.Call(ctx, "unifiedfleet.api.v1.rpc.Fleet", "GetSwitch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetPRPCClient) ListSwitches(ctx context.Context, in *ListSwitchesRequest, opts ...grpc.CallOption) (*ListSwitchesResponse, error) {
	out := new(ListSwitchesResponse)
	err := c.client.Call(ctx, "unifiedfleet.api.v1.rpc.Fleet", "ListSwitches", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetPRPCClient) DeleteSwitch(ctx context.Context, in *DeleteSwitchRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.client.Call(ctx, "unifiedfleet.api.v1.rpc.Fleet", "DeleteSwitch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetPRPCClient) CreateVlan(ctx context.Context, in *CreateVlanRequest, opts ...grpc.CallOption) (*proto1.Vlan, error) {
	out := new(proto1.Vlan)
	err := c.client.Call(ctx, "unifiedfleet.api.v1.rpc.Fleet", "CreateVlan", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetPRPCClient) UpdateVlan(ctx context.Context, in *UpdateVlanRequest, opts ...grpc.CallOption) (*proto1.Vlan, error) {
	out := new(proto1.Vlan)
	err := c.client.Call(ctx, "unifiedfleet.api.v1.rpc.Fleet", "UpdateVlan", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetPRPCClient) GetVlan(ctx context.Context, in *GetVlanRequest, opts ...grpc.CallOption) (*proto1.Vlan, error) {
	out := new(proto1.Vlan)
	err := c.client.Call(ctx, "unifiedfleet.api.v1.rpc.Fleet", "GetVlan", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetPRPCClient) ListVlans(ctx context.Context, in *ListVlansRequest, opts ...grpc.CallOption) (*ListVlansResponse, error) {
	out := new(ListVlansResponse)
	err := c.client.Call(ctx, "unifiedfleet.api.v1.rpc.Fleet", "ListVlans", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetPRPCClient) DeleteVlan(ctx context.Context, in *DeleteVlanRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.client.Call(ctx, "unifiedfleet.api.v1.rpc.Fleet", "DeleteVlan", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetPRPCClient) ImportVlans(ctx context.Context, in *ImportVlansRequest, opts ...grpc.CallOption) (*status.Status, error) {
	out := new(status.Status)
	err := c.client.Call(ctx, "unifiedfleet.api.v1.rpc.Fleet", "ImportVlans", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetPRPCClient) ImportStates(ctx context.Context, in *ImportStatesRequest, opts ...grpc.CallOption) (*status.Status, error) {
	out := new(status.Status)
	err := c.client.Call(ctx, "unifiedfleet.api.v1.rpc.Fleet", "ImportStates", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

type fleetClient struct {
	cc grpc.ClientConnInterface
}

func NewFleetClient(cc grpc.ClientConnInterface) FleetClient {
	return &fleetClient{cc}
}

func (c *fleetClient) CreateChromePlatform(ctx context.Context, in *CreateChromePlatformRequest, opts ...grpc.CallOption) (*proto1.ChromePlatform, error) {
	out := new(proto1.ChromePlatform)
	err := c.cc.Invoke(ctx, "/unifiedfleet.api.v1.rpc.Fleet/CreateChromePlatform", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetClient) UpdateChromePlatform(ctx context.Context, in *UpdateChromePlatformRequest, opts ...grpc.CallOption) (*proto1.ChromePlatform, error) {
	out := new(proto1.ChromePlatform)
	err := c.cc.Invoke(ctx, "/unifiedfleet.api.v1.rpc.Fleet/UpdateChromePlatform", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetClient) GetChromePlatform(ctx context.Context, in *GetChromePlatformRequest, opts ...grpc.CallOption) (*proto1.ChromePlatform, error) {
	out := new(proto1.ChromePlatform)
	err := c.cc.Invoke(ctx, "/unifiedfleet.api.v1.rpc.Fleet/GetChromePlatform", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetClient) ListChromePlatforms(ctx context.Context, in *ListChromePlatformsRequest, opts ...grpc.CallOption) (*ListChromePlatformsResponse, error) {
	out := new(ListChromePlatformsResponse)
	err := c.cc.Invoke(ctx, "/unifiedfleet.api.v1.rpc.Fleet/ListChromePlatforms", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetClient) DeleteChromePlatform(ctx context.Context, in *DeleteChromePlatformRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/unifiedfleet.api.v1.rpc.Fleet/DeleteChromePlatform", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetClient) ImportChromePlatforms(ctx context.Context, in *ImportChromePlatformsRequest, opts ...grpc.CallOption) (*status.Status, error) {
	out := new(status.Status)
	err := c.cc.Invoke(ctx, "/unifiedfleet.api.v1.rpc.Fleet/ImportChromePlatforms", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetClient) CreateMachineLSEPrototype(ctx context.Context, in *CreateMachineLSEPrototypeRequest, opts ...grpc.CallOption) (*proto1.MachineLSEPrototype, error) {
	out := new(proto1.MachineLSEPrototype)
	err := c.cc.Invoke(ctx, "/unifiedfleet.api.v1.rpc.Fleet/CreateMachineLSEPrototype", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetClient) UpdateMachineLSEPrototype(ctx context.Context, in *UpdateMachineLSEPrototypeRequest, opts ...grpc.CallOption) (*proto1.MachineLSEPrototype, error) {
	out := new(proto1.MachineLSEPrototype)
	err := c.cc.Invoke(ctx, "/unifiedfleet.api.v1.rpc.Fleet/UpdateMachineLSEPrototype", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetClient) GetMachineLSEPrototype(ctx context.Context, in *GetMachineLSEPrototypeRequest, opts ...grpc.CallOption) (*proto1.MachineLSEPrototype, error) {
	out := new(proto1.MachineLSEPrototype)
	err := c.cc.Invoke(ctx, "/unifiedfleet.api.v1.rpc.Fleet/GetMachineLSEPrototype", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetClient) ListMachineLSEPrototypes(ctx context.Context, in *ListMachineLSEPrototypesRequest, opts ...grpc.CallOption) (*ListMachineLSEPrototypesResponse, error) {
	out := new(ListMachineLSEPrototypesResponse)
	err := c.cc.Invoke(ctx, "/unifiedfleet.api.v1.rpc.Fleet/ListMachineLSEPrototypes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetClient) DeleteMachineLSEPrototype(ctx context.Context, in *DeleteMachineLSEPrototypeRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/unifiedfleet.api.v1.rpc.Fleet/DeleteMachineLSEPrototype", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetClient) CreateRackLSEPrototype(ctx context.Context, in *CreateRackLSEPrototypeRequest, opts ...grpc.CallOption) (*proto1.RackLSEPrototype, error) {
	out := new(proto1.RackLSEPrototype)
	err := c.cc.Invoke(ctx, "/unifiedfleet.api.v1.rpc.Fleet/CreateRackLSEPrototype", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetClient) UpdateRackLSEPrototype(ctx context.Context, in *UpdateRackLSEPrototypeRequest, opts ...grpc.CallOption) (*proto1.RackLSEPrototype, error) {
	out := new(proto1.RackLSEPrototype)
	err := c.cc.Invoke(ctx, "/unifiedfleet.api.v1.rpc.Fleet/UpdateRackLSEPrototype", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetClient) GetRackLSEPrototype(ctx context.Context, in *GetRackLSEPrototypeRequest, opts ...grpc.CallOption) (*proto1.RackLSEPrototype, error) {
	out := new(proto1.RackLSEPrototype)
	err := c.cc.Invoke(ctx, "/unifiedfleet.api.v1.rpc.Fleet/GetRackLSEPrototype", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetClient) ListRackLSEPrototypes(ctx context.Context, in *ListRackLSEPrototypesRequest, opts ...grpc.CallOption) (*ListRackLSEPrototypesResponse, error) {
	out := new(ListRackLSEPrototypesResponse)
	err := c.cc.Invoke(ctx, "/unifiedfleet.api.v1.rpc.Fleet/ListRackLSEPrototypes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetClient) DeleteRackLSEPrototype(ctx context.Context, in *DeleteRackLSEPrototypeRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/unifiedfleet.api.v1.rpc.Fleet/DeleteRackLSEPrototype", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetClient) CreateMachine(ctx context.Context, in *CreateMachineRequest, opts ...grpc.CallOption) (*proto1.Machine, error) {
	out := new(proto1.Machine)
	err := c.cc.Invoke(ctx, "/unifiedfleet.api.v1.rpc.Fleet/CreateMachine", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetClient) UpdateMachine(ctx context.Context, in *UpdateMachineRequest, opts ...grpc.CallOption) (*proto1.Machine, error) {
	out := new(proto1.Machine)
	err := c.cc.Invoke(ctx, "/unifiedfleet.api.v1.rpc.Fleet/UpdateMachine", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetClient) GetMachine(ctx context.Context, in *GetMachineRequest, opts ...grpc.CallOption) (*proto1.Machine, error) {
	out := new(proto1.Machine)
	err := c.cc.Invoke(ctx, "/unifiedfleet.api.v1.rpc.Fleet/GetMachine", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetClient) ListMachines(ctx context.Context, in *ListMachinesRequest, opts ...grpc.CallOption) (*ListMachinesResponse, error) {
	out := new(ListMachinesResponse)
	err := c.cc.Invoke(ctx, "/unifiedfleet.api.v1.rpc.Fleet/ListMachines", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetClient) DeleteMachine(ctx context.Context, in *DeleteMachineRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/unifiedfleet.api.v1.rpc.Fleet/DeleteMachine", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetClient) ImportMachines(ctx context.Context, in *ImportMachinesRequest, opts ...grpc.CallOption) (*status.Status, error) {
	out := new(status.Status)
	err := c.cc.Invoke(ctx, "/unifiedfleet.api.v1.rpc.Fleet/ImportMachines", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetClient) CreateRack(ctx context.Context, in *CreateRackRequest, opts ...grpc.CallOption) (*proto1.Rack, error) {
	out := new(proto1.Rack)
	err := c.cc.Invoke(ctx, "/unifiedfleet.api.v1.rpc.Fleet/CreateRack", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetClient) UpdateRack(ctx context.Context, in *UpdateRackRequest, opts ...grpc.CallOption) (*proto1.Rack, error) {
	out := new(proto1.Rack)
	err := c.cc.Invoke(ctx, "/unifiedfleet.api.v1.rpc.Fleet/UpdateRack", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetClient) GetRack(ctx context.Context, in *GetRackRequest, opts ...grpc.CallOption) (*proto1.Rack, error) {
	out := new(proto1.Rack)
	err := c.cc.Invoke(ctx, "/unifiedfleet.api.v1.rpc.Fleet/GetRack", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetClient) ListRacks(ctx context.Context, in *ListRacksRequest, opts ...grpc.CallOption) (*ListRacksResponse, error) {
	out := new(ListRacksResponse)
	err := c.cc.Invoke(ctx, "/unifiedfleet.api.v1.rpc.Fleet/ListRacks", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetClient) DeleteRack(ctx context.Context, in *DeleteRackRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/unifiedfleet.api.v1.rpc.Fleet/DeleteRack", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetClient) CreateMachineLSE(ctx context.Context, in *CreateMachineLSERequest, opts ...grpc.CallOption) (*proto1.MachineLSE, error) {
	out := new(proto1.MachineLSE)
	err := c.cc.Invoke(ctx, "/unifiedfleet.api.v1.rpc.Fleet/CreateMachineLSE", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetClient) UpdateMachineLSE(ctx context.Context, in *UpdateMachineLSERequest, opts ...grpc.CallOption) (*proto1.MachineLSE, error) {
	out := new(proto1.MachineLSE)
	err := c.cc.Invoke(ctx, "/unifiedfleet.api.v1.rpc.Fleet/UpdateMachineLSE", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetClient) GetMachineLSE(ctx context.Context, in *GetMachineLSERequest, opts ...grpc.CallOption) (*proto1.MachineLSE, error) {
	out := new(proto1.MachineLSE)
	err := c.cc.Invoke(ctx, "/unifiedfleet.api.v1.rpc.Fleet/GetMachineLSE", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetClient) ListMachineLSEs(ctx context.Context, in *ListMachineLSEsRequest, opts ...grpc.CallOption) (*ListMachineLSEsResponse, error) {
	out := new(ListMachineLSEsResponse)
	err := c.cc.Invoke(ctx, "/unifiedfleet.api.v1.rpc.Fleet/ListMachineLSEs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetClient) DeleteMachineLSE(ctx context.Context, in *DeleteMachineLSERequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/unifiedfleet.api.v1.rpc.Fleet/DeleteMachineLSE", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetClient) ImportMachineLSEs(ctx context.Context, in *ImportMachineLSEsRequest, opts ...grpc.CallOption) (*status.Status, error) {
	out := new(status.Status)
	err := c.cc.Invoke(ctx, "/unifiedfleet.api.v1.rpc.Fleet/ImportMachineLSEs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetClient) CreateRackLSE(ctx context.Context, in *CreateRackLSERequest, opts ...grpc.CallOption) (*proto1.RackLSE, error) {
	out := new(proto1.RackLSE)
	err := c.cc.Invoke(ctx, "/unifiedfleet.api.v1.rpc.Fleet/CreateRackLSE", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetClient) UpdateRackLSE(ctx context.Context, in *UpdateRackLSERequest, opts ...grpc.CallOption) (*proto1.RackLSE, error) {
	out := new(proto1.RackLSE)
	err := c.cc.Invoke(ctx, "/unifiedfleet.api.v1.rpc.Fleet/UpdateRackLSE", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetClient) GetRackLSE(ctx context.Context, in *GetRackLSERequest, opts ...grpc.CallOption) (*proto1.RackLSE, error) {
	out := new(proto1.RackLSE)
	err := c.cc.Invoke(ctx, "/unifiedfleet.api.v1.rpc.Fleet/GetRackLSE", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetClient) ListRackLSEs(ctx context.Context, in *ListRackLSEsRequest, opts ...grpc.CallOption) (*ListRackLSEsResponse, error) {
	out := new(ListRackLSEsResponse)
	err := c.cc.Invoke(ctx, "/unifiedfleet.api.v1.rpc.Fleet/ListRackLSEs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetClient) DeleteRackLSE(ctx context.Context, in *DeleteRackLSERequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/unifiedfleet.api.v1.rpc.Fleet/DeleteRackLSE", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetClient) CreateNic(ctx context.Context, in *CreateNicRequest, opts ...grpc.CallOption) (*proto1.Nic, error) {
	out := new(proto1.Nic)
	err := c.cc.Invoke(ctx, "/unifiedfleet.api.v1.rpc.Fleet/CreateNic", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetClient) UpdateNic(ctx context.Context, in *UpdateNicRequest, opts ...grpc.CallOption) (*proto1.Nic, error) {
	out := new(proto1.Nic)
	err := c.cc.Invoke(ctx, "/unifiedfleet.api.v1.rpc.Fleet/UpdateNic", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetClient) GetNic(ctx context.Context, in *GetNicRequest, opts ...grpc.CallOption) (*proto1.Nic, error) {
	out := new(proto1.Nic)
	err := c.cc.Invoke(ctx, "/unifiedfleet.api.v1.rpc.Fleet/GetNic", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetClient) ListNics(ctx context.Context, in *ListNicsRequest, opts ...grpc.CallOption) (*ListNicsResponse, error) {
	out := new(ListNicsResponse)
	err := c.cc.Invoke(ctx, "/unifiedfleet.api.v1.rpc.Fleet/ListNics", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetClient) DeleteNic(ctx context.Context, in *DeleteNicRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/unifiedfleet.api.v1.rpc.Fleet/DeleteNic", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetClient) ImportNics(ctx context.Context, in *ImportNicsRequest, opts ...grpc.CallOption) (*status.Status, error) {
	out := new(status.Status)
	err := c.cc.Invoke(ctx, "/unifiedfleet.api.v1.rpc.Fleet/ImportNics", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetClient) ImportDatacenters(ctx context.Context, in *ImportDatacentersRequest, opts ...grpc.CallOption) (*status.Status, error) {
	out := new(status.Status)
	err := c.cc.Invoke(ctx, "/unifiedfleet.api.v1.rpc.Fleet/ImportDatacenters", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetClient) CreateKVM(ctx context.Context, in *CreateKVMRequest, opts ...grpc.CallOption) (*proto1.KVM, error) {
	out := new(proto1.KVM)
	err := c.cc.Invoke(ctx, "/unifiedfleet.api.v1.rpc.Fleet/CreateKVM", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetClient) UpdateKVM(ctx context.Context, in *UpdateKVMRequest, opts ...grpc.CallOption) (*proto1.KVM, error) {
	out := new(proto1.KVM)
	err := c.cc.Invoke(ctx, "/unifiedfleet.api.v1.rpc.Fleet/UpdateKVM", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetClient) GetKVM(ctx context.Context, in *GetKVMRequest, opts ...grpc.CallOption) (*proto1.KVM, error) {
	out := new(proto1.KVM)
	err := c.cc.Invoke(ctx, "/unifiedfleet.api.v1.rpc.Fleet/GetKVM", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetClient) ListKVMs(ctx context.Context, in *ListKVMsRequest, opts ...grpc.CallOption) (*ListKVMsResponse, error) {
	out := new(ListKVMsResponse)
	err := c.cc.Invoke(ctx, "/unifiedfleet.api.v1.rpc.Fleet/ListKVMs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetClient) DeleteKVM(ctx context.Context, in *DeleteKVMRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/unifiedfleet.api.v1.rpc.Fleet/DeleteKVM", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetClient) CreateRPM(ctx context.Context, in *CreateRPMRequest, opts ...grpc.CallOption) (*proto1.RPM, error) {
	out := new(proto1.RPM)
	err := c.cc.Invoke(ctx, "/unifiedfleet.api.v1.rpc.Fleet/CreateRPM", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetClient) UpdateRPM(ctx context.Context, in *UpdateRPMRequest, opts ...grpc.CallOption) (*proto1.RPM, error) {
	out := new(proto1.RPM)
	err := c.cc.Invoke(ctx, "/unifiedfleet.api.v1.rpc.Fleet/UpdateRPM", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetClient) GetRPM(ctx context.Context, in *GetRPMRequest, opts ...grpc.CallOption) (*proto1.RPM, error) {
	out := new(proto1.RPM)
	err := c.cc.Invoke(ctx, "/unifiedfleet.api.v1.rpc.Fleet/GetRPM", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetClient) ListRPMs(ctx context.Context, in *ListRPMsRequest, opts ...grpc.CallOption) (*ListRPMsResponse, error) {
	out := new(ListRPMsResponse)
	err := c.cc.Invoke(ctx, "/unifiedfleet.api.v1.rpc.Fleet/ListRPMs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetClient) DeleteRPM(ctx context.Context, in *DeleteRPMRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/unifiedfleet.api.v1.rpc.Fleet/DeleteRPM", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetClient) CreateDrac(ctx context.Context, in *CreateDracRequest, opts ...grpc.CallOption) (*proto1.Drac, error) {
	out := new(proto1.Drac)
	err := c.cc.Invoke(ctx, "/unifiedfleet.api.v1.rpc.Fleet/CreateDrac", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetClient) UpdateDrac(ctx context.Context, in *UpdateDracRequest, opts ...grpc.CallOption) (*proto1.Drac, error) {
	out := new(proto1.Drac)
	err := c.cc.Invoke(ctx, "/unifiedfleet.api.v1.rpc.Fleet/UpdateDrac", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetClient) GetDrac(ctx context.Context, in *GetDracRequest, opts ...grpc.CallOption) (*proto1.Drac, error) {
	out := new(proto1.Drac)
	err := c.cc.Invoke(ctx, "/unifiedfleet.api.v1.rpc.Fleet/GetDrac", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetClient) ListDracs(ctx context.Context, in *ListDracsRequest, opts ...grpc.CallOption) (*ListDracsResponse, error) {
	out := new(ListDracsResponse)
	err := c.cc.Invoke(ctx, "/unifiedfleet.api.v1.rpc.Fleet/ListDracs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetClient) DeleteDrac(ctx context.Context, in *DeleteDracRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/unifiedfleet.api.v1.rpc.Fleet/DeleteDrac", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetClient) CreateSwitch(ctx context.Context, in *CreateSwitchRequest, opts ...grpc.CallOption) (*proto1.Switch, error) {
	out := new(proto1.Switch)
	err := c.cc.Invoke(ctx, "/unifiedfleet.api.v1.rpc.Fleet/CreateSwitch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetClient) UpdateSwitch(ctx context.Context, in *UpdateSwitchRequest, opts ...grpc.CallOption) (*proto1.Switch, error) {
	out := new(proto1.Switch)
	err := c.cc.Invoke(ctx, "/unifiedfleet.api.v1.rpc.Fleet/UpdateSwitch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetClient) GetSwitch(ctx context.Context, in *GetSwitchRequest, opts ...grpc.CallOption) (*proto1.Switch, error) {
	out := new(proto1.Switch)
	err := c.cc.Invoke(ctx, "/unifiedfleet.api.v1.rpc.Fleet/GetSwitch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetClient) ListSwitches(ctx context.Context, in *ListSwitchesRequest, opts ...grpc.CallOption) (*ListSwitchesResponse, error) {
	out := new(ListSwitchesResponse)
	err := c.cc.Invoke(ctx, "/unifiedfleet.api.v1.rpc.Fleet/ListSwitches", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetClient) DeleteSwitch(ctx context.Context, in *DeleteSwitchRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/unifiedfleet.api.v1.rpc.Fleet/DeleteSwitch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetClient) CreateVlan(ctx context.Context, in *CreateVlanRequest, opts ...grpc.CallOption) (*proto1.Vlan, error) {
	out := new(proto1.Vlan)
	err := c.cc.Invoke(ctx, "/unifiedfleet.api.v1.rpc.Fleet/CreateVlan", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetClient) UpdateVlan(ctx context.Context, in *UpdateVlanRequest, opts ...grpc.CallOption) (*proto1.Vlan, error) {
	out := new(proto1.Vlan)
	err := c.cc.Invoke(ctx, "/unifiedfleet.api.v1.rpc.Fleet/UpdateVlan", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetClient) GetVlan(ctx context.Context, in *GetVlanRequest, opts ...grpc.CallOption) (*proto1.Vlan, error) {
	out := new(proto1.Vlan)
	err := c.cc.Invoke(ctx, "/unifiedfleet.api.v1.rpc.Fleet/GetVlan", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetClient) ListVlans(ctx context.Context, in *ListVlansRequest, opts ...grpc.CallOption) (*ListVlansResponse, error) {
	out := new(ListVlansResponse)
	err := c.cc.Invoke(ctx, "/unifiedfleet.api.v1.rpc.Fleet/ListVlans", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetClient) DeleteVlan(ctx context.Context, in *DeleteVlanRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/unifiedfleet.api.v1.rpc.Fleet/DeleteVlan", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetClient) ImportVlans(ctx context.Context, in *ImportVlansRequest, opts ...grpc.CallOption) (*status.Status, error) {
	out := new(status.Status)
	err := c.cc.Invoke(ctx, "/unifiedfleet.api.v1.rpc.Fleet/ImportVlans", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetClient) ImportStates(ctx context.Context, in *ImportStatesRequest, opts ...grpc.CallOption) (*status.Status, error) {
	out := new(status.Status)
	err := c.cc.Invoke(ctx, "/unifiedfleet.api.v1.rpc.Fleet/ImportStates", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FleetServer is the server API for Fleet service.
type FleetServer interface {
	// CreateChromePlatform creates a new chromePlatform.
	CreateChromePlatform(context.Context, *CreateChromePlatformRequest) (*proto1.ChromePlatform, error)
	// Update updates the chromePlatform
	UpdateChromePlatform(context.Context, *UpdateChromePlatformRequest) (*proto1.ChromePlatform, error)
	// Get retrieves the details of the chromePlatform
	GetChromePlatform(context.Context, *GetChromePlatformRequest) (*proto1.ChromePlatform, error)
	// List gets all the chromePlatforms
	ListChromePlatforms(context.Context, *ListChromePlatformsRequest) (*ListChromePlatformsResponse, error)
	// Delete delete the chromePlatform
	DeleteChromePlatform(context.Context, *DeleteChromePlatformRequest) (*empty.Empty, error)
	// ImportChromePlatforms imports chrome platforms.
	ImportChromePlatforms(context.Context, *ImportChromePlatformsRequest) (*status.Status, error)
	// CreateMachineLSEPrototype creates a new MachineLSEPrototype.
	CreateMachineLSEPrototype(context.Context, *CreateMachineLSEPrototypeRequest) (*proto1.MachineLSEPrototype, error)
	// Update updates the MachineLSEPrototype
	UpdateMachineLSEPrototype(context.Context, *UpdateMachineLSEPrototypeRequest) (*proto1.MachineLSEPrototype, error)
	// Get retrieves the details of the MachineLSEPrototype
	GetMachineLSEPrototype(context.Context, *GetMachineLSEPrototypeRequest) (*proto1.MachineLSEPrototype, error)
	// List gets all the MachineLSEPrototypes
	ListMachineLSEPrototypes(context.Context, *ListMachineLSEPrototypesRequest) (*ListMachineLSEPrototypesResponse, error)
	// Delete delete the MachineLSEPrototype
	DeleteMachineLSEPrototype(context.Context, *DeleteMachineLSEPrototypeRequest) (*empty.Empty, error)
	// CreateRackLSEPrototype creates a new RackLSEPrototype.
	CreateRackLSEPrototype(context.Context, *CreateRackLSEPrototypeRequest) (*proto1.RackLSEPrototype, error)
	// Update updates the RackLSEPrototype
	UpdateRackLSEPrototype(context.Context, *UpdateRackLSEPrototypeRequest) (*proto1.RackLSEPrototype, error)
	// Get retrieves the details of the RackLSEPrototype
	GetRackLSEPrototype(context.Context, *GetRackLSEPrototypeRequest) (*proto1.RackLSEPrototype, error)
	// List gets all the RackLSEPrototypes
	ListRackLSEPrototypes(context.Context, *ListRackLSEPrototypesRequest) (*ListRackLSEPrototypesResponse, error)
	// Delete delete the RackLSEPrototype
	DeleteRackLSEPrototype(context.Context, *DeleteRackLSEPrototypeRequest) (*empty.Empty, error)
	// CreateMachine creates a new machine.
	CreateMachine(context.Context, *CreateMachineRequest) (*proto1.Machine, error)
	// Update updates the machine
	UpdateMachine(context.Context, *UpdateMachineRequest) (*proto1.Machine, error)
	// Get retrieves the details of the machine
	GetMachine(context.Context, *GetMachineRequest) (*proto1.Machine, error)
	// List gets all the machines
	ListMachines(context.Context, *ListMachinesRequest) (*ListMachinesResponse, error)
	// Delete delete the machine
	DeleteMachine(context.Context, *DeleteMachineRequest) (*empty.Empty, error)
	// Import machines from sources
	//
	// This doesn't return google.longrunning.Operation as the corresponding
	// package is not imported into chops go package.
	ImportMachines(context.Context, *ImportMachinesRequest) (*status.Status, error)
	// CreateRack creates a new rack
	CreateRack(context.Context, *CreateRackRequest) (*proto1.Rack, error)
	// Update updates the rack
	UpdateRack(context.Context, *UpdateRackRequest) (*proto1.Rack, error)
	// Get retrieves the details of the rack
	GetRack(context.Context, *GetRackRequest) (*proto1.Rack, error)
	// List gets all the racks
	ListRacks(context.Context, *ListRacksRequest) (*ListRacksResponse, error)
	// Delete delete the rack
	DeleteRack(context.Context, *DeleteRackRequest) (*empty.Empty, error)
	// CreateMachineLSE creates a new machineLSE
	CreateMachineLSE(context.Context, *CreateMachineLSERequest) (*proto1.MachineLSE, error)
	// Update updates the machineLSE
	UpdateMachineLSE(context.Context, *UpdateMachineLSERequest) (*proto1.MachineLSE, error)
	// Get retrieves the details of the machineLSE
	GetMachineLSE(context.Context, *GetMachineLSERequest) (*proto1.MachineLSE, error)
	// List gets all the machineLSEs
	ListMachineLSEs(context.Context, *ListMachineLSEsRequest) (*ListMachineLSEsResponse, error)
	// Delete delete the machineLSE
	DeleteMachineLSE(context.Context, *DeleteMachineLSERequest) (*empty.Empty, error)
	// ImportMachineLSEs imports machine LSEs & all related infos.
	ImportMachineLSEs(context.Context, *ImportMachineLSEsRequest) (*status.Status, error)
	// CreateRackLSE creates a new rackLSE
	CreateRackLSE(context.Context, *CreateRackLSERequest) (*proto1.RackLSE, error)
	// Update updates the rackLSE
	UpdateRackLSE(context.Context, *UpdateRackLSERequest) (*proto1.RackLSE, error)
	// Get retrieves the details of the rackLSE
	GetRackLSE(context.Context, *GetRackLSERequest) (*proto1.RackLSE, error)
	// List gets all the rackLSEs
	ListRackLSEs(context.Context, *ListRackLSEsRequest) (*ListRackLSEsResponse, error)
	// Delete delete the rackLSE
	DeleteRackLSE(context.Context, *DeleteRackLSERequest) (*empty.Empty, error)
	// CreateNic creates a new nic
	CreateNic(context.Context, *CreateNicRequest) (*proto1.Nic, error)
	// Update updates the nic
	UpdateNic(context.Context, *UpdateNicRequest) (*proto1.Nic, error)
	// Get retrieves the details of the nic
	GetNic(context.Context, *GetNicRequest) (*proto1.Nic, error)
	// List gets all the nics
	ListNics(context.Context, *ListNicsRequest) (*ListNicsResponse, error)
	// Delete delete the nic
	DeleteNic(context.Context, *DeleteNicRequest) (*empty.Empty, error)
	// ImportNics imports nics info.
	ImportNics(context.Context, *ImportNicsRequest) (*status.Status, error)
	// ImportDatacenters imports datacenter & its related info, including kvm & switch.
	ImportDatacenters(context.Context, *ImportDatacentersRequest) (*status.Status, error)
	// CreateKVM creates a new KVM
	CreateKVM(context.Context, *CreateKVMRequest) (*proto1.KVM, error)
	// Update updates the KVM
	UpdateKVM(context.Context, *UpdateKVMRequest) (*proto1.KVM, error)
	// Get retrieves the details of the KVM
	GetKVM(context.Context, *GetKVMRequest) (*proto1.KVM, error)
	// List gets all the KVMs
	ListKVMs(context.Context, *ListKVMsRequest) (*ListKVMsResponse, error)
	// Delete delete the KVM
	DeleteKVM(context.Context, *DeleteKVMRequest) (*empty.Empty, error)
	// CreateRPM creates a new RPM
	CreateRPM(context.Context, *CreateRPMRequest) (*proto1.RPM, error)
	// Update updates the RPM
	UpdateRPM(context.Context, *UpdateRPMRequest) (*proto1.RPM, error)
	// Get retrieves the details of the RPM
	GetRPM(context.Context, *GetRPMRequest) (*proto1.RPM, error)
	// List gets all the RPMs
	ListRPMs(context.Context, *ListRPMsRequest) (*ListRPMsResponse, error)
	// Delete delete the RPM
	DeleteRPM(context.Context, *DeleteRPMRequest) (*empty.Empty, error)
	// CreateDrac creates a new drac
	CreateDrac(context.Context, *CreateDracRequest) (*proto1.Drac, error)
	// Update updates the drac
	UpdateDrac(context.Context, *UpdateDracRequest) (*proto1.Drac, error)
	// Get retrieves the details of the drac
	GetDrac(context.Context, *GetDracRequest) (*proto1.Drac, error)
	// List gets all the dracs
	ListDracs(context.Context, *ListDracsRequest) (*ListDracsResponse, error)
	// Delete delete the drac
	DeleteDrac(context.Context, *DeleteDracRequest) (*empty.Empty, error)
	// CreateSwitch creates a new switch
	CreateSwitch(context.Context, *CreateSwitchRequest) (*proto1.Switch, error)
	// Update updates the switch
	UpdateSwitch(context.Context, *UpdateSwitchRequest) (*proto1.Switch, error)
	// Get retrieves the details of the switch
	GetSwitch(context.Context, *GetSwitchRequest) (*proto1.Switch, error)
	// List gets all the switches
	ListSwitches(context.Context, *ListSwitchesRequest) (*ListSwitchesResponse, error)
	// Delete delete the switch
	DeleteSwitch(context.Context, *DeleteSwitchRequest) (*empty.Empty, error)
	// CreateVlan creates a new vlan
	CreateVlan(context.Context, *CreateVlanRequest) (*proto1.Vlan, error)
	// Update updates the vlan
	UpdateVlan(context.Context, *UpdateVlanRequest) (*proto1.Vlan, error)
	// Get retrieves the details of the vlan
	GetVlan(context.Context, *GetVlanRequest) (*proto1.Vlan, error)
	// List gets all the vlans
	ListVlans(context.Context, *ListVlansRequest) (*ListVlansResponse, error)
	// Delete delete the vlan
	DeleteVlan(context.Context, *DeleteVlanRequest) (*empty.Empty, error)
	// ImportVlans imports vlans & all IP-related infos.
	ImportVlans(context.Context, *ImportVlansRequest) (*status.Status, error)
	// ImportStates imports states of all objects.
	ImportStates(context.Context, *ImportStatesRequest) (*status.Status, error)
}

// UnimplementedFleetServer can be embedded to have forward compatible implementations.
type UnimplementedFleetServer struct {
}

func (*UnimplementedFleetServer) CreateChromePlatform(ctx context.Context, req *CreateChromePlatformRequest) (*proto1.ChromePlatform, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method CreateChromePlatform not implemented")
}
func (*UnimplementedFleetServer) UpdateChromePlatform(ctx context.Context, req *UpdateChromePlatformRequest) (*proto1.ChromePlatform, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method UpdateChromePlatform not implemented")
}
func (*UnimplementedFleetServer) GetChromePlatform(ctx context.Context, req *GetChromePlatformRequest) (*proto1.ChromePlatform, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method GetChromePlatform not implemented")
}
func (*UnimplementedFleetServer) ListChromePlatforms(ctx context.Context, req *ListChromePlatformsRequest) (*ListChromePlatformsResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method ListChromePlatforms not implemented")
}
func (*UnimplementedFleetServer) DeleteChromePlatform(ctx context.Context, req *DeleteChromePlatformRequest) (*empty.Empty, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method DeleteChromePlatform not implemented")
}
func (*UnimplementedFleetServer) ImportChromePlatforms(ctx context.Context, req *ImportChromePlatformsRequest) (*status.Status, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method ImportChromePlatforms not implemented")
}
func (*UnimplementedFleetServer) CreateMachineLSEPrototype(ctx context.Context, req *CreateMachineLSEPrototypeRequest) (*proto1.MachineLSEPrototype, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method CreateMachineLSEPrototype not implemented")
}
func (*UnimplementedFleetServer) UpdateMachineLSEPrototype(ctx context.Context, req *UpdateMachineLSEPrototypeRequest) (*proto1.MachineLSEPrototype, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method UpdateMachineLSEPrototype not implemented")
}
func (*UnimplementedFleetServer) GetMachineLSEPrototype(ctx context.Context, req *GetMachineLSEPrototypeRequest) (*proto1.MachineLSEPrototype, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method GetMachineLSEPrototype not implemented")
}
func (*UnimplementedFleetServer) ListMachineLSEPrototypes(ctx context.Context, req *ListMachineLSEPrototypesRequest) (*ListMachineLSEPrototypesResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method ListMachineLSEPrototypes not implemented")
}
func (*UnimplementedFleetServer) DeleteMachineLSEPrototype(ctx context.Context, req *DeleteMachineLSEPrototypeRequest) (*empty.Empty, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method DeleteMachineLSEPrototype not implemented")
}
func (*UnimplementedFleetServer) CreateRackLSEPrototype(ctx context.Context, req *CreateRackLSEPrototypeRequest) (*proto1.RackLSEPrototype, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method CreateRackLSEPrototype not implemented")
}
func (*UnimplementedFleetServer) UpdateRackLSEPrototype(ctx context.Context, req *UpdateRackLSEPrototypeRequest) (*proto1.RackLSEPrototype, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method UpdateRackLSEPrototype not implemented")
}
func (*UnimplementedFleetServer) GetRackLSEPrototype(ctx context.Context, req *GetRackLSEPrototypeRequest) (*proto1.RackLSEPrototype, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method GetRackLSEPrototype not implemented")
}
func (*UnimplementedFleetServer) ListRackLSEPrototypes(ctx context.Context, req *ListRackLSEPrototypesRequest) (*ListRackLSEPrototypesResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method ListRackLSEPrototypes not implemented")
}
func (*UnimplementedFleetServer) DeleteRackLSEPrototype(ctx context.Context, req *DeleteRackLSEPrototypeRequest) (*empty.Empty, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method DeleteRackLSEPrototype not implemented")
}
func (*UnimplementedFleetServer) CreateMachine(ctx context.Context, req *CreateMachineRequest) (*proto1.Machine, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method CreateMachine not implemented")
}
func (*UnimplementedFleetServer) UpdateMachine(ctx context.Context, req *UpdateMachineRequest) (*proto1.Machine, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method UpdateMachine not implemented")
}
func (*UnimplementedFleetServer) GetMachine(ctx context.Context, req *GetMachineRequest) (*proto1.Machine, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method GetMachine not implemented")
}
func (*UnimplementedFleetServer) ListMachines(ctx context.Context, req *ListMachinesRequest) (*ListMachinesResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method ListMachines not implemented")
}
func (*UnimplementedFleetServer) DeleteMachine(ctx context.Context, req *DeleteMachineRequest) (*empty.Empty, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method DeleteMachine not implemented")
}
func (*UnimplementedFleetServer) ImportMachines(ctx context.Context, req *ImportMachinesRequest) (*status.Status, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method ImportMachines not implemented")
}
func (*UnimplementedFleetServer) CreateRack(ctx context.Context, req *CreateRackRequest) (*proto1.Rack, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method CreateRack not implemented")
}
func (*UnimplementedFleetServer) UpdateRack(ctx context.Context, req *UpdateRackRequest) (*proto1.Rack, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method UpdateRack not implemented")
}
func (*UnimplementedFleetServer) GetRack(ctx context.Context, req *GetRackRequest) (*proto1.Rack, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method GetRack not implemented")
}
func (*UnimplementedFleetServer) ListRacks(ctx context.Context, req *ListRacksRequest) (*ListRacksResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method ListRacks not implemented")
}
func (*UnimplementedFleetServer) DeleteRack(ctx context.Context, req *DeleteRackRequest) (*empty.Empty, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method DeleteRack not implemented")
}
func (*UnimplementedFleetServer) CreateMachineLSE(ctx context.Context, req *CreateMachineLSERequest) (*proto1.MachineLSE, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method CreateMachineLSE not implemented")
}
func (*UnimplementedFleetServer) UpdateMachineLSE(ctx context.Context, req *UpdateMachineLSERequest) (*proto1.MachineLSE, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method UpdateMachineLSE not implemented")
}
func (*UnimplementedFleetServer) GetMachineLSE(ctx context.Context, req *GetMachineLSERequest) (*proto1.MachineLSE, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method GetMachineLSE not implemented")
}
func (*UnimplementedFleetServer) ListMachineLSEs(ctx context.Context, req *ListMachineLSEsRequest) (*ListMachineLSEsResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method ListMachineLSEs not implemented")
}
func (*UnimplementedFleetServer) DeleteMachineLSE(ctx context.Context, req *DeleteMachineLSERequest) (*empty.Empty, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method DeleteMachineLSE not implemented")
}
func (*UnimplementedFleetServer) ImportMachineLSEs(ctx context.Context, req *ImportMachineLSEsRequest) (*status.Status, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method ImportMachineLSEs not implemented")
}
func (*UnimplementedFleetServer) CreateRackLSE(ctx context.Context, req *CreateRackLSERequest) (*proto1.RackLSE, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method CreateRackLSE not implemented")
}
func (*UnimplementedFleetServer) UpdateRackLSE(ctx context.Context, req *UpdateRackLSERequest) (*proto1.RackLSE, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method UpdateRackLSE not implemented")
}
func (*UnimplementedFleetServer) GetRackLSE(ctx context.Context, req *GetRackLSERequest) (*proto1.RackLSE, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method GetRackLSE not implemented")
}
func (*UnimplementedFleetServer) ListRackLSEs(ctx context.Context, req *ListRackLSEsRequest) (*ListRackLSEsResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method ListRackLSEs not implemented")
}
func (*UnimplementedFleetServer) DeleteRackLSE(ctx context.Context, req *DeleteRackLSERequest) (*empty.Empty, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method DeleteRackLSE not implemented")
}
func (*UnimplementedFleetServer) CreateNic(ctx context.Context, req *CreateNicRequest) (*proto1.Nic, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method CreateNic not implemented")
}
func (*UnimplementedFleetServer) UpdateNic(ctx context.Context, req *UpdateNicRequest) (*proto1.Nic, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method UpdateNic not implemented")
}
func (*UnimplementedFleetServer) GetNic(ctx context.Context, req *GetNicRequest) (*proto1.Nic, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method GetNic not implemented")
}
func (*UnimplementedFleetServer) ListNics(ctx context.Context, req *ListNicsRequest) (*ListNicsResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method ListNics not implemented")
}
func (*UnimplementedFleetServer) DeleteNic(ctx context.Context, req *DeleteNicRequest) (*empty.Empty, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method DeleteNic not implemented")
}
func (*UnimplementedFleetServer) ImportNics(ctx context.Context, req *ImportNicsRequest) (*status.Status, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method ImportNics not implemented")
}
func (*UnimplementedFleetServer) ImportDatacenters(ctx context.Context, req *ImportDatacentersRequest) (*status.Status, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method ImportDatacenters not implemented")
}
func (*UnimplementedFleetServer) CreateKVM(ctx context.Context, req *CreateKVMRequest) (*proto1.KVM, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method CreateKVM not implemented")
}
func (*UnimplementedFleetServer) UpdateKVM(ctx context.Context, req *UpdateKVMRequest) (*proto1.KVM, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method UpdateKVM not implemented")
}
func (*UnimplementedFleetServer) GetKVM(ctx context.Context, req *GetKVMRequest) (*proto1.KVM, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method GetKVM not implemented")
}
func (*UnimplementedFleetServer) ListKVMs(ctx context.Context, req *ListKVMsRequest) (*ListKVMsResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method ListKVMs not implemented")
}
func (*UnimplementedFleetServer) DeleteKVM(ctx context.Context, req *DeleteKVMRequest) (*empty.Empty, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method DeleteKVM not implemented")
}
func (*UnimplementedFleetServer) CreateRPM(ctx context.Context, req *CreateRPMRequest) (*proto1.RPM, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method CreateRPM not implemented")
}
func (*UnimplementedFleetServer) UpdateRPM(ctx context.Context, req *UpdateRPMRequest) (*proto1.RPM, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method UpdateRPM not implemented")
}
func (*UnimplementedFleetServer) GetRPM(ctx context.Context, req *GetRPMRequest) (*proto1.RPM, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method GetRPM not implemented")
}
func (*UnimplementedFleetServer) ListRPMs(ctx context.Context, req *ListRPMsRequest) (*ListRPMsResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method ListRPMs not implemented")
}
func (*UnimplementedFleetServer) DeleteRPM(ctx context.Context, req *DeleteRPMRequest) (*empty.Empty, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method DeleteRPM not implemented")
}
func (*UnimplementedFleetServer) CreateDrac(ctx context.Context, req *CreateDracRequest) (*proto1.Drac, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method CreateDrac not implemented")
}
func (*UnimplementedFleetServer) UpdateDrac(ctx context.Context, req *UpdateDracRequest) (*proto1.Drac, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method UpdateDrac not implemented")
}
func (*UnimplementedFleetServer) GetDrac(ctx context.Context, req *GetDracRequest) (*proto1.Drac, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method GetDrac not implemented")
}
func (*UnimplementedFleetServer) ListDracs(ctx context.Context, req *ListDracsRequest) (*ListDracsResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method ListDracs not implemented")
}
func (*UnimplementedFleetServer) DeleteDrac(ctx context.Context, req *DeleteDracRequest) (*empty.Empty, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method DeleteDrac not implemented")
}
func (*UnimplementedFleetServer) CreateSwitch(ctx context.Context, req *CreateSwitchRequest) (*proto1.Switch, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method CreateSwitch not implemented")
}
func (*UnimplementedFleetServer) UpdateSwitch(ctx context.Context, req *UpdateSwitchRequest) (*proto1.Switch, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method UpdateSwitch not implemented")
}
func (*UnimplementedFleetServer) GetSwitch(ctx context.Context, req *GetSwitchRequest) (*proto1.Switch, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method GetSwitch not implemented")
}
func (*UnimplementedFleetServer) ListSwitches(ctx context.Context, req *ListSwitchesRequest) (*ListSwitchesResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method ListSwitches not implemented")
}
func (*UnimplementedFleetServer) DeleteSwitch(ctx context.Context, req *DeleteSwitchRequest) (*empty.Empty, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method DeleteSwitch not implemented")
}
func (*UnimplementedFleetServer) CreateVlan(ctx context.Context, req *CreateVlanRequest) (*proto1.Vlan, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method CreateVlan not implemented")
}
func (*UnimplementedFleetServer) UpdateVlan(ctx context.Context, req *UpdateVlanRequest) (*proto1.Vlan, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method UpdateVlan not implemented")
}
func (*UnimplementedFleetServer) GetVlan(ctx context.Context, req *GetVlanRequest) (*proto1.Vlan, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method GetVlan not implemented")
}
func (*UnimplementedFleetServer) ListVlans(ctx context.Context, req *ListVlansRequest) (*ListVlansResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method ListVlans not implemented")
}
func (*UnimplementedFleetServer) DeleteVlan(ctx context.Context, req *DeleteVlanRequest) (*empty.Empty, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method DeleteVlan not implemented")
}
func (*UnimplementedFleetServer) ImportVlans(ctx context.Context, req *ImportVlansRequest) (*status.Status, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method ImportVlans not implemented")
}
func (*UnimplementedFleetServer) ImportStates(ctx context.Context, req *ImportStatesRequest) (*status.Status, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method ImportStates not implemented")
}

func RegisterFleetServer(s prpc.Registrar, srv FleetServer) {
	s.RegisterService(&_Fleet_serviceDesc, srv)
}

func _Fleet_CreateChromePlatform_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateChromePlatformRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FleetServer).CreateChromePlatform(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/unifiedfleet.api.v1.rpc.Fleet/CreateChromePlatform",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FleetServer).CreateChromePlatform(ctx, req.(*CreateChromePlatformRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Fleet_UpdateChromePlatform_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateChromePlatformRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FleetServer).UpdateChromePlatform(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/unifiedfleet.api.v1.rpc.Fleet/UpdateChromePlatform",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FleetServer).UpdateChromePlatform(ctx, req.(*UpdateChromePlatformRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Fleet_GetChromePlatform_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetChromePlatformRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FleetServer).GetChromePlatform(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/unifiedfleet.api.v1.rpc.Fleet/GetChromePlatform",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FleetServer).GetChromePlatform(ctx, req.(*GetChromePlatformRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Fleet_ListChromePlatforms_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListChromePlatformsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FleetServer).ListChromePlatforms(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/unifiedfleet.api.v1.rpc.Fleet/ListChromePlatforms",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FleetServer).ListChromePlatforms(ctx, req.(*ListChromePlatformsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Fleet_DeleteChromePlatform_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteChromePlatformRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FleetServer).DeleteChromePlatform(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/unifiedfleet.api.v1.rpc.Fleet/DeleteChromePlatform",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FleetServer).DeleteChromePlatform(ctx, req.(*DeleteChromePlatformRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Fleet_ImportChromePlatforms_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ImportChromePlatformsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FleetServer).ImportChromePlatforms(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/unifiedfleet.api.v1.rpc.Fleet/ImportChromePlatforms",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FleetServer).ImportChromePlatforms(ctx, req.(*ImportChromePlatformsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Fleet_CreateMachineLSEPrototype_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateMachineLSEPrototypeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FleetServer).CreateMachineLSEPrototype(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/unifiedfleet.api.v1.rpc.Fleet/CreateMachineLSEPrototype",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FleetServer).CreateMachineLSEPrototype(ctx, req.(*CreateMachineLSEPrototypeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Fleet_UpdateMachineLSEPrototype_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateMachineLSEPrototypeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FleetServer).UpdateMachineLSEPrototype(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/unifiedfleet.api.v1.rpc.Fleet/UpdateMachineLSEPrototype",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FleetServer).UpdateMachineLSEPrototype(ctx, req.(*UpdateMachineLSEPrototypeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Fleet_GetMachineLSEPrototype_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMachineLSEPrototypeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FleetServer).GetMachineLSEPrototype(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/unifiedfleet.api.v1.rpc.Fleet/GetMachineLSEPrototype",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FleetServer).GetMachineLSEPrototype(ctx, req.(*GetMachineLSEPrototypeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Fleet_ListMachineLSEPrototypes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListMachineLSEPrototypesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FleetServer).ListMachineLSEPrototypes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/unifiedfleet.api.v1.rpc.Fleet/ListMachineLSEPrototypes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FleetServer).ListMachineLSEPrototypes(ctx, req.(*ListMachineLSEPrototypesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Fleet_DeleteMachineLSEPrototype_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteMachineLSEPrototypeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FleetServer).DeleteMachineLSEPrototype(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/unifiedfleet.api.v1.rpc.Fleet/DeleteMachineLSEPrototype",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FleetServer).DeleteMachineLSEPrototype(ctx, req.(*DeleteMachineLSEPrototypeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Fleet_CreateRackLSEPrototype_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRackLSEPrototypeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FleetServer).CreateRackLSEPrototype(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/unifiedfleet.api.v1.rpc.Fleet/CreateRackLSEPrototype",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FleetServer).CreateRackLSEPrototype(ctx, req.(*CreateRackLSEPrototypeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Fleet_UpdateRackLSEPrototype_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRackLSEPrototypeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FleetServer).UpdateRackLSEPrototype(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/unifiedfleet.api.v1.rpc.Fleet/UpdateRackLSEPrototype",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FleetServer).UpdateRackLSEPrototype(ctx, req.(*UpdateRackLSEPrototypeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Fleet_GetRackLSEPrototype_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRackLSEPrototypeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FleetServer).GetRackLSEPrototype(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/unifiedfleet.api.v1.rpc.Fleet/GetRackLSEPrototype",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FleetServer).GetRackLSEPrototype(ctx, req.(*GetRackLSEPrototypeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Fleet_ListRackLSEPrototypes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRackLSEPrototypesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FleetServer).ListRackLSEPrototypes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/unifiedfleet.api.v1.rpc.Fleet/ListRackLSEPrototypes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FleetServer).ListRackLSEPrototypes(ctx, req.(*ListRackLSEPrototypesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Fleet_DeleteRackLSEPrototype_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRackLSEPrototypeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FleetServer).DeleteRackLSEPrototype(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/unifiedfleet.api.v1.rpc.Fleet/DeleteRackLSEPrototype",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FleetServer).DeleteRackLSEPrototype(ctx, req.(*DeleteRackLSEPrototypeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Fleet_CreateMachine_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateMachineRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FleetServer).CreateMachine(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/unifiedfleet.api.v1.rpc.Fleet/CreateMachine",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FleetServer).CreateMachine(ctx, req.(*CreateMachineRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Fleet_UpdateMachine_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateMachineRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FleetServer).UpdateMachine(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/unifiedfleet.api.v1.rpc.Fleet/UpdateMachine",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FleetServer).UpdateMachine(ctx, req.(*UpdateMachineRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Fleet_GetMachine_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMachineRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FleetServer).GetMachine(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/unifiedfleet.api.v1.rpc.Fleet/GetMachine",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FleetServer).GetMachine(ctx, req.(*GetMachineRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Fleet_ListMachines_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListMachinesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FleetServer).ListMachines(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/unifiedfleet.api.v1.rpc.Fleet/ListMachines",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FleetServer).ListMachines(ctx, req.(*ListMachinesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Fleet_DeleteMachine_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteMachineRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FleetServer).DeleteMachine(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/unifiedfleet.api.v1.rpc.Fleet/DeleteMachine",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FleetServer).DeleteMachine(ctx, req.(*DeleteMachineRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Fleet_ImportMachines_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ImportMachinesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FleetServer).ImportMachines(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/unifiedfleet.api.v1.rpc.Fleet/ImportMachines",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FleetServer).ImportMachines(ctx, req.(*ImportMachinesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Fleet_CreateRack_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRackRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FleetServer).CreateRack(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/unifiedfleet.api.v1.rpc.Fleet/CreateRack",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FleetServer).CreateRack(ctx, req.(*CreateRackRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Fleet_UpdateRack_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRackRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FleetServer).UpdateRack(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/unifiedfleet.api.v1.rpc.Fleet/UpdateRack",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FleetServer).UpdateRack(ctx, req.(*UpdateRackRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Fleet_GetRack_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRackRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FleetServer).GetRack(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/unifiedfleet.api.v1.rpc.Fleet/GetRack",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FleetServer).GetRack(ctx, req.(*GetRackRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Fleet_ListRacks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRacksRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FleetServer).ListRacks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/unifiedfleet.api.v1.rpc.Fleet/ListRacks",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FleetServer).ListRacks(ctx, req.(*ListRacksRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Fleet_DeleteRack_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRackRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FleetServer).DeleteRack(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/unifiedfleet.api.v1.rpc.Fleet/DeleteRack",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FleetServer).DeleteRack(ctx, req.(*DeleteRackRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Fleet_CreateMachineLSE_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateMachineLSERequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FleetServer).CreateMachineLSE(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/unifiedfleet.api.v1.rpc.Fleet/CreateMachineLSE",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FleetServer).CreateMachineLSE(ctx, req.(*CreateMachineLSERequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Fleet_UpdateMachineLSE_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateMachineLSERequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FleetServer).UpdateMachineLSE(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/unifiedfleet.api.v1.rpc.Fleet/UpdateMachineLSE",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FleetServer).UpdateMachineLSE(ctx, req.(*UpdateMachineLSERequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Fleet_GetMachineLSE_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMachineLSERequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FleetServer).GetMachineLSE(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/unifiedfleet.api.v1.rpc.Fleet/GetMachineLSE",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FleetServer).GetMachineLSE(ctx, req.(*GetMachineLSERequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Fleet_ListMachineLSEs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListMachineLSEsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FleetServer).ListMachineLSEs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/unifiedfleet.api.v1.rpc.Fleet/ListMachineLSEs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FleetServer).ListMachineLSEs(ctx, req.(*ListMachineLSEsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Fleet_DeleteMachineLSE_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteMachineLSERequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FleetServer).DeleteMachineLSE(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/unifiedfleet.api.v1.rpc.Fleet/DeleteMachineLSE",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FleetServer).DeleteMachineLSE(ctx, req.(*DeleteMachineLSERequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Fleet_ImportMachineLSEs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ImportMachineLSEsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FleetServer).ImportMachineLSEs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/unifiedfleet.api.v1.rpc.Fleet/ImportMachineLSEs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FleetServer).ImportMachineLSEs(ctx, req.(*ImportMachineLSEsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Fleet_CreateRackLSE_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRackLSERequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FleetServer).CreateRackLSE(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/unifiedfleet.api.v1.rpc.Fleet/CreateRackLSE",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FleetServer).CreateRackLSE(ctx, req.(*CreateRackLSERequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Fleet_UpdateRackLSE_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRackLSERequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FleetServer).UpdateRackLSE(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/unifiedfleet.api.v1.rpc.Fleet/UpdateRackLSE",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FleetServer).UpdateRackLSE(ctx, req.(*UpdateRackLSERequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Fleet_GetRackLSE_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRackLSERequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FleetServer).GetRackLSE(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/unifiedfleet.api.v1.rpc.Fleet/GetRackLSE",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FleetServer).GetRackLSE(ctx, req.(*GetRackLSERequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Fleet_ListRackLSEs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRackLSEsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FleetServer).ListRackLSEs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/unifiedfleet.api.v1.rpc.Fleet/ListRackLSEs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FleetServer).ListRackLSEs(ctx, req.(*ListRackLSEsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Fleet_DeleteRackLSE_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRackLSERequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FleetServer).DeleteRackLSE(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/unifiedfleet.api.v1.rpc.Fleet/DeleteRackLSE",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FleetServer).DeleteRackLSE(ctx, req.(*DeleteRackLSERequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Fleet_CreateNic_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateNicRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FleetServer).CreateNic(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/unifiedfleet.api.v1.rpc.Fleet/CreateNic",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FleetServer).CreateNic(ctx, req.(*CreateNicRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Fleet_UpdateNic_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateNicRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FleetServer).UpdateNic(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/unifiedfleet.api.v1.rpc.Fleet/UpdateNic",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FleetServer).UpdateNic(ctx, req.(*UpdateNicRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Fleet_GetNic_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNicRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FleetServer).GetNic(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/unifiedfleet.api.v1.rpc.Fleet/GetNic",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FleetServer).GetNic(ctx, req.(*GetNicRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Fleet_ListNics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListNicsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FleetServer).ListNics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/unifiedfleet.api.v1.rpc.Fleet/ListNics",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FleetServer).ListNics(ctx, req.(*ListNicsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Fleet_DeleteNic_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteNicRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FleetServer).DeleteNic(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/unifiedfleet.api.v1.rpc.Fleet/DeleteNic",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FleetServer).DeleteNic(ctx, req.(*DeleteNicRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Fleet_ImportNics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ImportNicsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FleetServer).ImportNics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/unifiedfleet.api.v1.rpc.Fleet/ImportNics",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FleetServer).ImportNics(ctx, req.(*ImportNicsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Fleet_ImportDatacenters_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ImportDatacentersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FleetServer).ImportDatacenters(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/unifiedfleet.api.v1.rpc.Fleet/ImportDatacenters",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FleetServer).ImportDatacenters(ctx, req.(*ImportDatacentersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Fleet_CreateKVM_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateKVMRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FleetServer).CreateKVM(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/unifiedfleet.api.v1.rpc.Fleet/CreateKVM",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FleetServer).CreateKVM(ctx, req.(*CreateKVMRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Fleet_UpdateKVM_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateKVMRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FleetServer).UpdateKVM(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/unifiedfleet.api.v1.rpc.Fleet/UpdateKVM",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FleetServer).UpdateKVM(ctx, req.(*UpdateKVMRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Fleet_GetKVM_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetKVMRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FleetServer).GetKVM(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/unifiedfleet.api.v1.rpc.Fleet/GetKVM",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FleetServer).GetKVM(ctx, req.(*GetKVMRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Fleet_ListKVMs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListKVMsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FleetServer).ListKVMs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/unifiedfleet.api.v1.rpc.Fleet/ListKVMs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FleetServer).ListKVMs(ctx, req.(*ListKVMsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Fleet_DeleteKVM_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteKVMRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FleetServer).DeleteKVM(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/unifiedfleet.api.v1.rpc.Fleet/DeleteKVM",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FleetServer).DeleteKVM(ctx, req.(*DeleteKVMRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Fleet_CreateRPM_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRPMRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FleetServer).CreateRPM(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/unifiedfleet.api.v1.rpc.Fleet/CreateRPM",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FleetServer).CreateRPM(ctx, req.(*CreateRPMRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Fleet_UpdateRPM_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRPMRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FleetServer).UpdateRPM(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/unifiedfleet.api.v1.rpc.Fleet/UpdateRPM",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FleetServer).UpdateRPM(ctx, req.(*UpdateRPMRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Fleet_GetRPM_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRPMRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FleetServer).GetRPM(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/unifiedfleet.api.v1.rpc.Fleet/GetRPM",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FleetServer).GetRPM(ctx, req.(*GetRPMRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Fleet_ListRPMs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRPMsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FleetServer).ListRPMs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/unifiedfleet.api.v1.rpc.Fleet/ListRPMs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FleetServer).ListRPMs(ctx, req.(*ListRPMsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Fleet_DeleteRPM_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRPMRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FleetServer).DeleteRPM(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/unifiedfleet.api.v1.rpc.Fleet/DeleteRPM",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FleetServer).DeleteRPM(ctx, req.(*DeleteRPMRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Fleet_CreateDrac_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateDracRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FleetServer).CreateDrac(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/unifiedfleet.api.v1.rpc.Fleet/CreateDrac",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FleetServer).CreateDrac(ctx, req.(*CreateDracRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Fleet_UpdateDrac_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateDracRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FleetServer).UpdateDrac(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/unifiedfleet.api.v1.rpc.Fleet/UpdateDrac",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FleetServer).UpdateDrac(ctx, req.(*UpdateDracRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Fleet_GetDrac_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDracRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FleetServer).GetDrac(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/unifiedfleet.api.v1.rpc.Fleet/GetDrac",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FleetServer).GetDrac(ctx, req.(*GetDracRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Fleet_ListDracs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListDracsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FleetServer).ListDracs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/unifiedfleet.api.v1.rpc.Fleet/ListDracs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FleetServer).ListDracs(ctx, req.(*ListDracsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Fleet_DeleteDrac_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteDracRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FleetServer).DeleteDrac(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/unifiedfleet.api.v1.rpc.Fleet/DeleteDrac",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FleetServer).DeleteDrac(ctx, req.(*DeleteDracRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Fleet_CreateSwitch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSwitchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FleetServer).CreateSwitch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/unifiedfleet.api.v1.rpc.Fleet/CreateSwitch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FleetServer).CreateSwitch(ctx, req.(*CreateSwitchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Fleet_UpdateSwitch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateSwitchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FleetServer).UpdateSwitch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/unifiedfleet.api.v1.rpc.Fleet/UpdateSwitch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FleetServer).UpdateSwitch(ctx, req.(*UpdateSwitchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Fleet_GetSwitch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSwitchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FleetServer).GetSwitch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/unifiedfleet.api.v1.rpc.Fleet/GetSwitch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FleetServer).GetSwitch(ctx, req.(*GetSwitchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Fleet_ListSwitches_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListSwitchesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FleetServer).ListSwitches(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/unifiedfleet.api.v1.rpc.Fleet/ListSwitches",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FleetServer).ListSwitches(ctx, req.(*ListSwitchesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Fleet_DeleteSwitch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteSwitchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FleetServer).DeleteSwitch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/unifiedfleet.api.v1.rpc.Fleet/DeleteSwitch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FleetServer).DeleteSwitch(ctx, req.(*DeleteSwitchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Fleet_CreateVlan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateVlanRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FleetServer).CreateVlan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/unifiedfleet.api.v1.rpc.Fleet/CreateVlan",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FleetServer).CreateVlan(ctx, req.(*CreateVlanRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Fleet_UpdateVlan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateVlanRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FleetServer).UpdateVlan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/unifiedfleet.api.v1.rpc.Fleet/UpdateVlan",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FleetServer).UpdateVlan(ctx, req.(*UpdateVlanRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Fleet_GetVlan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetVlanRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FleetServer).GetVlan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/unifiedfleet.api.v1.rpc.Fleet/GetVlan",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FleetServer).GetVlan(ctx, req.(*GetVlanRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Fleet_ListVlans_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListVlansRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FleetServer).ListVlans(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/unifiedfleet.api.v1.rpc.Fleet/ListVlans",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FleetServer).ListVlans(ctx, req.(*ListVlansRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Fleet_DeleteVlan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteVlanRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FleetServer).DeleteVlan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/unifiedfleet.api.v1.rpc.Fleet/DeleteVlan",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FleetServer).DeleteVlan(ctx, req.(*DeleteVlanRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Fleet_ImportVlans_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ImportVlansRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FleetServer).ImportVlans(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/unifiedfleet.api.v1.rpc.Fleet/ImportVlans",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FleetServer).ImportVlans(ctx, req.(*ImportVlansRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Fleet_ImportStates_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ImportStatesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FleetServer).ImportStates(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/unifiedfleet.api.v1.rpc.Fleet/ImportStates",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FleetServer).ImportStates(ctx, req.(*ImportStatesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Fleet_serviceDesc = grpc.ServiceDesc{
	ServiceName: "unifiedfleet.api.v1.rpc.Fleet",
	HandlerType: (*FleetServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateChromePlatform",
			Handler:    _Fleet_CreateChromePlatform_Handler,
		},
		{
			MethodName: "UpdateChromePlatform",
			Handler:    _Fleet_UpdateChromePlatform_Handler,
		},
		{
			MethodName: "GetChromePlatform",
			Handler:    _Fleet_GetChromePlatform_Handler,
		},
		{
			MethodName: "ListChromePlatforms",
			Handler:    _Fleet_ListChromePlatforms_Handler,
		},
		{
			MethodName: "DeleteChromePlatform",
			Handler:    _Fleet_DeleteChromePlatform_Handler,
		},
		{
			MethodName: "ImportChromePlatforms",
			Handler:    _Fleet_ImportChromePlatforms_Handler,
		},
		{
			MethodName: "CreateMachineLSEPrototype",
			Handler:    _Fleet_CreateMachineLSEPrototype_Handler,
		},
		{
			MethodName: "UpdateMachineLSEPrototype",
			Handler:    _Fleet_UpdateMachineLSEPrototype_Handler,
		},
		{
			MethodName: "GetMachineLSEPrototype",
			Handler:    _Fleet_GetMachineLSEPrototype_Handler,
		},
		{
			MethodName: "ListMachineLSEPrototypes",
			Handler:    _Fleet_ListMachineLSEPrototypes_Handler,
		},
		{
			MethodName: "DeleteMachineLSEPrototype",
			Handler:    _Fleet_DeleteMachineLSEPrototype_Handler,
		},
		{
			MethodName: "CreateRackLSEPrototype",
			Handler:    _Fleet_CreateRackLSEPrototype_Handler,
		},
		{
			MethodName: "UpdateRackLSEPrototype",
			Handler:    _Fleet_UpdateRackLSEPrototype_Handler,
		},
		{
			MethodName: "GetRackLSEPrototype",
			Handler:    _Fleet_GetRackLSEPrototype_Handler,
		},
		{
			MethodName: "ListRackLSEPrototypes",
			Handler:    _Fleet_ListRackLSEPrototypes_Handler,
		},
		{
			MethodName: "DeleteRackLSEPrototype",
			Handler:    _Fleet_DeleteRackLSEPrototype_Handler,
		},
		{
			MethodName: "CreateMachine",
			Handler:    _Fleet_CreateMachine_Handler,
		},
		{
			MethodName: "UpdateMachine",
			Handler:    _Fleet_UpdateMachine_Handler,
		},
		{
			MethodName: "GetMachine",
			Handler:    _Fleet_GetMachine_Handler,
		},
		{
			MethodName: "ListMachines",
			Handler:    _Fleet_ListMachines_Handler,
		},
		{
			MethodName: "DeleteMachine",
			Handler:    _Fleet_DeleteMachine_Handler,
		},
		{
			MethodName: "ImportMachines",
			Handler:    _Fleet_ImportMachines_Handler,
		},
		{
			MethodName: "CreateRack",
			Handler:    _Fleet_CreateRack_Handler,
		},
		{
			MethodName: "UpdateRack",
			Handler:    _Fleet_UpdateRack_Handler,
		},
		{
			MethodName: "GetRack",
			Handler:    _Fleet_GetRack_Handler,
		},
		{
			MethodName: "ListRacks",
			Handler:    _Fleet_ListRacks_Handler,
		},
		{
			MethodName: "DeleteRack",
			Handler:    _Fleet_DeleteRack_Handler,
		},
		{
			MethodName: "CreateMachineLSE",
			Handler:    _Fleet_CreateMachineLSE_Handler,
		},
		{
			MethodName: "UpdateMachineLSE",
			Handler:    _Fleet_UpdateMachineLSE_Handler,
		},
		{
			MethodName: "GetMachineLSE",
			Handler:    _Fleet_GetMachineLSE_Handler,
		},
		{
			MethodName: "ListMachineLSEs",
			Handler:    _Fleet_ListMachineLSEs_Handler,
		},
		{
			MethodName: "DeleteMachineLSE",
			Handler:    _Fleet_DeleteMachineLSE_Handler,
		},
		{
			MethodName: "ImportMachineLSEs",
			Handler:    _Fleet_ImportMachineLSEs_Handler,
		},
		{
			MethodName: "CreateRackLSE",
			Handler:    _Fleet_CreateRackLSE_Handler,
		},
		{
			MethodName: "UpdateRackLSE",
			Handler:    _Fleet_UpdateRackLSE_Handler,
		},
		{
			MethodName: "GetRackLSE",
			Handler:    _Fleet_GetRackLSE_Handler,
		},
		{
			MethodName: "ListRackLSEs",
			Handler:    _Fleet_ListRackLSEs_Handler,
		},
		{
			MethodName: "DeleteRackLSE",
			Handler:    _Fleet_DeleteRackLSE_Handler,
		},
		{
			MethodName: "CreateNic",
			Handler:    _Fleet_CreateNic_Handler,
		},
		{
			MethodName: "UpdateNic",
			Handler:    _Fleet_UpdateNic_Handler,
		},
		{
			MethodName: "GetNic",
			Handler:    _Fleet_GetNic_Handler,
		},
		{
			MethodName: "ListNics",
			Handler:    _Fleet_ListNics_Handler,
		},
		{
			MethodName: "DeleteNic",
			Handler:    _Fleet_DeleteNic_Handler,
		},
		{
			MethodName: "ImportNics",
			Handler:    _Fleet_ImportNics_Handler,
		},
		{
			MethodName: "ImportDatacenters",
			Handler:    _Fleet_ImportDatacenters_Handler,
		},
		{
			MethodName: "CreateKVM",
			Handler:    _Fleet_CreateKVM_Handler,
		},
		{
			MethodName: "UpdateKVM",
			Handler:    _Fleet_UpdateKVM_Handler,
		},
		{
			MethodName: "GetKVM",
			Handler:    _Fleet_GetKVM_Handler,
		},
		{
			MethodName: "ListKVMs",
			Handler:    _Fleet_ListKVMs_Handler,
		},
		{
			MethodName: "DeleteKVM",
			Handler:    _Fleet_DeleteKVM_Handler,
		},
		{
			MethodName: "CreateRPM",
			Handler:    _Fleet_CreateRPM_Handler,
		},
		{
			MethodName: "UpdateRPM",
			Handler:    _Fleet_UpdateRPM_Handler,
		},
		{
			MethodName: "GetRPM",
			Handler:    _Fleet_GetRPM_Handler,
		},
		{
			MethodName: "ListRPMs",
			Handler:    _Fleet_ListRPMs_Handler,
		},
		{
			MethodName: "DeleteRPM",
			Handler:    _Fleet_DeleteRPM_Handler,
		},
		{
			MethodName: "CreateDrac",
			Handler:    _Fleet_CreateDrac_Handler,
		},
		{
			MethodName: "UpdateDrac",
			Handler:    _Fleet_UpdateDrac_Handler,
		},
		{
			MethodName: "GetDrac",
			Handler:    _Fleet_GetDrac_Handler,
		},
		{
			MethodName: "ListDracs",
			Handler:    _Fleet_ListDracs_Handler,
		},
		{
			MethodName: "DeleteDrac",
			Handler:    _Fleet_DeleteDrac_Handler,
		},
		{
			MethodName: "CreateSwitch",
			Handler:    _Fleet_CreateSwitch_Handler,
		},
		{
			MethodName: "UpdateSwitch",
			Handler:    _Fleet_UpdateSwitch_Handler,
		},
		{
			MethodName: "GetSwitch",
			Handler:    _Fleet_GetSwitch_Handler,
		},
		{
			MethodName: "ListSwitches",
			Handler:    _Fleet_ListSwitches_Handler,
		},
		{
			MethodName: "DeleteSwitch",
			Handler:    _Fleet_DeleteSwitch_Handler,
		},
		{
			MethodName: "CreateVlan",
			Handler:    _Fleet_CreateVlan_Handler,
		},
		{
			MethodName: "UpdateVlan",
			Handler:    _Fleet_UpdateVlan_Handler,
		},
		{
			MethodName: "GetVlan",
			Handler:    _Fleet_GetVlan_Handler,
		},
		{
			MethodName: "ListVlans",
			Handler:    _Fleet_ListVlans_Handler,
		},
		{
			MethodName: "DeleteVlan",
			Handler:    _Fleet_DeleteVlan_Handler,
		},
		{
			MethodName: "ImportVlans",
			Handler:    _Fleet_ImportVlans_Handler,
		},
		{
			MethodName: "ImportStates",
			Handler:    _Fleet_ImportStates_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "infra/unifiedfleet/api/v1/rpc/fleet.proto",
}
