// Copyright 2020 The Chromium OS Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

syntax = "proto3";

package unifiedfleet.api.v1.rpc;

option go_package = "infra/unifiedfleet/api/v1/rpc;ufspb";

import "google/protobuf/empty.proto";
import "google/protobuf/field_mask.proto";
import "go.chromium.org/luci/grpc/proto/google/api/field_behavior.proto";
import "go.chromium.org/luci/grpc/proto/google/api/resource.proto";
import "go.chromium.org/luci/grpc/proto/google/rpc/status.proto";
import "infra/unifiedfleet/api/v1/proto/machine.proto";
import "infra/unifiedfleet/api/v1/proto/rack.proto";
import "infra/unifiedfleet/api/v1/proto/chrome_platform.proto";
import "infra/unifiedfleet/api/v1/proto/machine_lse.proto";
import "infra/unifiedfleet/api/v1/proto/rack_lse.proto";
import "infra/unifiedfleet/api/v1/proto/network.proto";
import "infra/unifiedfleet/api/v1/proto/peripherals.proto";
import "infra/unifiedfleet/api/v1/proto/lse_prototype.proto";

service Fleet {
  // CreateChromePlatform creates a new chromePlatform.
  rpc CreateChromePlatform(CreateChromePlatformRequest) returns (proto.ChromePlatform);

  // Update updates the chromePlatform
  rpc UpdateChromePlatform(UpdateChromePlatformRequest) returns (proto.ChromePlatform);

  // Get retrieves the details of the chromePlatform
  rpc GetChromePlatform(GetChromePlatformRequest) returns (proto.ChromePlatform);

  // List gets all the chromePlatforms
  rpc ListChromePlatforms(ListChromePlatformsRequest) returns (ListChromePlatformsResponse);

  // Delete delete the chromePlatform
  rpc DeleteChromePlatform(DeleteChromePlatformRequest) returns (google.protobuf.Empty);

  // ImportChromePlatforms imports chrome platforms.
  rpc ImportChromePlatforms(ImportChromePlatformsRequest) returns (google.rpc.Status);

  // CreateMachineLSEPrototype creates a new MachineLSEPrototype.
  rpc CreateMachineLSEPrototype(CreateMachineLSEPrototypeRequest) returns (proto.MachineLSEPrototype);

  // Update updates the MachineLSEPrototype
  rpc UpdateMachineLSEPrototype(UpdateMachineLSEPrototypeRequest) returns (proto.MachineLSEPrototype);

  // Get retrieves the details of the MachineLSEPrototype
  rpc GetMachineLSEPrototype(GetMachineLSEPrototypeRequest) returns (proto.MachineLSEPrototype);

  // List gets all the MachineLSEPrototypes
  rpc ListMachineLSEPrototypes(ListMachineLSEPrototypesRequest) returns (ListMachineLSEPrototypesResponse);

  // Delete delete the MachineLSEPrototype
  rpc DeleteMachineLSEPrototype(DeleteMachineLSEPrototypeRequest) returns (google.protobuf.Empty);

  // CreateRackLSEPrototype creates a new RackLSEPrototype.
  rpc CreateRackLSEPrototype(CreateRackLSEPrototypeRequest) returns (proto.RackLSEPrototype);

  // Update updates the RackLSEPrototype
  rpc UpdateRackLSEPrototype(UpdateRackLSEPrototypeRequest) returns (proto.RackLSEPrototype);

  // Get retrieves the details of the RackLSEPrototype
  rpc GetRackLSEPrototype(GetRackLSEPrototypeRequest) returns (proto.RackLSEPrototype);

  // List gets all the RackLSEPrototypes
  rpc ListRackLSEPrototypes(ListRackLSEPrototypesRequest) returns (ListRackLSEPrototypesResponse);

  // Delete delete the RackLSEPrototype
  rpc DeleteRackLSEPrototype(DeleteRackLSEPrototypeRequest) returns (google.protobuf.Empty);

  // CreateMachine creates a new machine.
  rpc CreateMachine(CreateMachineRequest) returns (proto.Machine);

  // Update updates the machine
  rpc UpdateMachine(UpdateMachineRequest) returns (proto.Machine);

  // Get retrieves the details of the machine
  rpc GetMachine(GetMachineRequest) returns (proto.Machine);

  // List gets all the machines
  rpc ListMachines(ListMachinesRequest) returns (ListMachinesResponse);

  // Delete delete the machine
  rpc DeleteMachine(DeleteMachineRequest) returns (google.protobuf.Empty);

  // Import machines from sources
  //
  // This doesn't return google.longrunning.Operation as the corresponding
  // package is not imported into chops go package.
  rpc ImportMachines(ImportMachinesRequest) returns (google.rpc.Status);

  // CreateRack creates a new rack
  rpc CreateRack(CreateRackRequest) returns (proto.Rack);

  // Update updates the rack
  rpc UpdateRack(UpdateRackRequest) returns (proto.Rack);

  // Get retrieves the details of the rack
  rpc GetRack(GetRackRequest) returns (proto.Rack);

  // List gets all the racks
  rpc ListRacks(ListRacksRequest) returns (ListRacksResponse);

  // Delete delete the rack
  rpc DeleteRack(DeleteRackRequest) returns (google.protobuf.Empty);

  // CreateMachineLSE creates a new machineLSE
  rpc CreateMachineLSE(CreateMachineLSERequest) returns (proto.MachineLSE);

  // Update updates the machineLSE
  rpc UpdateMachineLSE(UpdateMachineLSERequest) returns (proto.MachineLSE);

  // Get retrieves the details of the machineLSE
  rpc GetMachineLSE(GetMachineLSERequest) returns (proto.MachineLSE);

  // List gets all the machineLSEs
  rpc ListMachineLSEs(ListMachineLSEsRequest) returns (ListMachineLSEsResponse);

  // Delete delete the machineLSE
  rpc DeleteMachineLSE(DeleteMachineLSERequest) returns (google.protobuf.Empty);

  // ImportMachineLSEs imports machine LSEs & all related infos.
  rpc ImportMachineLSEs(ImportMachineLSEsRequest) returns (google.rpc.Status);

  // CreateRackLSE creates a new rackLSE
  rpc CreateRackLSE(CreateRackLSERequest) returns (proto.RackLSE);

  // Update updates the rackLSE
  rpc UpdateRackLSE(UpdateRackLSERequest) returns (proto.RackLSE);

  // Get retrieves the details of the rackLSE
  rpc GetRackLSE(GetRackLSERequest) returns (proto.RackLSE);

  // List gets all the rackLSEs
  rpc ListRackLSEs(ListRackLSEsRequest) returns (ListRackLSEsResponse);

  // Delete delete the rackLSE
  rpc DeleteRackLSE(DeleteRackLSERequest) returns (google.protobuf.Empty);

  // CreateNic creates a new nic
  rpc CreateNic(CreateNicRequest) returns (proto.Nic);

  // Update updates the nic
  rpc UpdateNic(UpdateNicRequest) returns (proto.Nic);

  // Get retrieves the details of the nic
  rpc GetNic(GetNicRequest) returns (proto.Nic);

  // List gets all the nics
  rpc ListNics(ListNicsRequest) returns (ListNicsResponse);

  // Delete delete the nic
  rpc DeleteNic(DeleteNicRequest) returns (google.protobuf.Empty);

  // ImportNics imports nics info.
  rpc ImportNics(ImportNicsRequest) returns (google.rpc.Status);

  // ImportDatacenters imports datacenter & its related info, including kvm & switch.
  rpc ImportDatacenters(ImportDatacentersRequest) returns (google.rpc.Status);

  // CreateKVM creates a new KVM
  rpc CreateKVM(CreateKVMRequest) returns (proto.KVM);

  // Update updates the KVM
  rpc UpdateKVM(UpdateKVMRequest) returns (proto.KVM);

  // Get retrieves the details of the KVM
  rpc GetKVM(GetKVMRequest) returns (proto.KVM);

  // List gets all the KVMs
  rpc ListKVMs(ListKVMsRequest) returns (ListKVMsResponse);

  // Delete delete the KVM
  rpc DeleteKVM(DeleteKVMRequest) returns (google.protobuf.Empty);

  // CreateRPM creates a new RPM
  rpc CreateRPM(CreateRPMRequest) returns (proto.RPM);

  // Update updates the RPM
  rpc UpdateRPM(UpdateRPMRequest) returns (proto.RPM);

  // Get retrieves the details of the RPM
  rpc GetRPM(GetRPMRequest) returns (proto.RPM);

  // List gets all the RPMs
  rpc ListRPMs(ListRPMsRequest) returns (ListRPMsResponse);

  // Delete delete the RPM
  rpc DeleteRPM(DeleteRPMRequest) returns (google.protobuf.Empty);

  // CreateDrac creates a new drac
  rpc CreateDrac(CreateDracRequest) returns (proto.Drac);

  // Update updates the drac
  rpc UpdateDrac(UpdateDracRequest) returns (proto.Drac);

  // Get retrieves the details of the drac
  rpc GetDrac(GetDracRequest) returns (proto.Drac);

  // List gets all the dracs
  rpc ListDracs(ListDracsRequest) returns (ListDracsResponse);

  // Delete delete the drac
  rpc DeleteDrac(DeleteDracRequest) returns (google.protobuf.Empty);

  // CreateSwitch creates a new switch
  rpc CreateSwitch(CreateSwitchRequest) returns (proto.Switch);

  // Update updates the switch
  rpc UpdateSwitch(UpdateSwitchRequest) returns (proto.Switch);

  // Get retrieves the details of the switch
  rpc GetSwitch(GetSwitchRequest) returns (proto.Switch);

  // List gets all the switches
  rpc ListSwitches(ListSwitchesRequest) returns (ListSwitchesResponse);

  // Delete delete the switch
  rpc DeleteSwitch(DeleteSwitchRequest) returns (google.protobuf.Empty);

  // CreateVlan creates a new vlan
  rpc CreateVlan(CreateVlanRequest) returns (proto.Vlan);

  // Update updates the vlan
  rpc UpdateVlan(UpdateVlanRequest) returns (proto.Vlan);

  // Get retrieves the details of the vlan
  rpc GetVlan(GetVlanRequest) returns (proto.Vlan);

  // List gets all the vlans
  rpc ListVlans(ListVlansRequest) returns (ListVlansResponse);

  // Delete delete the vlan
  rpc DeleteVlan(DeleteVlanRequest) returns (google.protobuf.Empty);

  // ImportVlans imports vlans & all IP-related infos.
  rpc ImportVlans(ImportVlansRequest) returns (google.rpc.Status);

  // ImportStates imports states of all objects.
  rpc ImportStates(ImportStatesRequest) returns (google.rpc.Status);
}

// Contains the required information for creating a ChromePlatform represented in
// the database.
message CreateChromePlatformRequest {
  // The chromePlatform to create.
  proto.ChromePlatform chromePlatform = 1 [(google.api.field_behavior) = REQUIRED];

  // The ID to use for the ChromePlatform, which will become the final component of
  // the ChromePlatform's resource name.
  //
  // This value should follow the regex "^[a-zA-Z0-9-_]{4,63}$" (4-63 characters,
  // contains only ASCII letters, numbers, dash and underscore.
   string chromePlatform_id = 2;
}

message UpdateChromePlatformRequest {
  // The chromePlatform to update.
  proto.ChromePlatform chromePlatform = 1 [(google.api.field_behavior) = REQUIRED];

  // The list of fields to be updated.
  google.protobuf.FieldMask update_mask = 2;
}

message GetChromePlatformRequest {
  // The name of the chromePlatform to retrieve.
  string name = 1 [
    (google.api.field_behavior) = REQUIRED,
    (google.api.resource_reference) = { type: "unified-fleet-system.appspot.com/ChromePlatform" }
  ];
}

message ListChromePlatformsRequest {
  // The maximum number of chromePlatforms to return. The service may return fewer than
  // this value.
  // If unspecified, at most 100 chromePlatforms will be returned.
  // The maximum value is 1000; values above 1000 will be coerced to 1000.
  int32 page_size = 1;

  // A page token, received from a previous `ListChromePlatforms` call.
  // Provide this to retrieve the subsequent page.
  //
  // When paginating, all other parameters provided to `ListChromePlatforms` must match
  // the call that provided the page token.
  string page_token = 2;
}

message ListChromePlatformsResponse {
  // The chromePlatforms from datastore.
  repeated proto.ChromePlatform chromePlatforms = 1;

  // A token, which can be sent as `page_token` to retrieve the next page.
  // If this field is omitted, there are no subsequent pages.
  string next_page_token = 2;
}

message DeleteChromePlatformRequest {
  // The name of the ChromePlatform to delete
  string name = 1 [
    (google.api.field_behavior) = REQUIRED,
    (google.api.resource_reference) = { type: "unified-fleet-system.appspot.com/ChromePlatform" }
  ];
}

message ImportChromePlatformsRequest {
  oneof source {
    MachineDBSource machine_db_source = 1;
    ConfigSource config_source = 2;
  }
}

message ImportChromePlatformsResponse {
  repeated ChromePlatformResult passed = 1;
  repeated ChromePlatformResult failed = 2;
}

message ChromePlatformResult {
  proto.ChromePlatform platform = 1;
  string error_msg = 2;
}

// Contains the required information for creating a MachineLSEPrototype represented in
// the database.
message CreateMachineLSEPrototypeRequest {
  // The MachineLSEPrototype to create.
  proto.MachineLSEPrototype machineLSEPrototype = 1 [(google.api.field_behavior) = REQUIRED];

  // The ID to use for the MachineLSEPrototype, which will become the final component of
  // the MachineLSEPrototype's resource name.
  //
  // This value should follow the regex "^[a-zA-Z0-9-_]{4,63}$" (4-63 characters,
  // contains only ASCII letters, numbers, dash and underscore.
   string machineLSEPrototype_id = 2;
}

message UpdateMachineLSEPrototypeRequest {
  // The MachineLSEPrototype to update.
  proto.MachineLSEPrototype machineLSEPrototype = 1 [(google.api.field_behavior) = REQUIRED];

  // The list of fields to be updated.
  google.protobuf.FieldMask update_mask = 2;
}

message GetMachineLSEPrototypeRequest {
  // The name of the MachineLSEPrototype to retrieve.
  string name = 1 [
    (google.api.field_behavior) = REQUIRED,
    (google.api.resource_reference) = { type: "unified-fleet-system.appspot.com/MachineLSEPrototype" }
  ];
}

message ListMachineLSEPrototypesRequest {
  // The maximum number of MachineLSEPrototypes to return. The service may return fewer than
  // this value.
  // If unspecified, at most 100 MachineLSEPrototypes will be returned.
  // The maximum value is 1000; values above 1000 will be coerced to 1000.
  int32 page_size = 1;

  // A page token, received from a previous `ListMachineLSEPrototypes` call.
  // Provide this to retrieve the subsequent page.
  //
  // When paginating, all other parameters provided to `ListMachineLSEPrototypes` must match
  // the call that provided the page token.
  string page_token = 2;
}

message ListMachineLSEPrototypesResponse {
  // The MachineLSEPrototypes from datastore.
  repeated proto.MachineLSEPrototype machineLSEPrototypes = 1;

  // A token, which can be sent as `page_token` to retrieve the next page.
  // If this field is omitted, there are no subsequent pages.
  string next_page_token = 2;
}

message DeleteMachineLSEPrototypeRequest {
  // The name of the MachineLSEPrototype to delete
  string name = 1 [
    (google.api.field_behavior) = REQUIRED,
    (google.api.resource_reference) = { type: "unified-fleet-system.appspot.com/MachineLSEPrototype" }
  ];
}

// Contains the required information for creating a RackLSEPrototype represented in
// the database.
message CreateRackLSEPrototypeRequest {
  // The RackLSEPrototype to create.
  proto.RackLSEPrototype rackLSEPrototype = 1 [(google.api.field_behavior) = REQUIRED];

  // The ID to use for the RackLSEPrototype, which will become the final component of
  // the RackLSEPrototype's resource name.
  //
  // This value should follow the regex "^[a-zA-Z0-9-_]{4,63}$" (4-63 characters,
  // contains only ASCII letters, numbers, dash and underscore.
   string rackLSEPrototype_id = 2;
}

message UpdateRackLSEPrototypeRequest {
  // The RackLSEPrototype to update.
  proto.RackLSEPrototype rackLSEPrototype = 1 [(google.api.field_behavior) = REQUIRED];

  // The list of fields to be updated.
  google.protobuf.FieldMask update_mask = 2;
}

message GetRackLSEPrototypeRequest {
  // The name of the RackLSEPrototype to retrieve.
  string name = 1 [
    (google.api.field_behavior) = REQUIRED,
    (google.api.resource_reference) = { type: "unified-fleet-system.appspot.com/RackLSEPrototype" }
  ];
}

message ListRackLSEPrototypesRequest {
  // The maximum number of RackLSEPrototypes to return. The service may return fewer than
  // this value.
  // If unspecified, at most 100 RackLSEPrototypes will be returned.
  // The maximum value is 1000; values above 1000 will be coerced to 1000.
  int32 page_size = 1;

  // A page token, received from a previous `ListRackLSEPrototypes` call.
  // Provide this to retrieve the subsequent page.
  //
  // When paginating, all other parameters provided to `ListRackLSEPrototypes` must match
  // the call that provided the page token.
  string page_token = 2;
}

message ListRackLSEPrototypesResponse {
  // The RackLSEPrototypes from datastore.
  repeated proto.RackLSEPrototype rackLSEPrototypes = 1;

  // A token, which can be sent as `page_token` to retrieve the next page.
  // If this field is omitted, there are no subsequent pages.
  string next_page_token = 2;
}

message DeleteRackLSEPrototypeRequest {
  // The name of the RackLSEPrototype to delete
  string name = 1 [
    (google.api.field_behavior) = REQUIRED,
    (google.api.resource_reference) = { type: "unified-fleet-system.appspot.com/RackLSEPrototype" }
  ];
}

// Contains the required information for creating a Machine represented in
// the database.
message CreateMachineRequest {
  // The machine to create.
  proto.Machine machine = 1 [(google.api.field_behavior) = REQUIRED];

  // The ID to use for the Machine, which will become the final component of
  // the Machine's resource name.
  //
  // This value should follow the regex "^[a-zA-Z0-9-_]{4,63}$" (4-63 characters,
  // contains only ASCII letters, numbers, dash and underscore.
   string machine_id = 2;
}

message UpdateMachineRequest {
  // The machine to update.
  proto.Machine machine = 1 [(google.api.field_behavior) = REQUIRED];

  // The list of fields to be updated.
  google.protobuf.FieldMask update_mask = 2;
}

message GetMachineRequest {
  // The name of the machine to retrieve.
  string name = 1 [
    (google.api.field_behavior) = REQUIRED,
    (google.api.resource_reference) = { type: "unified-fleet-system.appspot.com/Machine" }
  ];
}

message ListMachinesRequest {
  // The maximum number of machines to return. The service may return fewer than
  // this value.
  // If unspecified, at most 100 machines will be returned.
  // The maximum value is 1000; values above 1000 will be coerced to 1000.
  int32 page_size = 1;

  // A page token, received from a previous `ListMachines` call.
  // Provide this to retrieve the subsequent page.
  //
  // When paginating, all other parameters provided to `ListMachines` must match
  // the call that provided the page token.
  string page_token = 2;
}

message ListMachinesResponse {
  // The machines from datastore.
  repeated proto.Machine machines = 1;

  // A token, which can be sent as `page_token` to retrieve the next page.
  // If this field is omitted, there are no subsequent pages.
  string next_page_token = 2;
}

message DeleteMachineRequest {
  // The name of the Machine to delete
  string name = 1 [
    (google.api.field_behavior) = REQUIRED,
    (google.api.resource_reference) = { type: "unified-fleet-system.appspot.com/Machine" }
  ];
}

message ImportMachinesRequest {
  oneof source {
    MachineDBSource machine_db_source = 1;
    ConfigSource config_source = 2;
  }
}

message MachineDBSource {
  string host = 1;
}

message ConfigSource {
  // Empty config_service means it's local file.
  string config_service_name = 1;
  string file_name = 2;
}

// Contains the required information for creating a Rack represented in
// the database.
message CreateRackRequest {
  // The rack to create.
  proto.Rack rack = 1 [(google.api.field_behavior) = REQUIRED];

  // The ID to use for the Rack, which will become the final component of
  // the Rack's resource name.
  //
  // This value should follow the regex "^[a-zA-Z0-9-_]{4,63}$" (4-63 characters,
  // contains only ASCII letters, numbers, dash and underscore.
   string rack_id = 2;
}

message UpdateRackRequest {
  // The rack to update.
  proto.Rack rack = 1 [(google.api.field_behavior) = REQUIRED];

  // The list of fields to be updated.
  google.protobuf.FieldMask update_mask = 2;
}

message GetRackRequest {
  // The name of the rack to retrieve.
  string name = 1 [
    (google.api.field_behavior) = REQUIRED,
    (google.api.resource_reference) = { type: "unified-fleet-system.appspot.com/Rack" }
  ];
}

message ListRacksRequest {
  // The maximum number of racks to return. The service may return fewer than
  // this value.
  // If unspecified, at most 100 racks will be returned.
  // The maximum value is 1000; values above 1000 will be coerced to 1000.
  int32 page_size = 1;

  // A page token, received from a previous `ListRacks` call.
  // Provide this to retrieve the subsequent page.
  //
  // When paginating, all other parameters provided to `ListRacks` must match
  // the call that provided the page token.
  string page_token = 2;
}

message ListRacksResponse {
  // The racks from datastore.
  repeated proto.Rack racks = 1;

  // A token, which can be sent as `page_token` to retrieve the next page.
  // If this field is omitted, there are no subsequent pages.
  string next_page_token = 2;
}

message DeleteRackRequest {
  // The name of the Rack to delete
  string name = 1 [
    (google.api.field_behavior) = REQUIRED,
    (google.api.resource_reference) = { type: "unified-fleet-system.appspot.com/Rack" }
  ];
}

// Contains the required information for creating a MachineLSE represented in
// the database.
message CreateMachineLSERequest {
  // The machineLSE to create.
  proto.MachineLSE machineLSE = 1 [(google.api.field_behavior) = REQUIRED];

  // The ID to use for the MachineLSE, which will become the final component of
  // the MachineLSE's resource name.
  //
  // This value should follow the regex "^[a-zA-Z0-9-_]{4,63}$" (4-63 characters,
  // contains only ASCII letters, numbers, dash and underscore.
   string machineLSE_id = 2;
}

message UpdateMachineLSERequest {
  // The machineLSE to update.
  proto.MachineLSE machineLSE = 1 [(google.api.field_behavior) = REQUIRED];

  // The list of fields to be updated.
  google.protobuf.FieldMask update_mask = 2;
}

message GetMachineLSERequest {
  // The name of the machineLSE to retrieve.
  string name = 1 [
    (google.api.field_behavior) = REQUIRED,
    (google.api.resource_reference) = { type: "unified-fleet-system.appspot.com/MachineLSE" }
  ];
}

message ListMachineLSEsRequest {
  // The maximum number of machineLSEs to return. The service may return fewer than
  // this value.
  // If unspecified, at most 100 machineLSEs will be returned.
  // The maximum value is 1000; values above 1000 will be coerced to 1000.
  int32 page_size = 1;

  // A page token, received from a previous `ListMachineLSEs` call.
  // Provide this to retrieve the subsequent page.
  //
  // When paginating, all other parameters provided to `ListMachineLSEs` must match
  // the call that provided the page token.
  string page_token = 2;
}

message ListMachineLSEsResponse {
  // The machineLSEs from datastore.
  repeated proto.MachineLSE machineLSEs = 1;

  // A token, which can be sent as `page_token` to retrieve the next page.
  // If this field is omitted, there are no subsequent pages.
  string next_page_token = 2;
}

message DeleteMachineLSERequest {
  // The name of the MachineLSE to delete
  string name = 1 [
    (google.api.field_behavior) = REQUIRED,
    (google.api.resource_reference) = { type: "unified-fleet-system.appspot.com/MachineLSE" }
  ];
}

message ImportMachineLSEsRequest {
  oneof source {
    MachineDBSource machine_db_source = 1;
    ConfigSource config_source = 2;
  }
}

// Contains the required information for creating a RackLSE represented in
// the database.
message CreateRackLSERequest {
  // The rackLSE to create.
  proto.RackLSE rackLSE = 1 [(google.api.field_behavior) = REQUIRED];

  // The ID to use for the RackLSE, which will become the final component of
  // the RackLSE's resource name.
  //
  // This value should follow the regex "^[a-zA-Z0-9-_]{4,63}$" (4-63 characters,
  // contains only ASCII letters, numbers, dash and underscore.
   string rackLSE_id = 2;
}

message UpdateRackLSERequest {
  // The rackLSE to update.
  proto.RackLSE rackLSE = 1 [(google.api.field_behavior) = REQUIRED];

  // The list of fields to be updated.
  google.protobuf.FieldMask update_mask = 2;
}

message GetRackLSERequest {
  // The name of the rackLSE to retrieve.
  string name = 1 [
    (google.api.field_behavior) = REQUIRED,
    (google.api.resource_reference) = { type: "unified-fleet-system.appspot.com/RackLSE" }
  ];
}

message ListRackLSEsRequest {
  // The maximum number of rackLSEs to return. The service may return fewer than
  // this value.
  // If unspecified, at most 100 rackLSEs will be returned.
  // The maximum value is 1000; values above 1000 will be coerced to 1000.
  int32 page_size = 1;

  // A page token, received from a previous `ListRackLSEs` call.
  // Provide this to retrieve the subsequent page.
  //
  // When paginating, all other parameters provided to `ListRackLSEs` must match
  // the call that provided the page token.
  string page_token = 2;
}

message ListRackLSEsResponse {
  // The rackLSEs from datastore.
  repeated proto.RackLSE rackLSEs = 1;

  // A token, which can be sent as `page_token` to retrieve the next page.
  // If this field is omitted, there are no subsequent pages.
  string next_page_token = 2;
}

message DeleteRackLSERequest {
  // The name of the RackLSE to delete
  string name = 1 [
    (google.api.field_behavior) = REQUIRED,
    (google.api.resource_reference) = { type: "unified-fleet-system.appspot.com/RackLSE" }
  ];
}

// Contains the required information for creating a Nic represented in
// the database.
message CreateNicRequest {
  // The nic to create.
  proto.Nic nic = 1 [(google.api.field_behavior) = REQUIRED];

  // The ID to use for the Nic, which will become the final component of
  // the Nic's resource name.
  //
  // This value should follow the regex "^[a-zA-Z0-9-_]{4,63}$" (4-63 characters,
  // contains only ASCII letters, numbers, dash and underscore.
   string nic_id = 2;
}

message UpdateNicRequest {
  // The nic to update.
  proto.Nic nic = 1 [(google.api.field_behavior) = REQUIRED];

  // The list of fields to be updated.
  google.protobuf.FieldMask update_mask = 2;
}

message GetNicRequest {
  // The name of the nic to retrieve.
  string name = 1 [
    (google.api.field_behavior) = REQUIRED,
    (google.api.resource_reference) = { type: "unified-fleet-system.appspot.com/Nic" }
  ];
}

message ListNicsRequest {
  // The maximum number of nics to return. The service may return fewer than
  // this value.
  // If unspecified, at most 100 nics will be returned.
  // The maximum value is 1000; values above 1000 will be coerced to 1000.
  int32 page_size = 1;

  // A page token, received from a previous `ListNics` call.
  // Provide this to retrieve the subsequent page.
  //
  // When paginating, all other parameters provided to `ListNics` must match
  // the call that provided the page token.
  string page_token = 2;
}

message ListNicsResponse {
  // The nics from datastore.
  repeated proto.Nic nics = 1;

  // A token, which can be sent as `page_token` to retrieve the next page.
  // If this field is omitted, there are no subsequent pages.
  string next_page_token = 2;
}

message DeleteNicRequest {
  // The name of the Nic to delete
  string name = 1 [
    (google.api.field_behavior) = REQUIRED,
    (google.api.resource_reference) = { type: "unified-fleet-system.appspot.com/Nic" }
  ];
}

message ImportNicsRequest {
  oneof source {
    MachineDBSource machine_db_source = 1;
    ConfigSource config_source = 2;
  }
}

message ImportDatacentersRequest {
  oneof source {
    MachineDBSource machine_db_source = 1;
    ConfigSource config_source = 2;
  }
}

// Contains the required information for creating a KVM represented in
// the database.
message CreateKVMRequest {
  // The KVM to create.
  proto.KVM KVM = 1 [(google.api.field_behavior) = REQUIRED];

  // The ID to use for the KVM, which will become the final component of
  // the KVM's resource name.
  //
  // This value should follow the regex "^[a-zA-Z0-9-_]{4,63}$" (4-63 characters,
  // contains only ASCII letters, numbers, dash and underscore.
   string KVM_id = 2;
}

message UpdateKVMRequest {
  // The KVM to update.
  proto.KVM KVM = 1 [(google.api.field_behavior) = REQUIRED];

  // The list of fields to be updated.
  google.protobuf.FieldMask update_mask = 2;
}

message GetKVMRequest {
  // The name of the KVM to retrieve.
  string name = 1 [
    (google.api.field_behavior) = REQUIRED,
    (google.api.resource_reference) = { type: "unified-fleet-system.appspot.com/KVM" }
  ];
}

message ListKVMsRequest {
  // The maximum number of KVMs to return. The service may return fewer than
  // this value.
  // If unspecified, at most 100 KVMs will be returned.
  // The maximum value is 1000; values above 1000 will be coerced to 1000.
  int32 page_size = 1;

  // A page token, received from a previous `ListKVMs` call.
  // Provide this to retrieve the subsequent page.
  //
  // When paginating, all other parameters provided to `ListKVMs` must match
  // the call that provided the page token.
  string page_token = 2;
}

message ListKVMsResponse {
  // The KVMs from datastore.
  repeated proto.KVM KVMs = 1;

  // A token, which can be sent as `page_token` to retrieve the next page.
  // If this field is omitted, there are no subsequent pages.
  string next_page_token = 2;
}

message DeleteKVMRequest {
  // The name of the KVM to delete
  string name = 1 [
    (google.api.field_behavior) = REQUIRED,
    (google.api.resource_reference) = { type: "unified-fleet-system.appspot.com/KVM" }
  ];
}

// Contains the required information for creating a RPM represented in
// the database.
message CreateRPMRequest {
  // The RPM to create.
  proto.RPM RPM = 1 [(google.api.field_behavior) = REQUIRED];

  // The ID to use for the RPM, which will become the final component of
  // the RPM's resource name.
  //
  // This value should follow the regex "^[a-zA-Z0-9-_]{4,63}$" (4-63 characters,
  // contains only ASCII letters, numbers, dash and underscore.
   string RPM_id = 2;
}

message UpdateRPMRequest {
  // The RPM to update.
  proto.RPM RPM = 1 [(google.api.field_behavior) = REQUIRED];

  // The list of fields to be updated.
  google.protobuf.FieldMask update_mask = 2;
}

message GetRPMRequest {
  // The name of the RPM to retrieve.
  string name = 1 [
    (google.api.field_behavior) = REQUIRED,
    (google.api.resource_reference) = { type: "unified-fleet-system.appspot.com/RPM" }
  ];
}

message ListRPMsRequest {
  // The maximum number of RPMs to return. The service may return fewer than
  // this value.
  // If unspecified, at most 100 RPMs will be returned.
  // The maximum value is 1000; values above 1000 will be coerced to 1000.
  int32 page_size = 1;

  // A page token, received from a previous `ListRPMs` call.
  // Provide this to retrieve the subsequent page.
  //
  // When paginating, all other parameters provided to `ListRPMs` must match
  // the call that provided the page token.
  string page_token = 2;
}

message ListRPMsResponse {
  // The RPMs from datastore.
  repeated proto.RPM RPMs = 1;

  // A token, which can be sent as `page_token` to retrieve the next page.
  // If this field is omitted, there are no subsequent pages.
  string next_page_token = 2;
}

message DeleteRPMRequest {
  // The name of the RPM to delete
  string name = 1 [
    (google.api.field_behavior) = REQUIRED,
    (google.api.resource_reference) = { type: "unified-fleet-system.appspot.com/RPM" }
  ];
}

// Contains the required information for creating a Drac represented in
// the database.
message CreateDracRequest {
  // The drac to create.
  proto.Drac drac = 1 [(google.api.field_behavior) = REQUIRED];

  // The ID to use for the Drac, which will become the final component of
  // the Drac's resource name.
  //
  // This value should follow the regex "^[a-zA-Z0-9-_]{4,63}$" (4-63 characters,
  // contains only ASCII letters, numbers, dash and underscore.
   string drac_id = 2;
}

message UpdateDracRequest {
  // The drac to update.
  proto.Drac drac = 1 [(google.api.field_behavior) = REQUIRED];

  // The list of fields to be updated.
  google.protobuf.FieldMask update_mask = 2;
}

message GetDracRequest {
  // The name of the drac to retrieve.
  string name = 1 [
    (google.api.field_behavior) = REQUIRED,
    (google.api.resource_reference) = { type: "unified-fleet-system.appspot.com/Drac" }
  ];
}

message ListDracsRequest {
  // The maximum number of dracs to return. The service may return fewer than
  // this value.
  // If unspecified, at most 100 dracs will be returned.
  // The maximum value is 1000; values above 1000 will be coerced to 1000.
  int32 page_size = 1;

  // A page token, received from a previous `ListDracs` call.
  // Provide this to retrieve the subsequent page.
  //
  // When paginating, all other parameters provided to `ListDracs` must match
  // the call that provided the page token.
  string page_token = 2;
}

message ListDracsResponse {
  // The dracs from datastore.
  repeated proto.Drac dracs = 1;

  // A token, which can be sent as `page_token` to retrieve the next page.
  // If this field is omitted, there are no subsequent pages.
  string next_page_token = 2;
}

message DeleteDracRequest {
  // The name of the Drac to delete
  string name = 1 [
    (google.api.field_behavior) = REQUIRED,
    (google.api.resource_reference) = { type: "unified-fleet-system.appspot.com/Drac" }
  ];
}

// Contains the required information for creating a Switch represented in
// the database.
message CreateSwitchRequest {
  // The switch to create.
  proto.Switch switch = 1 [(google.api.field_behavior) = REQUIRED];

  // The ID to use for the Switch, which will become the final component of
  // the Switch's resource name.
  //
  // This value should follow the regex "^[a-zA-Z0-9-_]{4,63}$" (4-63 characters,
  // contains only ASCII letters, numbers, dash and underscore.
   string switch_id = 2;
}

message UpdateSwitchRequest {
  // The switch to update.
  proto.Switch switch = 1 [(google.api.field_behavior) = REQUIRED];

  // The list of fields to be updated.
  google.protobuf.FieldMask update_mask = 2;
}

message GetSwitchRequest {
  // The name of the switch to retrieve.
  string name = 1 [
    (google.api.field_behavior) = REQUIRED,
    (google.api.resource_reference) = { type: "unified-fleet-system.appspot.com/Switch" }
  ];
}

message ListSwitchesRequest {
  // The maximum number of switches to return. The service may return fewer than
  // this value.
  // If unspecified, at most 100 switches will be returned.
  // The maximum value is 1000; values above 1000 will be coerced to 1000.
  int32 page_size = 1;

  // A page token, received from a previous `ListSwitches` call.
  // Provide this to retrieve the subsequent page.
  //
  // When paginating, all other parameters provided to `ListSwitches` must match
  // the call that provided the page token.
  string page_token = 2;
}

message ListSwitchesResponse {
  // The switches from datastore.
  repeated proto.Switch switches = 1;

  // A token, which can be sent as `page_token` to retrieve the next page.
  // If this field is omitted, there are no subsequent pages.
  string next_page_token = 2;
}

message DeleteSwitchRequest {
  // The name of the Switch to delete
  string name = 1 [
    (google.api.field_behavior) = REQUIRED,
    (google.api.resource_reference) = { type: "unified-fleet-system.appspot.com/Switch" }
  ];
}

// Contains the required information for creating a Vlan represented in
// the database.
message CreateVlanRequest {
  // The vlan to create.
  proto.Vlan vlan = 1 [(google.api.field_behavior) = REQUIRED];

  // The ID to use for the Vlan, which will become the final component of
  // the Vlan's resource name.
  //
  // This value should follow the regex "^[a-zA-Z0-9-_]{4,63}$" (4-63 characters,
  // contains only ASCII letters, numbers, dash and underscore.
   string vlan_id = 2;
}

message UpdateVlanRequest {
  // The vlan to update.
  proto.Vlan vlan = 1 [(google.api.field_behavior) = REQUIRED];

  // The list of fields to be updated.
  google.protobuf.FieldMask update_mask = 2;
}

message GetVlanRequest {
  // The name of the vlan to retrieve.
  string name = 1 [
    (google.api.field_behavior) = REQUIRED,
    (google.api.resource_reference) = { type: "unified-fleet-system.appspot.com/Vlan" }
  ];
}

message ListVlansRequest {
  // The maximum number of vlans to return. The service may return fewer than
  // this value.
  // If unspecified, at most 100 vlans will be returned.
  // The maximum value is 1000; values above 1000 will be coerced to 1000.
  int32 page_size = 1;

  // A page token, received from a previous `ListVlans` call.
  // Provide this to retrieve the subsequent page.
  //
  // When paginating, all other parameters provided to `ListVlans` must match
  // the call that provided the page token.
  string page_token = 2;
}

message ListVlansResponse {
  // The vlans from datastore.
  repeated proto.Vlan vlans = 1;

  // A token, which can be sent as `page_token` to retrieve the next page.
  // If this field is omitted, there are no subsequent pages.
  string next_page_token = 2;
}

message DeleteVlanRequest {
  // The name of the Vlan to delete
  string name = 1 [
    (google.api.field_behavior) = REQUIRED,
    (google.api.resource_reference) = { type: "unified-fleet-system.appspot.com/Vlan" }
  ];
}

message ImportVlansRequest {
  oneof source {
    MachineDBSource machine_db_source = 1;
    ConfigSource config_source = 2;
  }
}

message ImportStatesRequest {
  oneof source {
    MachineDBSource machine_db_source = 1;
    ConfigSource config_source = 2;
  }
}