// Code generated by protoc-gen-go. DO NOT EDIT.
// source: infra/unifiedfleet/api/v1/proto/chromeos/lab/device.proto

package ufspb

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	device "infra/unifiedfleet/api/v1/proto/chromeos/device"
	manufacturing "infra/unifiedfleet/api/v1/proto/chromeos/manufacturing"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// critical_pools are pool labels that the builders are dependent on, and
// that the cros-infra team is responsible for managing explicitly. All other
// pool labels used for adhoc labeling of DUTs go into self_serve_pools.
// TO BE DELETED
type DeviceUnderTest_DUTPool int32

const (
	DeviceUnderTest_DUT_POOL_INVALID       DeviceUnderTest_DUTPool = 0
	DeviceUnderTest_DUT_POOL_CQ            DeviceUnderTest_DUTPool = 1
	DeviceUnderTest_DUT_POOL_BVT           DeviceUnderTest_DUTPool = 2
	DeviceUnderTest_DUT_POOL_SUITES        DeviceUnderTest_DUTPool = 3
	DeviceUnderTest_DUT_POOL_CTS           DeviceUnderTest_DUTPool = 4
	DeviceUnderTest_DUT_POOL_CTS_PERBUILD  DeviceUnderTest_DUTPool = 5
	DeviceUnderTest_DUT_POOL_CONTINUOUS    DeviceUnderTest_DUTPool = 6
	DeviceUnderTest_DUT_POOL_ARC_PRESUBMIT DeviceUnderTest_DUTPool = 7
	DeviceUnderTest_DUT_POOL_QUOTA         DeviceUnderTest_DUTPool = 8
)

var DeviceUnderTest_DUTPool_name = map[int32]string{
	0: "DUT_POOL_INVALID",
	1: "DUT_POOL_CQ",
	2: "DUT_POOL_BVT",
	3: "DUT_POOL_SUITES",
	4: "DUT_POOL_CTS",
	5: "DUT_POOL_CTS_PERBUILD",
	6: "DUT_POOL_CONTINUOUS",
	7: "DUT_POOL_ARC_PRESUBMIT",
	8: "DUT_POOL_QUOTA",
}

var DeviceUnderTest_DUTPool_value = map[string]int32{
	"DUT_POOL_INVALID":       0,
	"DUT_POOL_CQ":            1,
	"DUT_POOL_BVT":           2,
	"DUT_POOL_SUITES":        3,
	"DUT_POOL_CTS":           4,
	"DUT_POOL_CTS_PERBUILD":  5,
	"DUT_POOL_CONTINUOUS":    6,
	"DUT_POOL_ARC_PRESUBMIT": 7,
	"DUT_POOL_QUOTA":         8,
}

func (x DeviceUnderTest_DUTPool) String() string {
	return proto.EnumName(DeviceUnderTest_DUTPool_name, int32(x))
}

func (DeviceUnderTest_DUTPool) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_1f173c15f1560439, []int{1, 0}
}

// Next Tag: 7
type ChromeOSDevice struct {
	// A unique ID for chromeos device, a randomly generated uuid or AssetTag.
	Id              *ChromeOSDeviceID       `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	SerialNumber    string                  `protobuf:"bytes,2,opt,name=serial_number,json=serialNumber,proto3" json:"serial_number,omitempty"`
	ManufacturingId *manufacturing.ConfigID `protobuf:"bytes,3,opt,name=manufacturing_id,json=manufacturingId,proto3" json:"manufacturing_id,omitempty"`
	// Device config identifiers.
	// These values will be extracted from DUT and joinable to device config.
	DeviceConfigId *device.ConfigId `protobuf:"bytes,4,opt,name=device_config_id,json=deviceConfigId,proto3" json:"device_config_id,omitempty"`
	// Types that are valid to be assigned to Device:
	//	*ChromeOSDevice_Dut
	//	*ChromeOSDevice_Labstation
	Device               isChromeOSDevice_Device `protobuf_oneof:"device"`
	XXX_NoUnkeyedLiteral struct{}                `json:"-"`
	XXX_unrecognized     []byte                  `json:"-"`
	XXX_sizecache        int32                   `json:"-"`
}

func (m *ChromeOSDevice) Reset()         { *m = ChromeOSDevice{} }
func (m *ChromeOSDevice) String() string { return proto.CompactTextString(m) }
func (*ChromeOSDevice) ProtoMessage()    {}
func (*ChromeOSDevice) Descriptor() ([]byte, []int) {
	return fileDescriptor_1f173c15f1560439, []int{0}
}

func (m *ChromeOSDevice) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ChromeOSDevice.Unmarshal(m, b)
}
func (m *ChromeOSDevice) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ChromeOSDevice.Marshal(b, m, deterministic)
}
func (m *ChromeOSDevice) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChromeOSDevice.Merge(m, src)
}
func (m *ChromeOSDevice) XXX_Size() int {
	return xxx_messageInfo_ChromeOSDevice.Size(m)
}
func (m *ChromeOSDevice) XXX_DiscardUnknown() {
	xxx_messageInfo_ChromeOSDevice.DiscardUnknown(m)
}

var xxx_messageInfo_ChromeOSDevice proto.InternalMessageInfo

func (m *ChromeOSDevice) GetId() *ChromeOSDeviceID {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *ChromeOSDevice) GetSerialNumber() string {
	if m != nil {
		return m.SerialNumber
	}
	return ""
}

func (m *ChromeOSDevice) GetManufacturingId() *manufacturing.ConfigID {
	if m != nil {
		return m.ManufacturingId
	}
	return nil
}

func (m *ChromeOSDevice) GetDeviceConfigId() *device.ConfigId {
	if m != nil {
		return m.DeviceConfigId
	}
	return nil
}

type isChromeOSDevice_Device interface {
	isChromeOSDevice_Device()
}

type ChromeOSDevice_Dut struct {
	Dut *DeviceUnderTest `protobuf:"bytes,5,opt,name=dut,proto3,oneof"`
}

type ChromeOSDevice_Labstation struct {
	Labstation *Labstation `protobuf:"bytes,6,opt,name=labstation,proto3,oneof"`
}

func (*ChromeOSDevice_Dut) isChromeOSDevice_Device() {}

func (*ChromeOSDevice_Labstation) isChromeOSDevice_Device() {}

func (m *ChromeOSDevice) GetDevice() isChromeOSDevice_Device {
	if m != nil {
		return m.Device
	}
	return nil
}

func (m *ChromeOSDevice) GetDut() *DeviceUnderTest {
	if x, ok := m.GetDevice().(*ChromeOSDevice_Dut); ok {
		return x.Dut
	}
	return nil
}

func (m *ChromeOSDevice) GetLabstation() *Labstation {
	if x, ok := m.GetDevice().(*ChromeOSDevice_Labstation); ok {
		return x.Labstation
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*ChromeOSDevice) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*ChromeOSDevice_Dut)(nil),
		(*ChromeOSDevice_Labstation)(nil),
	}
}

// Next Tag: 5
type DeviceUnderTest struct {
	Hostname             string                    `protobuf:"bytes,1,opt,name=hostname,proto3" json:"hostname,omitempty"`
	Peripherals          *Peripherals              `protobuf:"bytes,2,opt,name=peripherals,proto3" json:"peripherals,omitempty"`
	CriticalPools        []DeviceUnderTest_DUTPool `protobuf:"varint,3,rep,packed,name=critical_pools,json=criticalPools,proto3,enum=unifiedfleet.api.v1.proto.chromeos.lab.DeviceUnderTest_DUTPool" json:"critical_pools,omitempty"`
	Pools                []string                  `protobuf:"bytes,4,rep,name=pools,proto3" json:"pools,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                  `json:"-"`
	XXX_unrecognized     []byte                    `json:"-"`
	XXX_sizecache        int32                     `json:"-"`
}

func (m *DeviceUnderTest) Reset()         { *m = DeviceUnderTest{} }
func (m *DeviceUnderTest) String() string { return proto.CompactTextString(m) }
func (*DeviceUnderTest) ProtoMessage()    {}
func (*DeviceUnderTest) Descriptor() ([]byte, []int) {
	return fileDescriptor_1f173c15f1560439, []int{1}
}

func (m *DeviceUnderTest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DeviceUnderTest.Unmarshal(m, b)
}
func (m *DeviceUnderTest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DeviceUnderTest.Marshal(b, m, deterministic)
}
func (m *DeviceUnderTest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeviceUnderTest.Merge(m, src)
}
func (m *DeviceUnderTest) XXX_Size() int {
	return xxx_messageInfo_DeviceUnderTest.Size(m)
}
func (m *DeviceUnderTest) XXX_DiscardUnknown() {
	xxx_messageInfo_DeviceUnderTest.DiscardUnknown(m)
}

var xxx_messageInfo_DeviceUnderTest proto.InternalMessageInfo

func (m *DeviceUnderTest) GetHostname() string {
	if m != nil {
		return m.Hostname
	}
	return ""
}

func (m *DeviceUnderTest) GetPeripherals() *Peripherals {
	if m != nil {
		return m.Peripherals
	}
	return nil
}

func (m *DeviceUnderTest) GetCriticalPools() []DeviceUnderTest_DUTPool {
	if m != nil {
		return m.CriticalPools
	}
	return nil
}

func (m *DeviceUnderTest) GetPools() []string {
	if m != nil {
		return m.Pools
	}
	return nil
}

// Next Tag: 5
type Labstation struct {
	Hostname             string   `protobuf:"bytes,1,opt,name=hostname,proto3" json:"hostname,omitempty"`
	Servos               []*Servo `protobuf:"bytes,2,rep,name=servos,proto3" json:"servos,omitempty"`
	Rpm                  *RPM     `protobuf:"bytes,3,opt,name=rpm,proto3" json:"rpm,omitempty"`
	Pools                []string `protobuf:"bytes,4,rep,name=pools,proto3" json:"pools,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Labstation) Reset()         { *m = Labstation{} }
func (m *Labstation) String() string { return proto.CompactTextString(m) }
func (*Labstation) ProtoMessage()    {}
func (*Labstation) Descriptor() ([]byte, []int) {
	return fileDescriptor_1f173c15f1560439, []int{2}
}

func (m *Labstation) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Labstation.Unmarshal(m, b)
}
func (m *Labstation) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Labstation.Marshal(b, m, deterministic)
}
func (m *Labstation) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Labstation.Merge(m, src)
}
func (m *Labstation) XXX_Size() int {
	return xxx_messageInfo_Labstation.Size(m)
}
func (m *Labstation) XXX_DiscardUnknown() {
	xxx_messageInfo_Labstation.DiscardUnknown(m)
}

var xxx_messageInfo_Labstation proto.InternalMessageInfo

func (m *Labstation) GetHostname() string {
	if m != nil {
		return m.Hostname
	}
	return ""
}

func (m *Labstation) GetServos() []*Servo {
	if m != nil {
		return m.Servos
	}
	return nil
}

func (m *Labstation) GetRpm() *RPM {
	if m != nil {
		return m.Rpm
	}
	return nil
}

func (m *Labstation) GetPools() []string {
	if m != nil {
		return m.Pools
	}
	return nil
}

func init() {
	proto.RegisterEnum("unifiedfleet.api.v1.proto.chromeos.lab.DeviceUnderTest_DUTPool", DeviceUnderTest_DUTPool_name, DeviceUnderTest_DUTPool_value)
	proto.RegisterType((*ChromeOSDevice)(nil), "unifiedfleet.api.v1.proto.chromeos.lab.ChromeOSDevice")
	proto.RegisterType((*DeviceUnderTest)(nil), "unifiedfleet.api.v1.proto.chromeos.lab.DeviceUnderTest")
	proto.RegisterType((*Labstation)(nil), "unifiedfleet.api.v1.proto.chromeos.lab.Labstation")
}

func init() {
	proto.RegisterFile("infra/unifiedfleet/api/v1/proto/chromeos/lab/device.proto", fileDescriptor_1f173c15f1560439)
}

var fileDescriptor_1f173c15f1560439 = []byte{
	// 635 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x94, 0xd1, 0x6e, 0xda, 0x48,
	0x14, 0x86, 0x03, 0x4e, 0x48, 0x72, 0x48, 0x60, 0x34, 0xc9, 0xee, 0x7a, 0xb9, 0x42, 0xac, 0xb4,
	0x42, 0xaa, 0x6a, 0x2b, 0xa4, 0x52, 0xd3, 0x56, 0x6d, 0x14, 0x30, 0x55, 0xac, 0x12, 0x20, 0x63,
	0x3b, 0x17, 0x95, 0x2a, 0x6b, 0xc0, 0xe3, 0x64, 0x24, 0x63, 0x5b, 0xb6, 0xe1, 0x09, 0x7b, 0xdb,
	0x9b, 0x3e, 0x4a, 0x9f, 0xa0, 0x62, 0x6c, 0x0c, 0x44, 0x55, 0x65, 0x7a, 0x79, 0xfe, 0xe3, 0xff,
	0x3b, 0xe3, 0xf3, 0xdb, 0x03, 0x6f, 0xb8, 0xef, 0x46, 0x54, 0x9d, 0xfb, 0xdc, 0xe5, 0xcc, 0x71,
	0x3d, 0xc6, 0x12, 0x95, 0x86, 0x5c, 0x5d, 0x5c, 0xa8, 0x61, 0x14, 0x24, 0x81, 0x3a, 0x7d, 0x8a,
	0x82, 0x19, 0x0b, 0x62, 0xd5, 0xa3, 0x13, 0xd5, 0x61, 0x0b, 0x3e, 0x65, 0x8a, 0xe8, 0xe0, 0xff,
	0x37, 0x4d, 0x0a, 0x0d, 0xb9, 0xb2, 0xb8, 0x48, 0x5b, 0xca, 0xca, 0xa4, 0x78, 0x74, 0xd2, 0xb8,
	0x2e, 0x3c, 0x22, 0xc5, 0xab, 0xd3, 0xc0, 0x77, 0xf9, 0xa3, 0xcd, 0x9d, 0x94, 0xd6, 0xe8, 0xef,
	0x74, 0xc6, 0x55, 0x61, 0xa7, 0xb4, 0x35, 0xe6, 0xc3, 0x4e, 0x98, 0x90, 0x45, 0x3c, 0x7c, 0x62,
	0x11, 0xf5, 0xe2, 0xcc, 0x7f, 0xb5, 0x93, 0x3f, 0x66, 0xd1, 0x22, 0xc8, 0x9c, 0x1f, 0x0b, 0x3b,
	0x67, 0xd4, 0x9f, 0xbb, 0x74, 0x9a, 0xcc, 0x23, 0xee, 0x3f, 0x3e, 0x5f, 0x44, 0xeb, 0x87, 0x04,
	0xb5, 0x9e, 0x78, 0x74, 0x64, 0x68, 0xe2, 0xed, 0xf0, 0x2d, 0x94, 0xb9, 0x23, 0x97, 0x9a, 0xa5,
	0x76, 0xb5, 0x73, 0xa5, 0x14, 0x4b, 0x44, 0xd9, 0x66, 0xe8, 0x1a, 0x29, 0x73, 0x07, 0xff, 0x07,
	0xa7, 0x31, 0x8b, 0x38, 0xf5, 0x6c, 0x7f, 0x3e, 0x9b, 0xb0, 0x48, 0x2e, 0x37, 0x4b, 0xed, 0x63,
	0x72, 0x92, 0x8a, 0x43, 0xa1, 0x61, 0x06, 0x68, 0xeb, 0x88, 0x36, 0x77, 0x64, 0x49, 0x0c, 0x7f,
	0x5b, 0x64, 0xf8, 0x96, 0x57, 0xe9, 0x89, 0xd7, 0xd3, 0x35, 0x52, 0xdf, 0xd2, 0x75, 0x07, 0x7f,
	0x01, 0x94, 0xa5, 0x97, 0xaf, 0x40, 0xde, 0x17, 0x63, 0x2e, 0x8b, 0x8c, 0xc9, 0x3e, 0xd3, 0x8c,
	0xef, 0x90, 0x5a, 0x2a, 0xac, 0x6a, 0xfc, 0x09, 0x24, 0x67, 0x9e, 0xc8, 0x07, 0x82, 0xf8, 0xba,
	0xe8, 0xd6, 0xd2, 0x6d, 0x59, 0xbe, 0xc3, 0x22, 0x93, 0xc5, 0xc9, 0xed, 0x1e, 0x59, 0x52, 0xb0,
	0x09, 0xe0, 0xd1, 0x49, 0x9c, 0xd0, 0x84, 0x07, 0xbe, 0x5c, 0x11, 0xcc, 0x4e, 0x51, 0xe6, 0x20,
	0x77, 0xde, 0xee, 0x91, 0x0d, 0x4e, 0xf7, 0x08, 0x2a, 0xe9, 0xa1, 0x5b, 0xdf, 0x25, 0xa8, 0x3f,
	0x1b, 0x8d, 0x1b, 0x70, 0xf4, 0x14, 0xc4, 0x89, 0x4f, 0x67, 0x4c, 0x64, 0x7f, 0x4c, 0xf2, 0x1a,
	0x5b, 0x50, 0xdd, 0xf8, 0x76, 0x45, 0x8a, 0x05, 0xd7, 0xb6, 0x3c, 0xd0, 0x78, 0x6d, 0x25, 0x9b,
	0x1c, 0xec, 0x42, 0x6d, 0x1a, 0xf1, 0x84, 0x4f, 0xa9, 0x67, 0x87, 0x41, 0xe0, 0xc5, 0xb2, 0xd4,
	0x94, 0xda, 0xb5, 0xce, 0xf5, 0x1f, 0xae, 0x4f, 0xd1, 0x2c, 0x73, 0x1c, 0x04, 0x1e, 0x39, 0x5d,
	0x61, 0x97, 0x55, 0x8c, 0xcf, 0xe1, 0x20, 0xc5, 0xef, 0x37, 0xa5, 0xf6, 0x31, 0x49, 0x8b, 0xd6,
	0xb7, 0x12, 0x1c, 0x66, 0x06, 0x7c, 0x0e, 0x48, 0xb3, 0x4c, 0x7b, 0x3c, 0x1a, 0x0d, 0x6c, 0x7d,
	0xf8, 0x70, 0x33, 0xd0, 0x35, 0xb4, 0x87, 0xeb, 0x50, 0xcd, 0xd5, 0xde, 0x3d, 0x2a, 0x61, 0x04,
	0x27, 0xb9, 0xd0, 0x7d, 0x30, 0x51, 0x19, 0x9f, 0x41, 0x3d, 0x57, 0x0c, 0x4b, 0x37, 0xfb, 0x06,
	0x92, 0xb6, 0x1e, 0xeb, 0x99, 0x06, 0xda, 0xc7, 0xff, 0xc2, 0x5f, 0x9b, 0x8a, 0x3d, 0xee, 0x93,
	0xae, 0xa5, 0x0f, 0x34, 0x74, 0x80, 0xff, 0x81, 0xb3, 0x75, 0x6b, 0x34, 0x34, 0xf5, 0xa1, 0x35,
	0xb2, 0x0c, 0x54, 0xc1, 0x0d, 0xf8, 0x3b, 0x6f, 0xdc, 0x90, 0x9e, 0x3d, 0x26, 0x7d, 0xc3, 0xea,
	0xde, 0xe9, 0x26, 0x3a, 0xc4, 0x18, 0x6a, 0x79, 0xef, 0xde, 0x1a, 0x99, 0x37, 0xe8, 0xa8, 0xf5,
	0xb5, 0x04, 0xb0, 0xce, 0xfe, 0xb7, 0x79, 0xf6, 0xa1, 0x22, 0xee, 0x92, 0x65, 0x94, 0x52, 0xbb,
	0xda, 0x79, 0x59, 0x74, 0xe1, 0xc6, 0xd2, 0x45, 0x32, 0x33, 0x7e, 0x0f, 0x52, 0x14, 0xce, 0xb2,
	0x9f, 0xf5, 0x45, 0x51, 0x06, 0x19, 0xdf, 0x91, 0xa5, 0xef, 0xd7, 0xb1, 0x74, 0x5f, 0x7d, 0xee,
	0xec, 0x72, 0x29, 0xbe, 0x9b, 0xbb, 0x71, 0x38, 0x99, 0x54, 0x44, 0xe7, 0xf2, 0x67, 0x00, 0x00,
	0x00, 0xff, 0xff, 0x52, 0x20, 0xf0, 0x2a, 0x7c, 0x06, 0x00, 0x00,
}
