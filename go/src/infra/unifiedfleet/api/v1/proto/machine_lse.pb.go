// Code generated by protoc-gen-go. DO NOT EDIT.
// source: infra/unifiedfleet/api/v1/proto/machine_lse.proto

package ufspb

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	lab "infra/unifiedfleet/api/v1/proto/chromeos/lab"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// MachineLSE is the Machine Lab Setup Environment.
// It refers to the entity in the lab which has Machine(s) associated
// with it. It also has other components associated with it.
type MachineLSE struct {
	// a unique random generated string
	// The format will be machineLSEs/XXX
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// The prototype that this machine LSE should follow. System will use this
	// prototype to detect if the LSE is completed or valid.
	MachineLsePrototype string `protobuf:"bytes,2,opt,name=machine_lse_prototype,json=machineLsePrototype,proto3" json:"machine_lse_prototype,omitempty"`
	// The hostname is also recorded in DHCP configs
	Hostname string `protobuf:"bytes,3,opt,name=hostname,proto3" json:"hostname,omitempty"`
	// Types that are valid to be assigned to Lse:
	//	*MachineLSE_ChromeBrowserMachineLse
	//	*MachineLSE_ChromeosMachineLse
	Lse isMachineLSE_Lse `protobuf_oneof:"lse"`
	// The machines that this LSE is linked to. No machine is linked if it's empty.
	// A machine cannot be linked to multiple LSEs (no use case for now).
	Machines []string `protobuf:"bytes,6,rep,name=machines,proto3" json:"machines,omitempty"`
	// Record the last update timestamp of this MachineLSE (In UTC timezone)
	UpdateTime           *timestamp.Timestamp `protobuf:"bytes,7,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *MachineLSE) Reset()         { *m = MachineLSE{} }
func (m *MachineLSE) String() string { return proto.CompactTextString(m) }
func (*MachineLSE) ProtoMessage()    {}
func (*MachineLSE) Descriptor() ([]byte, []int) {
	return fileDescriptor_34c6435ce71f25fb, []int{0}
}

func (m *MachineLSE) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MachineLSE.Unmarshal(m, b)
}
func (m *MachineLSE) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MachineLSE.Marshal(b, m, deterministic)
}
func (m *MachineLSE) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MachineLSE.Merge(m, src)
}
func (m *MachineLSE) XXX_Size() int {
	return xxx_messageInfo_MachineLSE.Size(m)
}
func (m *MachineLSE) XXX_DiscardUnknown() {
	xxx_messageInfo_MachineLSE.DiscardUnknown(m)
}

var xxx_messageInfo_MachineLSE proto.InternalMessageInfo

func (m *MachineLSE) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *MachineLSE) GetMachineLsePrototype() string {
	if m != nil {
		return m.MachineLsePrototype
	}
	return ""
}

func (m *MachineLSE) GetHostname() string {
	if m != nil {
		return m.Hostname
	}
	return ""
}

type isMachineLSE_Lse interface {
	isMachineLSE_Lse()
}

type MachineLSE_ChromeBrowserMachineLse struct {
	ChromeBrowserMachineLse *ChromeBrowserMachineLSE `protobuf:"bytes,4,opt,name=chrome_browser_machine_lse,json=chromeBrowserMachineLse,proto3,oneof"`
}

type MachineLSE_ChromeosMachineLse struct {
	ChromeosMachineLse *ChromeOSMachineLSE `protobuf:"bytes,5,opt,name=chromeos_machine_lse,json=chromeosMachineLse,proto3,oneof"`
}

func (*MachineLSE_ChromeBrowserMachineLse) isMachineLSE_Lse() {}

func (*MachineLSE_ChromeosMachineLse) isMachineLSE_Lse() {}

func (m *MachineLSE) GetLse() isMachineLSE_Lse {
	if m != nil {
		return m.Lse
	}
	return nil
}

func (m *MachineLSE) GetChromeBrowserMachineLse() *ChromeBrowserMachineLSE {
	if x, ok := m.GetLse().(*MachineLSE_ChromeBrowserMachineLse); ok {
		return x.ChromeBrowserMachineLse
	}
	return nil
}

func (m *MachineLSE) GetChromeosMachineLse() *ChromeOSMachineLSE {
	if x, ok := m.GetLse().(*MachineLSE_ChromeosMachineLse); ok {
		return x.ChromeosMachineLse
	}
	return nil
}

func (m *MachineLSE) GetMachines() []string {
	if m != nil {
		return m.Machines
	}
	return nil
}

func (m *MachineLSE) GetUpdateTime() *timestamp.Timestamp {
	if m != nil {
		return m.UpdateTime
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*MachineLSE) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*MachineLSE_ChromeBrowserMachineLse)(nil),
		(*MachineLSE_ChromeosMachineLse)(nil),
	}
}

// ChromeBrowserMachineLSE refers to the entity
// which hosts the vms in Chrome Browser lab
type ChromeBrowserMachineLSE struct {
	// Indicate if VM is needed to set up
	// number of vms on the host
	Vms                  []*VM    `protobuf:"bytes,1,rep,name=vms,proto3" json:"vms,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ChromeBrowserMachineLSE) Reset()         { *m = ChromeBrowserMachineLSE{} }
func (m *ChromeBrowserMachineLSE) String() string { return proto.CompactTextString(m) }
func (*ChromeBrowserMachineLSE) ProtoMessage()    {}
func (*ChromeBrowserMachineLSE) Descriptor() ([]byte, []int) {
	return fileDescriptor_34c6435ce71f25fb, []int{1}
}

func (m *ChromeBrowserMachineLSE) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ChromeBrowserMachineLSE.Unmarshal(m, b)
}
func (m *ChromeBrowserMachineLSE) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ChromeBrowserMachineLSE.Marshal(b, m, deterministic)
}
func (m *ChromeBrowserMachineLSE) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChromeBrowserMachineLSE.Merge(m, src)
}
func (m *ChromeBrowserMachineLSE) XXX_Size() int {
	return xxx_messageInfo_ChromeBrowserMachineLSE.Size(m)
}
func (m *ChromeBrowserMachineLSE) XXX_DiscardUnknown() {
	xxx_messageInfo_ChromeBrowserMachineLSE.DiscardUnknown(m)
}

var xxx_messageInfo_ChromeBrowserMachineLSE proto.InternalMessageInfo

func (m *ChromeBrowserMachineLSE) GetVms() []*VM {
	if m != nil {
		return m.Vms
	}
	return nil
}

type VM struct {
	// A unique vm name
	Name                 string     `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	OsVersion            *OSVersion `protobuf:"bytes,2,opt,name=os_version,json=osVersion,proto3" json:"os_version,omitempty"`
	MacAddress           string     `protobuf:"bytes,3,opt,name=mac_address,json=macAddress,proto3" json:"mac_address,omitempty"`
	Hostname             string     `protobuf:"bytes,4,opt,name=hostname,proto3" json:"hostname,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *VM) Reset()         { *m = VM{} }
func (m *VM) String() string { return proto.CompactTextString(m) }
func (*VM) ProtoMessage()    {}
func (*VM) Descriptor() ([]byte, []int) {
	return fileDescriptor_34c6435ce71f25fb, []int{2}
}

func (m *VM) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VM.Unmarshal(m, b)
}
func (m *VM) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VM.Marshal(b, m, deterministic)
}
func (m *VM) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VM.Merge(m, src)
}
func (m *VM) XXX_Size() int {
	return xxx_messageInfo_VM.Size(m)
}
func (m *VM) XXX_DiscardUnknown() {
	xxx_messageInfo_VM.DiscardUnknown(m)
}

var xxx_messageInfo_VM proto.InternalMessageInfo

func (m *VM) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *VM) GetOsVersion() *OSVersion {
	if m != nil {
		return m.OsVersion
	}
	return nil
}

func (m *VM) GetMacAddress() string {
	if m != nil {
		return m.MacAddress
	}
	return ""
}

func (m *VM) GetHostname() string {
	if m != nil {
		return m.Hostname
	}
	return ""
}

// OSVersion refers to the version of Operating System
// for machines running in Chrome Browser lab
type OSVersion struct {
	Value                string   `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	Description          string   `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *OSVersion) Reset()         { *m = OSVersion{} }
func (m *OSVersion) String() string { return proto.CompactTextString(m) }
func (*OSVersion) ProtoMessage()    {}
func (*OSVersion) Descriptor() ([]byte, []int) {
	return fileDescriptor_34c6435ce71f25fb, []int{3}
}

func (m *OSVersion) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_OSVersion.Unmarshal(m, b)
}
func (m *OSVersion) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_OSVersion.Marshal(b, m, deterministic)
}
func (m *OSVersion) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OSVersion.Merge(m, src)
}
func (m *OSVersion) XXX_Size() int {
	return xxx_messageInfo_OSVersion.Size(m)
}
func (m *OSVersion) XXX_DiscardUnknown() {
	xxx_messageInfo_OSVersion.DiscardUnknown(m)
}

var xxx_messageInfo_OSVersion proto.InternalMessageInfo

func (m *OSVersion) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

func (m *OSVersion) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

// ChromeOSMachineLSE refers to the entity in Chrome OS lab
// which can be a DUT, test bed or a server
type ChromeOSMachineLSE struct {
	// Types that are valid to be assigned to ChromeosLse:
	//	*ChromeOSMachineLSE_Dut
	//	*ChromeOSMachineLSE_Server
	ChromeosLse          isChromeOSMachineLSE_ChromeosLse `protobuf_oneof:"chromeos_lse"`
	XXX_NoUnkeyedLiteral struct{}                         `json:"-"`
	XXX_unrecognized     []byte                           `json:"-"`
	XXX_sizecache        int32                            `json:"-"`
}

func (m *ChromeOSMachineLSE) Reset()         { *m = ChromeOSMachineLSE{} }
func (m *ChromeOSMachineLSE) String() string { return proto.CompactTextString(m) }
func (*ChromeOSMachineLSE) ProtoMessage()    {}
func (*ChromeOSMachineLSE) Descriptor() ([]byte, []int) {
	return fileDescriptor_34c6435ce71f25fb, []int{4}
}

func (m *ChromeOSMachineLSE) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ChromeOSMachineLSE.Unmarshal(m, b)
}
func (m *ChromeOSMachineLSE) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ChromeOSMachineLSE.Marshal(b, m, deterministic)
}
func (m *ChromeOSMachineLSE) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChromeOSMachineLSE.Merge(m, src)
}
func (m *ChromeOSMachineLSE) XXX_Size() int {
	return xxx_messageInfo_ChromeOSMachineLSE.Size(m)
}
func (m *ChromeOSMachineLSE) XXX_DiscardUnknown() {
	xxx_messageInfo_ChromeOSMachineLSE.DiscardUnknown(m)
}

var xxx_messageInfo_ChromeOSMachineLSE proto.InternalMessageInfo

type isChromeOSMachineLSE_ChromeosLse interface {
	isChromeOSMachineLSE_ChromeosLse()
}

type ChromeOSMachineLSE_Dut struct {
	Dut *ChromeOSDeviceLSE `protobuf:"bytes,1,opt,name=dut,proto3,oneof"`
}

type ChromeOSMachineLSE_Server struct {
	Server *ChromeOSServerLSE `protobuf:"bytes,2,opt,name=server,proto3,oneof"`
}

func (*ChromeOSMachineLSE_Dut) isChromeOSMachineLSE_ChromeosLse() {}

func (*ChromeOSMachineLSE_Server) isChromeOSMachineLSE_ChromeosLse() {}

func (m *ChromeOSMachineLSE) GetChromeosLse() isChromeOSMachineLSE_ChromeosLse {
	if m != nil {
		return m.ChromeosLse
	}
	return nil
}

func (m *ChromeOSMachineLSE) GetDut() *ChromeOSDeviceLSE {
	if x, ok := m.GetChromeosLse().(*ChromeOSMachineLSE_Dut); ok {
		return x.Dut
	}
	return nil
}

func (m *ChromeOSMachineLSE) GetServer() *ChromeOSServerLSE {
	if x, ok := m.GetChromeosLse().(*ChromeOSMachineLSE_Server); ok {
		return x.Server
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*ChromeOSMachineLSE) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*ChromeOSMachineLSE_Dut)(nil),
		(*ChromeOSMachineLSE_Server)(nil),
	}
}

// ChromeOSDeviceLSE refers to the entity in Chrome OS lab
// which is a DUT
type ChromeOSDeviceLSE struct {
	Config                 *lab.DeviceUnderTest `protobuf:"bytes,1,opt,name=config,proto3" json:"config,omitempty"`
	RpmInterface           *RPMInterface        `protobuf:"bytes,2,opt,name=rpm_interface,json=rpmInterface,proto3" json:"rpm_interface,omitempty"`
	NetworkDeviceInterface *SwitchInterface     `protobuf:"bytes,3,opt,name=network_device_interface,json=networkDeviceInterface,proto3" json:"network_device_interface,omitempty"`
	XXX_NoUnkeyedLiteral   struct{}             `json:"-"`
	XXX_unrecognized       []byte               `json:"-"`
	XXX_sizecache          int32                `json:"-"`
}

func (m *ChromeOSDeviceLSE) Reset()         { *m = ChromeOSDeviceLSE{} }
func (m *ChromeOSDeviceLSE) String() string { return proto.CompactTextString(m) }
func (*ChromeOSDeviceLSE) ProtoMessage()    {}
func (*ChromeOSDeviceLSE) Descriptor() ([]byte, []int) {
	return fileDescriptor_34c6435ce71f25fb, []int{5}
}

func (m *ChromeOSDeviceLSE) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ChromeOSDeviceLSE.Unmarshal(m, b)
}
func (m *ChromeOSDeviceLSE) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ChromeOSDeviceLSE.Marshal(b, m, deterministic)
}
func (m *ChromeOSDeviceLSE) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChromeOSDeviceLSE.Merge(m, src)
}
func (m *ChromeOSDeviceLSE) XXX_Size() int {
	return xxx_messageInfo_ChromeOSDeviceLSE.Size(m)
}
func (m *ChromeOSDeviceLSE) XXX_DiscardUnknown() {
	xxx_messageInfo_ChromeOSDeviceLSE.DiscardUnknown(m)
}

var xxx_messageInfo_ChromeOSDeviceLSE proto.InternalMessageInfo

func (m *ChromeOSDeviceLSE) GetConfig() *lab.DeviceUnderTest {
	if m != nil {
		return m.Config
	}
	return nil
}

func (m *ChromeOSDeviceLSE) GetRpmInterface() *RPMInterface {
	if m != nil {
		return m.RpmInterface
	}
	return nil
}

func (m *ChromeOSDeviceLSE) GetNetworkDeviceInterface() *SwitchInterface {
	if m != nil {
		return m.NetworkDeviceInterface
	}
	return nil
}

// ChromeOSServerLSE refers to the entity in Chrome OS lab
// which is a server. Servers serve as different roles, e.g. devservers,
// for caching chromeos images, and drones, for running GKE pods to
// maintain the swarming bots that maps to the real chromeos devices.
type ChromeOSServerLSE struct {
	// The vlan that this server is going to serve
	SupportedRestrictedVlan string   `protobuf:"bytes,1,opt,name=supported_restricted_vlan,json=supportedRestrictedVlan,proto3" json:"supported_restricted_vlan,omitempty"`
	XXX_NoUnkeyedLiteral    struct{} `json:"-"`
	XXX_unrecognized        []byte   `json:"-"`
	XXX_sizecache           int32    `json:"-"`
}

func (m *ChromeOSServerLSE) Reset()         { *m = ChromeOSServerLSE{} }
func (m *ChromeOSServerLSE) String() string { return proto.CompactTextString(m) }
func (*ChromeOSServerLSE) ProtoMessage()    {}
func (*ChromeOSServerLSE) Descriptor() ([]byte, []int) {
	return fileDescriptor_34c6435ce71f25fb, []int{6}
}

func (m *ChromeOSServerLSE) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ChromeOSServerLSE.Unmarshal(m, b)
}
func (m *ChromeOSServerLSE) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ChromeOSServerLSE.Marshal(b, m, deterministic)
}
func (m *ChromeOSServerLSE) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChromeOSServerLSE.Merge(m, src)
}
func (m *ChromeOSServerLSE) XXX_Size() int {
	return xxx_messageInfo_ChromeOSServerLSE.Size(m)
}
func (m *ChromeOSServerLSE) XXX_DiscardUnknown() {
	xxx_messageInfo_ChromeOSServerLSE.DiscardUnknown(m)
}

var xxx_messageInfo_ChromeOSServerLSE proto.InternalMessageInfo

func (m *ChromeOSServerLSE) GetSupportedRestrictedVlan() string {
	if m != nil {
		return m.SupportedRestrictedVlan
	}
	return ""
}

func init() {
	proto.RegisterType((*MachineLSE)(nil), "unifiedfleet.api.v1.proto.MachineLSE")
	proto.RegisterType((*ChromeBrowserMachineLSE)(nil), "unifiedfleet.api.v1.proto.ChromeBrowserMachineLSE")
	proto.RegisterType((*VM)(nil), "unifiedfleet.api.v1.proto.VM")
	proto.RegisterType((*OSVersion)(nil), "unifiedfleet.api.v1.proto.OSVersion")
	proto.RegisterType((*ChromeOSMachineLSE)(nil), "unifiedfleet.api.v1.proto.ChromeOSMachineLSE")
	proto.RegisterType((*ChromeOSDeviceLSE)(nil), "unifiedfleet.api.v1.proto.ChromeOSDeviceLSE")
	proto.RegisterType((*ChromeOSServerLSE)(nil), "unifiedfleet.api.v1.proto.ChromeOSServerLSE")
}

func init() {
	proto.RegisterFile("infra/unifiedfleet/api/v1/proto/machine_lse.proto", fileDescriptor_34c6435ce71f25fb)
}

var fileDescriptor_34c6435ce71f25fb = []byte{
	// 798 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x95, 0xdf, 0x6e, 0xdb, 0x36,
	0x14, 0xc6, 0xe7, 0x28, 0xc9, 0xea, 0xe3, 0x6e, 0xc0, 0xb8, 0x6e, 0x71, 0x0d, 0x0c, 0x35, 0x8c,
	0x15, 0x31, 0xb2, 0x45, 0x42, 0xbc, 0x61, 0xc3, 0xfe, 0x00, 0xab, 0x9d, 0xfd, 0x6b, 0x91, 0x20,
	0x81, 0x9c, 0xe5, 0x62, 0x37, 0x02, 0x2d, 0x1d, 0xd9, 0xc4, 0x24, 0x91, 0x23, 0x29, 0x05, 0x41,
	0xb1, 0xf7, 0x18, 0xf6, 0x10, 0x7b, 0xa6, 0x5e, 0xec, 0x6a, 0x8f, 0x90, 0xab, 0x42, 0x22, 0x25,
	0x3b, 0x68, 0x6b, 0xa7, 0x77, 0x24, 0x75, 0xce, 0xef, 0xfb, 0x74, 0xf4, 0xd1, 0x86, 0x23, 0x96,
	0xc5, 0x92, 0x7a, 0x79, 0xc6, 0x62, 0x86, 0x51, 0x9c, 0x20, 0x6a, 0x8f, 0x0a, 0xe6, 0x15, 0x47,
	0x9e, 0x90, 0x5c, 0x73, 0x2f, 0xa5, 0xe1, 0x82, 0x65, 0x18, 0x24, 0x0a, 0xdd, 0xea, 0x84, 0x3c,
	0x5c, 0x2d, 0x76, 0xa9, 0x60, 0x6e, 0x71, 0x64, 0x1e, 0xf5, 0x1e, 0xcd, 0x39, 0x9f, 0x27, 0x68,
	0x5a, 0x67, 0x79, 0xec, 0x69, 0x96, 0xa2, 0xd2, 0x34, 0x15, 0xb6, 0xe0, 0x9b, 0x39, 0x77, 0xc3,
	0x85, 0xe4, 0x29, 0xcb, 0x53, 0x97, 0xcb, 0xb9, 0x97, 0xe4, 0x21, 0xf3, 0xe6, 0x52, 0x84, 0x56,
	0xce, 0x02, 0x4a, 0x0b, 0x12, 0x15, 0xcf, 0x65, 0x68, 0x65, 0x7b, 0x3f, 0xbc, 0x45, 0x6b, 0xcc,
	0x30, 0x89, 0x82, 0x19, 0x2e, 0x68, 0xc1, 0xb8, 0xb4, 0x80, 0x8d, 0xaf, 0x2a, 0x50, 0x32, 0xb1,
	0x40, 0x49, 0x13, 0x55, 0xdb, 0xdd, 0xd4, 0x52, 0x19, 0x42, 0xae, 0xbc, 0x84, 0xce, 0xbc, 0x08,
	0x0b, 0x56, 0xdb, 0x1d, 0xfc, 0xb7, 0x0d, 0x70, 0x6a, 0x66, 0x77, 0x32, 0xfd, 0x89, 0x10, 0xd8,
	0xce, 0x68, 0x8a, 0xdd, 0x56, 0xbf, 0x35, 0x6c, 0xfb, 0xd5, 0x9a, 0x08, 0xf8, 0x68, 0x65, 0xba,
	0x41, 0xd5, 0xa7, 0xaf, 0x05, 0x76, 0xb7, 0xca, 0xa2, 0xc9, 0xf7, 0x2f, 0xc6, 0x5b, 0x37, 0xe3,
	0xaf, 0xe0, 0x4b, 0x2b, 0x7f, 0x58, 0xe9, 0x1f, 0xaa, 0x6b, 0xa5, 0x31, 0x75, 0xa9, 0x10, 0x4a,
	0x70, 0xed, 0x86, 0x3c, 0xf5, 0x96, 0x3a, 0xe7, 0x25, 0xe3, 0xe2, 0x5a, 0xa0, 0xff, 0xa1, 0x45,
	0x9f, 0x28, 0x3c, 0xaf, 0xc1, 0xa4, 0x07, 0xf7, 0x16, 0x5c, 0xe9, 0xca, 0x89, 0x53, 0x39, 0x69,
	0xf6, 0xe4, 0x4f, 0xe8, 0x99, 0xb7, 0x09, 0x66, 0x92, 0x5f, 0x29, 0x94, 0xc1, 0x8a, 0xb9, 0xee,
	0x76, 0xbf, 0x35, 0xec, 0x8c, 0x46, 0xee, 0x1b, 0xbf, 0xbd, 0x7b, 0x5c, 0x35, 0x4f, 0x4c, 0xef,
	0xd2, 0xd1, 0xaf, 0xef, 0xf8, 0x7b, 0xe1, 0xeb, 0x1e, 0x29, 0x24, 0x14, 0x1e, 0xd4, 0x03, 0xbc,
	0x25, 0xb6, 0x53, 0x89, 0x1d, 0x6e, 0x14, 0x3b, 0x9b, 0xde, 0xd2, 0x21, 0x35, 0x6c, 0x45, 0xe2,
	0x29, 0xdc, 0xb3, 0x64, 0xd5, 0xdd, 0xed, 0x3b, 0xc3, 0xf6, 0xe4, 0xf0, 0x66, 0x7c, 0x00, 0xc3,
	0xbb, 0xce, 0xd4, 0x6f, 0xda, 0xc9, 0x13, 0xe8, 0xe4, 0x22, 0xa2, 0x1a, 0x83, 0x32, 0xd5, 0xdd,
	0x77, 0x2b, 0x93, 0x3d, 0xd7, 0xc4, 0xce, 0xad, 0x23, 0xef, 0x5e, 0xd4, 0x91, 0x9f, 0x38, 0x2f,
	0xc6, 0x8e, 0x0f, 0xa6, 0xa7, 0x3c, 0xfd, 0xf6, 0xd9, 0xff, 0xe3, 0x5f, 0xe0, 0xb3, 0xb7, 0xf8,
	0x9c, 0xa4, 0x9b, 0x36, 0x6b, 0xe5, 0x3d, 0x5f, 0x6e, 0xfe, 0x9a, 0xec, 0x80, 0x93, 0x28, 0x1c,
	0x3c, 0x83, 0xbd, 0x37, 0x0c, 0x9e, 0x78, 0xe0, 0x14, 0xa9, 0xea, 0xb6, 0xfa, 0xce, 0xb0, 0x33,
	0xfa, 0x64, 0xcd, 0x30, 0x2f, 0x4f, 0xfd, 0xb2, 0x72, 0xf0, 0x4f, 0x0b, 0xb6, 0x2e, 0x4f, 0x5f,
	0x1b, 0xd5, 0x63, 0x00, 0xae, 0x82, 0x02, 0xa5, 0x62, 0x3c, 0xab, 0xf2, 0xd9, 0x19, 0x7d, 0xba,
	0x06, 0x79, 0x36, 0xbd, 0x34, 0xb5, 0x7e, 0x9b, 0x2b, 0xbb, 0x24, 0x8f, 0xa0, 0x93, 0xd2, 0x30,
	0xa0, 0x51, 0x24, 0x51, 0x29, 0x1b, 0x40, 0x48, 0x69, 0x38, 0x36, 0x27, 0xb7, 0xe2, 0xb9, 0x7d,
	0x3b, 0x9e, 0x83, 0x63, 0x68, 0x37, 0x50, 0xf2, 0x00, 0x76, 0x0a, 0x9a, 0xe4, 0xb5, 0x47, 0xb3,
	0x21, 0x7d, 0xe8, 0x44, 0xa8, 0x42, 0xc9, 0x84, 0xae, 0x5d, 0xb6, 0xfd, 0xd5, 0xa3, 0xc1, 0xbf,
	0x2d, 0x20, 0xaf, 0x46, 0x87, 0x3c, 0x01, 0x27, 0xca, 0x75, 0x05, 0xeb, 0x8c, 0x3e, 0xbf, 0x43,
	0xec, 0x7e, 0xac, 0x6e, 0xba, 0x49, 0x5d, 0xd9, 0x4a, 0x7e, 0x86, 0x5d, 0x85, 0xb2, 0x40, 0x69,
	0x67, 0x73, 0x17, 0xc8, 0xb4, 0x6a, 0x30, 0x10, 0xdb, 0x3d, 0x79, 0x1f, 0xee, 0x37, 0x37, 0xa2,
	0xfc, 0xbc, 0x7f, 0x6f, 0xc1, 0x07, 0xaf, 0x88, 0x92, 0x33, 0xd8, 0x0d, 0x79, 0x16, 0xb3, 0xb9,
	0xb5, 0xfc, 0xf5, 0x1a, 0xb5, 0x1a, 0xe7, 0x26, 0x74, 0xe6, 0x1a, 0xc4, 0x6f, 0x59, 0x84, 0xf2,
	0x02, 0x95, 0xf6, 0x2d, 0x86, 0x9c, 0xc0, 0x7b, 0x52, 0xa4, 0x01, 0xcb, 0x34, 0xca, 0x98, 0x86,
	0x68, 0xdf, 0x62, 0x7f, 0x0d, 0xd7, 0x3f, 0x3f, 0x7d, 0x5a, 0x97, 0xfb, 0xf7, 0xa5, 0x48, 0x9b,
	0x1d, 0x89, 0xa0, 0x9b, 0xa1, 0xbe, 0xe2, 0xf2, 0x8f, 0xc0, 0xfc, 0x24, 0xae, 0x80, 0x9d, 0x0a,
	0x7c, 0xb0, 0x06, 0x3c, 0xbd, 0x62, 0x3a, 0x5c, 0x2c, 0xd9, 0x1f, 0x5b, 0x96, 0xf1, 0xde, 0x9c,
	0x0f, 0x9e, 0x2f, 0x27, 0xd3, 0x4c, 0x92, 0xc4, 0xf0, 0x50, 0xe5, 0x42, 0x70, 0xa9, 0x31, 0x0a,
	0x24, 0x2a, 0x2d, 0x59, 0x58, 0x2e, 0x8b, 0x84, 0x66, 0x26, 0x2c, 0x93, 0x83, 0x9b, 0xf1, 0x3e,
	0x3c, 0xde, 0x78, 0x09, 0x2f, 0x13, 0x9a, 0xf9, 0x7b, 0x0d, 0xcc, 0x6f, 0x58, 0xe5, 0x83, 0xc9,
	0xfe, 0xef, 0x8f, 0x37, 0xfc, 0x35, 0x7c, 0x97, 0xc7, 0x4a, 0xcc, 0x66, 0xbb, 0xd5, 0xe6, 0x8b,
	0x97, 0x01, 0x00, 0x00, 0xff, 0xff, 0x41, 0x69, 0x2c, 0x10, 0x68, 0x07, 0x00, 0x00,
}
